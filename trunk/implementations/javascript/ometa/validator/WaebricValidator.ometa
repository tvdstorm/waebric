/**
 * OMeta Subvalidator for Waebric language
 * 
 * Preprocessing step for the WaebricOMetaValidator
 * Collects all function definitions in a Waebric program including 
 * those in import files.
 * 
 * Includes semantic validation for duplicate functions
 * Non-existing imports are ignored and not processed
 *
 * Imports in the Waebric program are automatically loaded from the filesystem and parsed 
 * to an new AST (Module).
 *
 * @author Nickolas Heirbaut [nickolas.heirbaut@dejasmijn.be]
 */
 
ometa WaebricOMetaValidator <: WaebricOMetaParser {

	Module			=	^Module:module
					->	{	
							//Validate the functioncalls that are still pending
							WaebricFunctionValidator.validateFunctionCallQueue(WaebricOMetaValidator);
							
							//Return the original AST object
							module;
						},
										
	FunctionDef		= 	^FunctionDef:func		
					-> 	{
							//Close the environment of the function definition
							WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.parent;
							
							//Validate for duplicate functions
							WaebricFunctionValidator.validateFunction(func, WaebricOMetaValidator);
							
							//Return the original AST object
							func; 
						},
						
	FunctionDefId	=	^FunctionDefId:funcDefId
					->	{
							//Create new environment for the function
							WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.addEnvironment("func-def");
							
							//Return the original AST object
							funcDefId; 
						},
	
	Assignment		=	^Assignment:binding
					-> 	{
							if(binding instanceof VariableBinding){								
								//Add variable to the new environment
								WaebricOMetaValidator.environment.addVariable(binding.variable);
							}else if(binding instanceof FunctionBinding){
								//Transform function binding to a function definition
								var func = new FunctionDefinition(binding.variable, binding.formals, binding.statement);	
															
								//Validate for duplicate functions
								WaebricFunctionValidator.validateFunction(func, WaebricOMetaValidator);
								
								//Remove variables
								WaebricOMetaValidator.environment.variables = new Array();
							}
							
							//Return the original AST object
							binding;
						},
						
	AssignmentId	=	^AssignmentId:assignmentId
					->	{
							//Create new environment for the let-stmt
							WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.addEnvironment("let-stmt");
							
							//Return the original AST object
							assignmentId; 							
						},	
						
	Formals			=	^Formals:formals
					->	{
							//Add variables in formals to the environment					
							for (var i = 0; i < formals.length; i++) {
								var formal = formals[i];
								WaebricOMetaValidator.environment.addVariable(formal);
							}
							
							//Return the original AST object
							formals; 
						},
						
	Statement		=	^Statement:stmt
					-> 	{
							//Reset the environment
							if(stmt instanceof EachStatement){	
								WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.parent;
							}else if(stmt instanceof LetStatement){
								//Close the environment of the let-stmt
								while(WaebricOMetaValidator.environment.type == "let-stmt"){							
									WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.parent;
								}
							}
							
							//Return the original AST object
							stmt;
						},
						
	EachIdentifier	=	^EachIdentifier:identifier
					->	{
							//Add new environment because the scope of the Each identifier
							//is limited to the statement inside the each statement.
							WaebricOMetaValidator.environment = WaebricOMetaValidator.environment.addEnvironment('each-stmt');
							
							//Add variable to new environment of each statement
							WaebricOMetaValidator.environment.addVariable(identifier);
							
							//Return the original AST object
							identifier;
						},
						
	Expression		=	^Expression:expr
					-> 	{							
							//Validate defined variables
							if(expr instanceof VarExpression){
								WaebricVariableValidator.validateVariableReference(expr,WaebricOMetaValidator)
							}
							
							//Return the original AST object
							expr;
						},
						
	Markup		=	^Markup:markup 
					-> 	{			
							//Validate if the function exists					
							WaebricFunctionValidator.validateFunctionCall(markup, true, WaebricOMetaValidator);
							
							//Return the original AST object
							markup;
						}
}
WaebricOMetaValidator.environment = new WaebricEnvironment();