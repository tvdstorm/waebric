//
// Generated by JTB 1.3.2
//

options {
   JDK_VERSION = "1.5";
}

PARSER_BEGIN(eg3)
package WaeberLexer;

import WaeberLexer.syntaxtree.*;
import WaeberLexer.visitor.*;
import java.io.*;
import java.util.Vector;


public class eg3 
{
   public static void main(String args[])
   {
      System.out.println("Reading from Waebric File...");
      String fileData = "";
      try
      {
         FileReader fr = new FileReader("c:\\waebricfile.wae");
         BufferedReader br = new BufferedReader(fr);
         String s;
         while ( (s = br.readLine()) != null )
         {
            fileData += s + "\r\n";
         }
         fileData += "ENDOFFILE";
      }
      catch (Exception e)
      {
         System.out.println("IO Exceptie, controleer bestand: " + e.getMessage());
      }
      ByteArrayInputStream bs = new ByteArrayInputStream(fileData.getBytes());
      new eg3(bs);
      try
      {
         Start start = eg3.Start();
         Visitor v = new MyVisitor();
         start.accept(v);
      }
      catch (Exception e)
      {
         System.out.println("Fout: " + e.getMessage());
      }
   }
}
class MyVisitor extends DepthFirstVisitor 
{
   public void visit(NodeToken n)
   {
      System.out.println(n.tokenImage + "     ->     "+ n.kind);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(eg3)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN :
{
   <INTEGER_LITERAL:  <DECIMAL_LITERAL> >
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
}

TOKEN :
{
   <MODULE: "module">
   | <SITE: "site">
   | <END: "end">
   | <DEF: "def">
   | <ECHO: "echo">
   | <YIELD: "yield">
   | <EACH: "each">
   | <IF: "if">
   | <LET: "let">
   | <COMMENT: "comment">
   | <CDATA: "cdata">
   | <IMPORT: "import">
}

TOKEN :
{
   <ENDOFFILE: "ENDOFFILE">
}

TOKEN :
{
   <IDENTIFIER:  <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["_", "a"-"z", "A"-"Z"]>
   | <#DIGIT: ["0"-"9"]>
}

TOKEN :
{
   <PLUS: "+">
   | <MINUS: "-">
   | <IS: "=">
   | <OPAR: "{">
   | <CPAR: "}">
   | <OBRACE: "(">
   | <CBRACE: ")">
   | <SLASH: "/">
   | <DOT: ".">
   | <COLON: ":">
   | <QUOTATION: "\"">
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <AMPERSAND: "&">
   | <FLOATINGPOINT: "'">
   | <AT: "@">
}

Start Start() :
{
   Expression n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Expression()
   n2=<ENDOFFILE> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new Start(n0,n1); }
}

Expression Expression() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;
   NodeToken n38;
   Token n39;
   NodeToken n40;
   Token n41;
   NodeToken n42;
   Token n43;
   NodeToken n44;
   Token n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeToken n52;
   Token n53;
   NodeToken n54;
   Token n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   NodeToken n60;
   Token n61;

   
}
{
   (
      (
         n3=<MODULE> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<SITE> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<END> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      |
         n9=<DEF> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n1 = new NodeChoice(n8, 3); }
      |
         n11=<ECHO> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1 = new NodeChoice(n10, 4); }
      |
         n13=<YIELD> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n1 = new NodeChoice(n12, 5); }
      |
         n15=<EACH> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n1 = new NodeChoice(n14, 6); }
      |
         n17=<IF> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n1 = new NodeChoice(n16, 7); }
      |
         n19=<LET> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n1 = new NodeChoice(n18, 8); }
      |
         n21=<COMMENT> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n1 = new NodeChoice(n20, 9); }
      |
         n23=<CDATA> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n1 = new NodeChoice(n22, 10); }
      |
         n25=<IMPORT> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n1 = new NodeChoice(n24, 11); }
      |
         n27=<IDENTIFIER> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n1 = new NodeChoice(n26, 12); }
      |
         n29=<INTEGER_LITERAL> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n1 = new NodeChoice(n28, 13); }
      |
         n31=<PLUS> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n1 = new NodeChoice(n30, 14); }
      |
         n33=<MINUS> { n32 = JTBToolkit.makeNodeToken(n33); }
         { n1 = new NodeChoice(n32, 15); }
      |
         n35=<IS> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n1 = new NodeChoice(n34, 16); }
      |
         n37=<OPAR> { n36 = JTBToolkit.makeNodeToken(n37); }
         { n1 = new NodeChoice(n36, 17); }
      |
         n39=<CPAR> { n38 = JTBToolkit.makeNodeToken(n39); }
         { n1 = new NodeChoice(n38, 18); }
      |
         n41=<OBRACE> { n40 = JTBToolkit.makeNodeToken(n41); }
         { n1 = new NodeChoice(n40, 19); }
      |
         n43=<CBRACE> { n42 = JTBToolkit.makeNodeToken(n43); }
         { n1 = new NodeChoice(n42, 20); }
      |
         n45=<SLASH> { n44 = JTBToolkit.makeNodeToken(n45); }
         { n1 = new NodeChoice(n44, 21); }
      |
         n47=<DOT> { n46 = JTBToolkit.makeNodeToken(n47); }
         { n1 = new NodeChoice(n46, 22); }
      |
         n49=<COLON> { n48 = JTBToolkit.makeNodeToken(n49); }
         { n1 = new NodeChoice(n48, 23); }
      |
         n51=<QUOTATION> { n50 = JTBToolkit.makeNodeToken(n51); }
         { n1 = new NodeChoice(n50, 24); }
      |
         n53=<SEMICOLON> { n52 = JTBToolkit.makeNodeToken(n53); }
         { n1 = new NodeChoice(n52, 25); }
      |
         n55=<COMMA> { n54 = JTBToolkit.makeNodeToken(n55); }
         { n1 = new NodeChoice(n54, 26); }
      |
         n57=<AMPERSAND> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n1 = new NodeChoice(n56, 27); }
      |
         n59=<FLOATINGPOINT> { n58 = JTBToolkit.makeNodeToken(n59); }
         { n1 = new NodeChoice(n58, 28); }
      |
         n61=<AT> { n60 = JTBToolkit.makeNodeToken(n61); }
         { n1 = new NodeChoice(n60, 29); }
      )
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new Expression(n0); }
}

AdditiveExpression AdditiveExpression() :
{

   
}
{
   
   { return new AdditiveExpression(); }
}

MultiplicativeExpression MultiplicativeExpression() :
{

   
}
{
   
   { return new MultiplicativeExpression(); }
}

UnaryExpression UnaryExpression() :
{

   
}
{
   
   { return new UnaryExpression(); }
}

Identifier Identifier() :
{

   
}
{
   
   { return new Identifier(); }
}

MyInteger MyInteger() :
{

   
}
{
   
   { return new MyInteger(); }
}
