/* Generated By:JJTree&JavaCC: Do not edit this line. WaebricParser.java */
  import java.io.*;
  public class WaebricParser/*@bgen(jjtree)*/implements WaebricParserTreeConstants, WaebricParserConstants {/*@bgen(jjtree)*/
  protected static JJTWaebricParserState jjtree = new JJTWaebricParserState();public static void main(String[] args) {
    Reader sr = new StringReader(args[0]);
    WaebricParser p = new WaebricParser(sr);
    try {
      SimpleNode n = p.Modules();
          String ast = processNode( n, 0);
          System.out.println(ast);
          //n.dump("");
    } catch (ParseException pe) {
      pe.printStackTrace();
    }
  }

  private static String processNode(Node n, int childIndex) {
        // Build the AST
        ModulesVisitor moduleVisitor = new ModulesVisitor();
        n.jjtAccept(moduleVisitor, null);
        return moduleVisitor.getAST();
  }

/* GENERIC */
  final public SimpleNode Modules() throws ParseException {
                        /*@bgen(jjtree) Modules */
  ASTModules jjtn000 = new ASTModules(JJTMODULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODULE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Module();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final private void Module() throws ParseException {
                        /*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      ModuleId();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
        case SITE:
        case DEF:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        ModuleElement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ModuleId() throws ParseException {
                   /*@bgen(jjtree) ModuleId */
  ASTModuleId jjtn000 = new ASTModuleId(JJTMODULEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        jj_consume_token(IdCon);
                   jjtn000.image += "\"" + token.image + "\"";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
                                                                         jjtn000.image += ", ";
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IdCon:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ModuleElement() throws ParseException {
                        /*@bgen(jjtree) ModuleElement */
  ASTModuleElement jjtn000 = new ASTModuleElement(JJTMODULEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        Import();
        break;
      case SITE:
        Site();
        break;
      case DEF:
        FunctionDef();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement Import 
// *********************************************
  final public void Import() throws ParseException {
                 /*@bgen(jjtree) Import */
  ASTImport jjtn000 = new ASTImport(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      ModuleId();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement Site
// *********************************************
  final public void Site() throws ParseException {
               /*@bgen(jjtree) Site */
  ASTSite jjtn000 = new ASTSite(JJTSITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SITE);
      Mappings();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Mappings() throws ParseException {
                   /*@bgen(jjtree) Mappings */
  ASTMappings jjtn000 = new ASTMappings(JJTMAPPINGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FileName:
        case DirName:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        Mapping();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Mapping() throws ParseException {
                  /*@bgen(jjtree) Mapping */
  ASTMapping jjtn000 = new ASTMapping(JJTMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Path();
      jj_consume_token(COLON);
      Markup();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Path() throws ParseException {
               /*@bgen(jjtree) Path */
  ASTPath jjtn000 = new ASTPath(JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FileName:
        jj_consume_token(FileName);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.image += "\"" + token.image + "\"";
        break;
      case DirName:
        jj_consume_token(DirName);
                          jjtn000.image += "path(\"" + token.image.substring(0, token.image.length()-1) + "\"";
        jj_consume_token(FileName);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.image += ", \"" + token.image + "\")";
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement FunctionDef
// *********************************************
  final public void FunctionDef() throws ParseException {
                      /*@bgen(jjtree) FunctionDef */
  ASTFunctionDef jjtn000 = new ASTFunctionDef(JJTFUNCTIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEF);
      jj_consume_token(IdCon);
                      jjtn000.image = "\"" + token.image + "\"";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Formals();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case EACH:
        case LET:
        case YIELD:
        case COMMENT:
        case ECHO:
        case CDATA:
        case LBRACE:
        case IdCon:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Formals() throws ParseException {
                  /*@bgen(jjtree) Formals */
  ASTFormals jjtn000 = new ASTFormals(JJTFORMALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IdCon:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        jj_consume_token(IdCon);
                          jjtn000.image += "\"" + token.image + "\"";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
                                                                                jjtn000.image += ", ";
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      }
      jj_consume_token(RPAREN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(8)) {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Predicate();
        jj_consume_token(RPAREN);
        Statement();
        jj_consume_token(ELSE);
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          Predicate();
          jj_consume_token(RPAREN);
          Statement();
          break;
        case EACH:
          jj_consume_token(EACH);
          jj_consume_token(LPAREN);
          Var();
          jj_consume_token(COLON);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[12] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          Statement();
          break;
        case LET:
          jj_consume_token(LET);
          label_7:
          while (true) {
            Assignment();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IdCon:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_7;
            }
          }
          jj_consume_token(IN);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case EACH:
            case LET:
            case YIELD:
            case COMMENT:
            case ECHO:
            case CDATA:
            case LBRACE:
            case IdCon:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_8;
            }
            Statement();
          }
          jj_consume_token(END);
          break;
        default:
          jj_la1[23] = jj_gen;
          if (jj_2_6(4)) {
            jj_consume_token(LBRACE);
                                     jjtn000.image = "block([";
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IF:
              case EACH:
              case LET:
              case YIELD:
              case COMMENT:
              case ECHO:
              case CDATA:
              case LBRACE:
              case IdCon:
                ;
                break;
              default:
                jj_la1[15] = jj_gen;
                break label_9;
              }
              Statement();
            }
            jj_consume_token(RBRACE);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case YIELD:
              jj_consume_token(YIELD);
              jj_consume_token(SEMICOLON);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.image = "yield";
              break;
            case COMMENT:
              jj_consume_token(COMMENT);
              jj_consume_token(StrCon);
              jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[24] = jj_gen;
              if (jj_2_7(2)) {
                jj_consume_token(ECHO);
                Expression();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DOT:
                  DotIdCon();
                  break;
                default:
                  jj_la1[16] = jj_gen;
                  ;
                }
                jj_consume_token(SEMICOLON);
              } else if (jj_2_8(2)) {
                jj_consume_token(ECHO);
                Embedding();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case DOT:
                  DotIdCon();
                  break;
                default:
                  jj_la1[17] = jj_gen;
                  ;
                }
                jj_consume_token(SEMICOLON);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case CDATA:
                  jj_consume_token(CDATA);
                  Expression();
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case DOT:
                    DotIdCon();
                    break;
                  default:
                    jj_la1[18] = jj_gen;
                    ;
                  }
                  jj_consume_token(SEMICOLON);
                  break;
                default:
                  jj_la1[25] = jj_gen;
                  if (jj_2_9(2147483647)) {
                    Markup();
                    jj_consume_token(SEMICOLON);
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                      jjtn000.image = "markup([";
                  } else if (jj_2_10(2147483647)) {
                    if (jj_2_2(3)) {
                      Markup();
                      Expression();
                      jj_consume_token(SEMICOLON);
                    } else {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case IdCon:
                        label_10:
                        while (true) {
                          Markup();
                          Markup();
                          if (jj_2_1(2147483647)) {
                            ;
                          } else {
                            break label_10;
                          }
                        }
                        Expression();
                        jj_consume_token(SEMICOLON);
                        break;
                      default:
                        jj_la1[19] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                      }
                    }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                           jjtn000.image = "markup-exp([";
                  } else if (jj_2_11(2147483647)) {
                    if (jj_2_4(2)) {
                      Markup();
                      Statement();
                    } else {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case IdCon:
                        label_11:
                        while (true) {
                          Markup();
                          Markup();
                          if (jj_2_3(2147483647)) {
                            ;
                          } else {
                            break label_11;
                          }
                        }
                        Statement();
                        break;
                      default:
                        jj_la1[20] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                      }
                    }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                           jjtn000.image = "markup-stat([";
                  } else if (jj_2_12(2147483647)) {
                    label_12:
                    while (true) {
                      Markup();
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case IdCon:
                        ;
                        break;
                      default:
                        jj_la1[21] = jj_gen;
                        break label_12;
                      }
                    }
                    Embedding();
                    jj_consume_token(SEMICOLON);
                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
                                                                                                     jjtn000.image = "markup-embedding([";
                  } else if (jj_2_13(2147483647)) {
                    label_13:
                    while (true) {
                      Markup();
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case IdCon:
                        ;
                        break;
                      default:
                        jj_la1[22] = jj_gen;
                        break label_13;
                      }
                    }
                    jj_consume_token(SEMICOLON);
                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
                                                                            jjtn000.image = "markup-markup([";
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Predicate() throws ParseException {
                    /*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          DotIdCon();
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
      } else if (jj_2_15(2147483647)) {
        jj_consume_token(DOT);
        jj_consume_token(Type);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_16(2)) {
        jj_consume_token(IdCon);
        Formals();
        jj_consume_token(ASSIGN);
        Statement();
      } else if (jj_2_17(2)) {
        Var();
        jj_consume_token(ASSIGN);
        Expression();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Embedding() throws ParseException {
                    /*@bgen(jjtree) Embedding */
  ASTEmbedding jjtn000 = new ASTEmbedding(JJTEMBEDDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PreText);
      Embed();
      TextTail();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Embed() throws ParseException {
                /*@bgen(jjtree) Embed */
  ASTEmbed jjtn000 = new ASTEmbed(JJTEMBED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Markup();
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DotIdCon();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TextTail() throws ParseException {
                   /*@bgen(jjtree) TextTail */
  ASTTextTail jjtn000 = new ASTTextTail(JJTTEXTTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PostText:
        jj_consume_token(PostText);
        break;
      case MidText:
        jj_consume_token(MidText);
        Embed();
        TextTail();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Used by both the Site and FunctionDef ModuleElements
// *********************************************
  final public void Markup() throws ParseException {
                 /*@bgen(jjtree) Markup */
  ASTMarkup jjtn000 = new ASTMarkup(JJTMARKUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_18(2)) {
        Designator();
        Arguments();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IdCon:
          Designator();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Designator() throws ParseException {
                     /*@bgen(jjtree) Designator */
  ASTDesignator jjtn000 = new ASTDesignator(JJTDESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
                jjtn000.image = "\"" + token.image + "\"";
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case DOT:
        case DOLLAR_SIGN:
        case NUMBER_SIGN:
        case AT:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_14;
        }
        Attribute();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Attribute() throws ParseException {
                    /*@bgen(jjtree) Attribute */
  ASTAttribute jjtn000 = new ASTAttribute(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_SIGN:
        jj_consume_token(NUMBER_SIGN);
        jj_consume_token(IdCon);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.image = "id(\"" + token.image + "\")";
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IdCon);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.image = "class(\"" + token.image + "\")";
        break;
      case DOLLAR_SIGN:
        jj_consume_token(DOLLAR_SIGN);
        jj_consume_token(IdCon);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.image = "name(\"" + token.image + "\")";
        break;
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(IdCon);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.image = "type(\"" + token.image + "\")";
        break;
      default:
        jj_la1[31] = jj_gen;
        if (jj_2_19(3)) {
          jj_consume_token(AT);
          jj_consume_token(NatCon);
                                           jjtn000.image = "width-height(" + token.image;
          jj_consume_token(PERCENT);
          jj_consume_token(NatCon);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.image += ", " + token.image + ")";
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
            jj_consume_token(AT);
            jj_consume_token(NatCon);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.image += "height(" + token.image + ")";
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Arguments() throws ParseException {
                    /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case LBRACE:
        case IdCon:
        case NatCon:
        case SymbolCon:
        case Text:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_15;
        }
        Argument();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_20(2)) {
        jj_consume_token(IdCon);
                            jjtn000.image = "\"" + token.image + "\"";
        jj_consume_token(ASSIGN);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          DotIdCon();
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case LBRACE:
        case IdCon:
        case NatCon:
        case SymbolCon:
        case Text:
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Var() throws ParseException {
              /*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.image = token.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SymbolCon:
        jj_consume_token(SymbolCon);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.image += "sym(\"" + token.image + "\")";
        break;
      case Text:
        jj_consume_token(Text);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.image += "text(\"\\" + token.image.substring(0, token.image.length()-1) + "\\\"\"";
        break;
      case NatCon:
        jj_consume_token(NatCon);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.image += "num(" + token.image + ")";
        break;
      case IdCon:
        Var();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
                           jjtn000.image = "list([";
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case LBRACE:
          case IdCon:
          case NatCon:
          case SymbolCon:
          case Text:
            ;
            break;
          default:
            jj_la1[38] = jj_gen;
            break label_16;
          }
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[39] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[40] = jj_gen;
            ;
          }
        }
        jj_consume_token(RBRACKET);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
                         jjtn000.image = "record([";
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IdCon:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_17;
          }
          KeyValuePair();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DotIdCon() throws ParseException {
                   /*@bgen(jjtree) DotIdCon */
  ASTDotIdCon jjtn000 = new ASTDotIdCon(JJTDOTIDCON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      jj_consume_token(IdCon);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void KeyValuePair() throws ParseException {
                       /*@bgen(jjtree) KeyValuePair */
  ASTKeyValuePair jjtn000 = new ASTKeyValuePair(JJTKEYVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
                jjtn000.image = "\"" + token.image + "\"";
      jj_consume_token(COLON);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DotIdCon();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_3R_69() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(NUMBER_SIGN)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(IdCon)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(MidText)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_18()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    if (jj_3R_75()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_18()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    if (jj_3R_74()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    if (jj_3R_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    if (jj_3R_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PreText)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(Type)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(IdCon)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    if (jj_3R_62()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    if (jj_3R_61()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(CDATA)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ECHO)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ECHO)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(StrCon)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(YIELD)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(LET)) return true;
    Token xsp;
    if (jj_3R_63()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(EACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(IdCon)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(IdCon)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(NatCon)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(Text)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(SymbolCon)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(NatCon)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(IdCon)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(NatCon)) return true;
    if (jj_scan_token(PERCENT)) return true;
    if (jj_scan_token(NatCon)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DOLLAR_SIGN)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public WaebricParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0xb00,0x0,0x0,0xb00,0x0,0x40000000,0x0,0x1000000,0x101ed000,0x0,0x0,0x0,0x0,0x101ed000,0x101ed000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd000,0x60000,0x100000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x14000000,0x0,0x0,0x0,0x14000000,0x14000000,0x0,0x0,0x0,0x0,0x14000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2,0x8000,0x0,0x2800,0x0,0x2800,0x0,0x8000,0x8000,0x1,0x2,0x8000,0x8000,0x8000,0x2,0x2,0x2,0x8000,0x8000,0x8000,0x8000,0x0,0x0,0x0,0x2,0x2,0x30000000,0x8000,0x2e,0xe,0x20,0x78000,0x1,0x2,0x2,0x78000,0x78000,0x2,0x1,0x8000,0x1,0x78000,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[20];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WaebricParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WaebricParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WaebricParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WaebricParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WaebricParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WaebricParser(WaebricParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WaebricParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
