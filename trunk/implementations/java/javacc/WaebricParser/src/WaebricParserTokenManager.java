/* Generated By:JJTree&JavaCC: Do not edit this line. WaebricParserTokenManager.java */
/* Imports */
import java.io.*;

/** Token Manager. */
public class WaebricParserTokenManager implements WaebricParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1f7d80L) != 0L)
         {
            jjmatchedKind = 47;
            return 1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 47;
            return 19;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 47;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x1eef80L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x11000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x1e6380L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x8c00L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x86200L) != 0L)
            return 1;
         if ((active0 & 0x160180L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x120000L) != 0L)
            return 1;
         if ((active0 & 0x40180L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x180L) != 0L)
            return 1;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 39);
      case 35:
         return jjStopAtPos(0, 35);
      case 36:
         return jjStopAtPos(0, 34);
      case 37:
         return jjStopAtPos(0, 40);
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 43:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 32);
      case 46:
         return jjStopAtPos(0, 33);
      case 58:
         return jjStopAtPos(0, 31);
      case 59:
         return jjStopAtPos(0, 30);
      case 61:
         return jjStopAtPos(0, 36);
      case 63:
         return jjStopAtPos(0, 38);
      case 64:
         return jjStopAtPos(0, 37);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x140000L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x800L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x86400L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x11100L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x8000L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x80L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x200L);
      case 121:
         return jjMoveStringLiteralDfa1_3(0x20000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 125:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x8800L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(1, 12, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x20200L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active0, 0x100L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(1, 16, 1);
         return jjMoveStringLiteralDfa2_3(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa2_3(active0, 0x40080L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
static private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(2, 10, 1);
         return jjMoveStringLiteralDfa3_3(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x20000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(2, 11, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_3(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(2, 15, 1);
         return jjMoveStringLiteralDfa3_3(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
static private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(3, 9, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(3, 13, 1);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(3, 14, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa4_3(active0, 0x40000L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(3, 19, 1);
         return jjMoveStringLiteralDfa4_3(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
static private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(4, 20, 1);
         break;
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(4, 17, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_3(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa5_3(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_3(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
static private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(5, 7, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_3(active0, 0x40000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(5, 8, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
static private int jjMoveStringLiteralDfa6_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(6, 18, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0);
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 91;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 62)
                     jjCheckNAddStates(0, 9);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 19);
                  else if (curChar == 47)
                     jjAddStates(20, 21);
                  else if (curChar == 39)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(4);
                  }
                  break;
               case 7:
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(1);
                  break;
               case 19:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar != 39)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xb7ffedfe00000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(4);
                  break;
               case 21:
                  if (curChar == 47)
                     jjAddStates(20, 21);
                  break;
               case 22:
                  if (curChar == 47)
                     jjCheckNAddStates(22, 24);
                  break;
               case 23:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 25:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 26:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 42)
                     jjAddStates(25, 26);
                  break;
               case 30:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 32:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 19);
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddStates(27, 31);
                  break;
               case 36:
                  if ((0xeffffffb00002600L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 37:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 59)
                     jjCheckNAddStates(27, 31);
                  break;
               case 41:
                  if (curChar == 34 && kind > 50)
                     kind = 50;
                  break;
               case 42:
                  if (curChar == 38)
                     jjAddStates(32, 33);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 40);
                  break;
               case 45:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 35)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 40);
                  break;
               case 49:
                  if (curChar == 34)
                     jjCheckNAddStates(34, 38);
                  break;
               case 50:
                  if ((0xeffffffb00002600L & l) != 0L)
                     jjCheckNAddStates(34, 38);
                  break;
               case 51:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 59)
                     jjCheckNAddStates(34, 38);
                  break;
               case 55:
                  if (curChar == 60 && kind > 59)
                     kind = 59;
                  break;
               case 56:
                  if (curChar == 38)
                     jjAddStates(39, 40);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 54);
                  break;
               case 59:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 35)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 54);
                  break;
               case 62:
                  if (curChar == 62)
                     jjCheckNAddStates(0, 9);
                  break;
               case 64:
                  if (curChar == 34)
                     jjCheckNAddStates(41, 45);
                  break;
               case 65:
                  if ((0xeffffffb00002600L & l) != 0L)
                     jjCheckNAddStates(41, 45);
                  break;
               case 66:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 59)
                     jjCheckNAddStates(41, 45);
                  break;
               case 70:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 71:
                  if (curChar == 38)
                     jjAddStates(46, 47);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 69);
                  break;
               case 74:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if (curChar == 35)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 69);
                  break;
               case 78:
                  if (curChar == 34)
                     jjCheckNAddStates(48, 52);
                  break;
               case 79:
                  if ((0xeffffffb00002600L & l) != 0L)
                     jjCheckNAddStates(48, 52);
                  break;
               case 80:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 82:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar == 59)
                     jjCheckNAddStates(48, 52);
                  break;
               case 84:
                  if (curChar == 60 && kind > 61)
                     kind = 61;
                  break;
               case 85:
                  if (curChar == 38)
                     jjAddStates(53, 54);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 83);
                  break;
               case 88:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 89:
                  if (curChar == 35)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 83);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 116 && kind > 58)
                     kind = 58;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 100 && kind > 58)
                     kind = 58;
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 103 && kind > 58)
                     kind = 58;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  jjAddStates(22, 24);
                  break;
               case 28:
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  jjCheckNAddTwoStates(31, 29);
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  jjAddStates(27, 31);
                  break;
               case 38:
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 43:
                  if (curChar == 120)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(44, 40);
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  jjAddStates(34, 38);
                  break;
               case 52:
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 57:
                  if (curChar == 120)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(58, 54);
                  break;
               case 63:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  jjAddStates(41, 45);
                  break;
               case 67:
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 72:
                  if (curChar == 120)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(73, 69);
                  break;
               case 77:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 79:
                  jjAddStates(48, 52);
                  break;
               case 81:
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 86:
                  if (curChar == 120)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(87, 83);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 24);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 91 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjAddStates(55, 56);
                  else if (curChar == 34)
                     jjCheckNAddStates(57, 60);
                  break;
               case 1:
                  if ((0xfffffffb00000600L & l) != 0L)
                     jjCheckNAddStates(57, 60);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(57, 60);
                  break;
               case 8:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 9:
                  if (curChar == 47)
                     jjAddStates(55, 56);
                  break;
               case 10:
                  if (curChar == 47)
                     jjCheckNAddStates(61, 63);
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 12:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 13:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42)
                     jjAddStates(64, 65);
                  break;
               case 18:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjCheckNAddStates(57, 60);
                  break;
               case 2:
                  if (curChar == 92)
                     jjCheckNAddStates(57, 60);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 11:
                  jjAddStates(61, 63);
                  break;
               case 16:
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(57, 60);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(61, 63);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 44:
         return jjStopAtPos(0, 32);
      case 46:
         return jjStopAtPos(0, 33);
      case 58:
         return jjStopAtPos(0, 31);
      case 59:
         return jjStopAtPos(0, 30);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 123:
         return jjStopAtPos(0, 28);
      case 125:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjAddStates(66, 67);
                  break;
               case 1:
                  if (curChar == 47)
                     jjCheckNAddStates(68, 70);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjAddStates(71, 72);
                  break;
               case 9:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(68, 70);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(68, 70);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fff80L) != 0L)
            return 18;
         return -1;
      case 1:
         if ((active0 & 0x1fff80L) != 0L)
            return 18;
         return -1;
      case 2:
         if ((active0 & 0x1eef80L) != 0L)
            return 18;
         return -1;
      case 3:
         if ((active0 & 0x1e6380L) != 0L)
            return 18;
         return -1;
      case 4:
         if ((active0 & 0x160180L) != 0L)
            return 18;
         return -1;
      case 5:
         if ((active0 & 0x40180L) != 0L)
            return 18;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa1_2(0x140000L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x86400L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x11100L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x8000L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x80L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x200L);
      case 121:
         return jjMoveStringLiteralDfa1_2(0x20000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x8800L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(1, 12, 18);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x20200L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x100L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 18);
         return jjMoveStringLiteralDfa2_2(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x40080L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
static private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x4000L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(2, 10, 18);
         return jjMoveStringLiteralDfa3_2(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(2, 11, 18);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 15, 18);
         return jjMoveStringLiteralDfa3_2(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
static private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(3, 9, 18);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(3, 13, 18);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(3, 14, 18);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(3, 19, 18);
         return jjMoveStringLiteralDfa4_2(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
static private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 18);
         break;
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(4, 17, 18);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
static private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(5, 7, 18);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_2(active0, 0x40000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(5, 8, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
static private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(6, 18, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
static private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 47)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 0:
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  else if (curChar == 47)
                     jjAddStates(66, 67);
                  break;
               case 1:
                  if (curChar == 47)
                     jjCheckNAddStates(68, 70);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 42)
                     jjAddStates(71, 72);
                  break;
               case 9:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 11:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 12:
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 13:
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0xffff3ffeffffd9ffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar != 47)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 2:
                  jjAddStates(68, 70);
                  break;
               case 7:
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  jjCheckNAddTwoStates(10, 8);
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(73, 76);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(68, 70);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 8);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   63, 65, 66, 70, 77, 79, 80, 84, 85, 71, 34, 36, 37, 41, 48, 50, 
   51, 55, 56, 42, 22, 27, 23, 24, 26, 30, 32, 34, 36, 37, 41, 42, 
   45, 46, 48, 50, 51, 55, 56, 59, 60, 63, 65, 66, 70, 71, 74, 75, 
   77, 79, 80, 84, 85, 88, 89, 10, 15, 1, 3, 4, 8, 11, 12, 14, 
   18, 20, 1, 6, 2, 3, 5, 9, 11, 13, 14, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\155\157\144\165\154\145", 
"\151\155\160\157\162\164", "\163\151\164\145", "\145\156\144", "\144\145\146", "\151\146", 
"\145\154\163\145", "\145\141\143\150", "\154\145\164", "\151\156", "\171\151\145\154\144", 
"\143\157\155\155\145\156\164", "\145\143\150\157", "\143\144\141\164\141", null, null, null, "\50", "\51", 
"\133", "\135", "\173", "\175", "\73", "\72", "\54", "\56", "\44", "\43", "\75", 
"\100", "\77", "\41", "\45", "\53", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "IN_STRCON", 
   "IN_NO_IDCON", 
   "IN_PATH", 
   "DEFAULT", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3d07abffff1fff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[91];
static private final int[] jjstateSet = new int[182];
static protected char curChar;
/** Constructor. */
public WaebricParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public WaebricParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 91; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 3;
static int defaultLexState = 3;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
