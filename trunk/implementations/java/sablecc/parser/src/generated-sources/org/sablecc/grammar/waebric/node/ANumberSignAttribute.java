/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class ANumberSignAttribute extends PAttribute
{
    private TNumberSign _numberSign_;
    private TIdCon _idCon_;

    public ANumberSignAttribute()
    {
        // Constructor
    }

    public ANumberSignAttribute(
        @SuppressWarnings("hiding") TNumberSign _numberSign_,
        @SuppressWarnings("hiding") TIdCon _idCon_)
    {
        // Constructor
        setNumberSign(_numberSign_);

        setIdCon(_idCon_);

    }

    @Override
    public Object clone()
    {
        return new ANumberSignAttribute(
            cloneNode(this._numberSign_),
            cloneNode(this._idCon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumberSignAttribute(this);
    }

    public TNumberSign getNumberSign()
    {
        return this._numberSign_;
    }

    public void setNumberSign(TNumberSign node)
    {
        if(this._numberSign_ != null)
        {
            this._numberSign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numberSign_ = node;
    }

    public TIdCon getIdCon()
    {
        return this._idCon_;
    }

    public void setIdCon(TIdCon node)
    {
        if(this._idCon_ != null)
        {
            this._idCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idCon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numberSign_)
            + toString(this._idCon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numberSign_ == child)
        {
            this._numberSign_ = null;
            return;
        }

        if(this._idCon_ == child)
        {
            this._idCon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numberSign_ == oldChild)
        {
            setNumberSign((TNumberSign) newChild);
            return;
        }

        if(this._idCon_ == oldChild)
        {
            setIdCon((TIdCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
