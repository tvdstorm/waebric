/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import org.sablecc.grammar.waebric.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAModules(AModules node);
    void caseAModule(AModule node);
    void caseAModuleId(AModuleId node);
    void caseADefModuleElement(ADefModuleElement node);
    void caseAImportModuleElement(AImportModuleElement node);
    void caseASiteModuleElement(ASiteModuleElement node);
    void caseAMapping(AMapping node);
    void caseAPath(APath node);
    void caseACallMarkup(ACallMarkup node);
    void caseADesignatorMarkup(ADesignatorMarkup node);
    void caseATagDesignator(ATagDesignator node);
    void caseAIdAttribute(AIdAttribute node);
    void caseAClassAttribute(AClassAttribute node);
    void caseANameAttribute(ANameAttribute node);
    void caseATypeAttribute(ATypeAttribute node);
    void caseAWidthHeightAttribute(AWidthHeightAttribute node);
    void caseAHeightAttribute(AHeightAttribute node);
    void caseAArgs(AArgs node);
    void caseAAttrArgument(AAttrArgument node);
    void caseAExpressionArgument(AExpressionArgument node);
    void caseACatExpression(ACatExpression node);
    void caseAVarExpression(AVarExpression node);
    void caseATextExpression(ATextExpression node);
    void caseASymExpression(ASymExpression node);
    void caseANumExpression(ANumExpression node);
    void caseAFieldExpression(AFieldExpression node);
    void caseAListExpression(AListExpression node);
    void caseARecordExpression(ARecordExpression node);
    void caseAPair(APair node);
    void caseAFormals(AFormals node);
    void caseAAssignmentArgs(AAssignmentArgs node);
    void caseAEachStatement(AEachStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAMarkupStatement(AMarkupStatement node);
    void caseAMarkupMarkupStatement(AMarkupMarkupStatement node);
    void caseAMarkupExpStatement(AMarkupExpStatement node);
    void caseAMarkupEmbeddingStatement(AMarkupEmbeddingStatement node);
    void caseAMarkupStatStatement(AMarkupStatStatement node);
    void caseALetStatement(ALetStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseACommentStatement(ACommentStatement node);
    void caseAEchoStatement(AEchoStatement node);
    void caseAEchoEmbeddingStatement(AEchoEmbeddingStatement node);
    void caseACdataStatement(ACdataStatement node);
    void caseAYieldStatement(AYieldStatement node);
    void caseAVarBindAssignment(AVarBindAssignment node);
    void caseAFuncBindAssignment(AFuncBindAssignment node);
    void caseAAndPredicate(AAndPredicate node);
    void caseAOrPredicate(AOrPredicate node);
    void caseAExpressionPredicate(AExpressionPredicate node);
    void caseAIsAPredicate(AIsAPredicate node);
    void caseANotPredicate(ANotPredicate node);
    void caseAListType(AListType node);
    void caseARecordType(ARecordType node);
    void caseAStringType(AStringType node);
    void caseAPreEmbedding(APreEmbedding node);
    void caseAPostTextTail(APostTextTail node);
    void caseAMidTextTail(AMidTextTail node);
    void caseAMarkupEmbeddingEmbed(AMarkupEmbeddingEmbed node);
    void caseAExpEmbeddingEmbed(AExpEmbeddingEmbed node);

    void caseTModuleKeyword(TModuleKeyword node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEach(TEach node);
    void caseTLet(TLet node);
    void caseTDef(TDef node);
    void caseTIn(TIn node);
    void caseTEnd(TEnd node);
    void caseTComment(TComment node);
    void caseTEcho(TEcho node);
    void caseTCdata(TCdata node);
    void caseTYield(TYield node);
    void caseTImport(TImport node);
    void caseTSite(TSite node);
    void caseTList(TList node);
    void caseTRecord(TRecord node);
    void caseTString(TString node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemiColon(TSemiColon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTCaret(TCaret node);
    void caseTNumberSign(TNumberSign node);
    void caseTDollarSign(TDollarSign node);
    void caseTAtSign(TAtSign node);
    void caseTPercentSign(TPercentSign node);
    void caseTQuestionMark(TQuestionMark node);
    void caseTExclamMark(TExclamMark node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTSlash(TSlash node);
    void caseTPlus(TPlus node);
    void caseTComments(TComments node);
    void caseTWhitespace(TWhitespace node);
    void caseTIdCon(TIdCon node);
    void caseTNatCon(TNatCon node);
    void caseTSymbolCon(TSymbolCon node);
    void caseTStrCon(TStrCon node);
    void caseTFilename(TFilename node);
    void caseTText(TText node);
    void caseTPreText(TPreText node);
    void caseTPostText(TPostText node);
    void caseTMidText(TMidText node);
    void caseEOF(EOF node);
}
