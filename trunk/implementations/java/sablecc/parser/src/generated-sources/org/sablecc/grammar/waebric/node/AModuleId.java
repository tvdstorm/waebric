/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AModuleId extends PModuleId
{
    private final LinkedList<TIdCon> _id_ = new LinkedList<TIdCon>();

    public AModuleId()
    {
        // Constructor
    }

    public AModuleId(
        @SuppressWarnings("hiding") List<TIdCon> _id_)
    {
        // Constructor
        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new AModuleId(
            cloneList(this._id_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuleId(this);
    }

    public LinkedList<TIdCon> getId()
    {
        return this._id_;
    }

    public void setId(List<TIdCon> list)
    {
        this._id_.clear();
        this._id_.addAll(list);
        for(TIdCon e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TIdCon> i = this._id_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdCon) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
