/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleKeyValuePairs extends PKeyValuePairs
{
    private PKeyValuePairs _keyValuePairs_;
    private TComma _comma_;
    private PKeyValuePair _keyValuePair_;

    public AMultipleKeyValuePairs()
    {
        // Constructor
    }

    public AMultipleKeyValuePairs(
        @SuppressWarnings("hiding") PKeyValuePairs _keyValuePairs_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PKeyValuePair _keyValuePair_)
    {
        // Constructor
        setKeyValuePairs(_keyValuePairs_);

        setComma(_comma_);

        setKeyValuePair(_keyValuePair_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleKeyValuePairs(
            cloneNode(this._keyValuePairs_),
            cloneNode(this._comma_),
            cloneNode(this._keyValuePair_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleKeyValuePairs(this);
    }

    public PKeyValuePairs getKeyValuePairs()
    {
        return this._keyValuePairs_;
    }

    public void setKeyValuePairs(PKeyValuePairs node)
    {
        if(this._keyValuePairs_ != null)
        {
            this._keyValuePairs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyValuePairs_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PKeyValuePair getKeyValuePair()
    {
        return this._keyValuePair_;
    }

    public void setKeyValuePair(PKeyValuePair node)
    {
        if(this._keyValuePair_ != null)
        {
            this._keyValuePair_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyValuePair_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keyValuePairs_)
            + toString(this._comma_)
            + toString(this._keyValuePair_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keyValuePairs_ == child)
        {
            this._keyValuePairs_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._keyValuePair_ == child)
        {
            this._keyValuePair_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keyValuePairs_ == oldChild)
        {
            setKeyValuePairs((PKeyValuePairs) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._keyValuePair_ == oldChild)
        {
            setKeyValuePair((PKeyValuePair) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
