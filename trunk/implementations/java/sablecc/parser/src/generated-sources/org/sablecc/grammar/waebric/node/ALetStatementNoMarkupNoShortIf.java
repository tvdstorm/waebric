/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class ALetStatementNoMarkupNoShortIf extends PStatementNoMarkupNoShortIf
{
    private TLet _let_;
    private final LinkedList<PAssignment> _assignment_ = new LinkedList<PAssignment>();
    private TIn _in_;
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TEnd _end_;

    public ALetStatementNoMarkupNoShortIf()
    {
        // Constructor
    }

    public ALetStatementNoMarkupNoShortIf(
        @SuppressWarnings("hiding") TLet _let_,
        @SuppressWarnings("hiding") List<PAssignment> _assignment_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") List<PStatement> _statement_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setLet(_let_);

        setAssignment(_assignment_);

        setIn(_in_);

        setStatement(_statement_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new ALetStatementNoMarkupNoShortIf(
            cloneNode(this._let_),
            cloneList(this._assignment_),
            cloneNode(this._in_),
            cloneList(this._statement_),
            cloneNode(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetStatementNoMarkupNoShortIf(this);
    }

    public TLet getLet()
    {
        return this._let_;
    }

    public void setLet(TLet node)
    {
        if(this._let_ != null)
        {
            this._let_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._let_ = node;
    }

    public LinkedList<PAssignment> getAssignment()
    {
        return this._assignment_;
    }

    public void setAssignment(List<PAssignment> list)
    {
        this._assignment_.clear();
        this._assignment_.addAll(list);
        for(PAssignment e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<PStatement> list)
    {
        this._statement_.clear();
        this._statement_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._let_)
            + toString(this._assignment_)
            + toString(this._in_)
            + toString(this._statement_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._let_ == child)
        {
            this._let_ = null;
            return;
        }

        if(this._assignment_.remove(child))
        {
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._let_ == oldChild)
        {
            setLet((TLet) newChild);
            return;
        }

        for(ListIterator<PAssignment> i = this._assignment_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAssignment) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
