/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AFunction extends PFunction
{
    private TDef _def_;
    private TIdCon _idCon_;
    private PFormals _formals_;
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TEnd _end_;

    public AFunction()
    {
        // Constructor
    }

    public AFunction(
        @SuppressWarnings("hiding") TDef _def_,
        @SuppressWarnings("hiding") TIdCon _idCon_,
        @SuppressWarnings("hiding") PFormals _formals_,
        @SuppressWarnings("hiding") List<PStatement> _statement_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setDef(_def_);

        setIdCon(_idCon_);

        setFormals(_formals_);

        setStatement(_statement_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AFunction(
            cloneNode(this._def_),
            cloneNode(this._idCon_),
            cloneNode(this._formals_),
            cloneList(this._statement_),
            cloneNode(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunction(this);
    }

    public TDef getDef()
    {
        return this._def_;
    }

    public void setDef(TDef node)
    {
        if(this._def_ != null)
        {
            this._def_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._def_ = node;
    }

    public TIdCon getIdCon()
    {
        return this._idCon_;
    }

    public void setIdCon(TIdCon node)
    {
        if(this._idCon_ != null)
        {
            this._idCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idCon_ = node;
    }

    public PFormals getFormals()
    {
        return this._formals_;
    }

    public void setFormals(PFormals node)
    {
        if(this._formals_ != null)
        {
            this._formals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formals_ = node;
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<PStatement> list)
    {
        this._statement_.clear();
        this._statement_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._def_)
            + toString(this._idCon_)
            + toString(this._formals_)
            + toString(this._statement_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._def_ == child)
        {
            this._def_ = null;
            return;
        }

        if(this._idCon_ == child)
        {
            this._idCon_ = null;
            return;
        }

        if(this._formals_ == child)
        {
            this._formals_ = null;
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._def_ == oldChild)
        {
            setDef((TDef) newChild);
            return;
        }

        if(this._idCon_ == oldChild)
        {
            setIdCon((TIdCon) newChild);
            return;
        }

        if(this._formals_ == oldChild)
        {
            setFormals((PFormals) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
