/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import java.util.*;
import org.sablecc.grammar.waebric.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAModules(AModules node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseASingleModuleId(ASingleModuleId node)
    {
        defaultCase(node);
    }

    public void caseAMultipleModuleId(AMultipleModuleId node)
    {
        defaultCase(node);
    }

    public void caseAFunctionModuleElement(AFunctionModuleElement node)
    {
        defaultCase(node);
    }

    public void caseAImportModuleElement(AImportModuleElement node)
    {
        defaultCase(node);
    }

    public void caseASiteModuleElement(ASiteModuleElement node)
    {
        defaultCase(node);
    }

    public void caseAImport(AImport node)
    {
        defaultCase(node);
    }

    public void caseASite(ASite node)
    {
        defaultCase(node);
    }

    public void caseASingleMappings(ASingleMappings node)
    {
        defaultCase(node);
    }

    public void caseAMultipleMappings(AMultipleMappings node)
    {
        defaultCase(node);
    }

    public void caseAMapping(AMapping node)
    {
        defaultCase(node);
    }

    public void caseADesignatorWithArgsMarkup(ADesignatorWithArgsMarkup node)
    {
        defaultCase(node);
    }

    public void caseADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultCase(node);
    }

    public void caseADesignatorWithArgsMarkupNoShortMarkup(ADesignatorWithArgsMarkupNoShortMarkup node)
    {
        defaultCase(node);
    }

    public void caseADesignator(ADesignator node)
    {
        defaultCase(node);
    }

    public void caseANumberSignAttribute(ANumberSignAttribute node)
    {
        defaultCase(node);
    }

    public void caseADotAttribute(ADotAttribute node)
    {
        defaultCase(node);
    }

    public void caseADollarSignAttribute(ADollarSignAttribute node)
    {
        defaultCase(node);
    }

    public void caseAColonAttribute(AColonAttribute node)
    {
        defaultCase(node);
    }

    public void caseAAtWidthHeightAttribute(AAtWidthHeightAttribute node)
    {
        defaultCase(node);
    }

    public void caseAAtWidthAttribute(AAtWidthAttribute node)
    {
        defaultCase(node);
    }

    public void caseAArguments(AArguments node)
    {
        defaultCase(node);
    }

    public void caseASingleArgumentList(ASingleArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAMultipleArgumentList(AMultipleArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAAssignArgument(AAssignArgument node)
    {
        defaultCase(node);
    }

    public void caseAArgumentArgument(AArgumentArgument node)
    {
        defaultCase(node);
    }

    public void caseANoPlusExpression(ANoPlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpressionExpression(APlusExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdconExpressionNoPlus(AIdconExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseATextExpressionNoPlus(ATextExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseASymbolConExpressionNoPlus(ASymbolConExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseANatConExpressionNoPlus(ANatConExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseADotIdconExpressionNoPlus(ADotIdconExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseAMultipleExpressionsExpressionNoPlus(AMultipleExpressionsExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseAKeyValuePairsExpressionNoPlus(AKeyValuePairsExpressionNoPlus node)
    {
        defaultCase(node);
    }

    public void caseASingleExpressions(ASingleExpressions node)
    {
        defaultCase(node);
    }

    public void caseAMultipleExpressions(AMultipleExpressions node)
    {
        defaultCase(node);
    }

    public void caseASingleKeyValuePairs(ASingleKeyValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAMultipleKeyValuePairs(AMultipleKeyValuePairs node)
    {
        defaultCase(node);
    }

    public void caseAKeyValuePair(AKeyValuePair node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAFormals(AFormals node)
    {
        defaultCase(node);
    }

    public void caseASingleFormal(ASingleFormal node)
    {
        defaultCase(node);
    }

    public void caseAMultipleFormal(AMultipleFormal node)
    {
        defaultCase(node);
    }

    public void caseANoMarkupStatement(ANoMarkupStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupStatementStatement(AMarkupStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupNoStatementStatement(AMarkupNoStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAEachStatementNoMarkup(AEachStatementNoMarkup node)
    {
        defaultCase(node);
    }

    public void caseAIfThenStatementNoMarkup(AIfThenStatementNoMarkup node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatementNoMarkup(AIfThenElseStatementNoMarkup node)
    {
        defaultCase(node);
    }

    public void caseANoShortIfStatementNoMarkup(ANoShortIfStatementNoMarkup node)
    {
        defaultCase(node);
    }

    public void caseANoMarkupStatementNoShortIf(ANoMarkupStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAMarkupNoStatementStatementNoShortIf(AMarkupNoStatementStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAMarkupSingleStatementMarkupNoStatement(AMarkupSingleStatementMarkupNoStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupMultipleStatementMarkupNoStatement(AMarkupMultipleStatementMarkupNoStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupExpressionStatementMarkupNoStatement(AMarkupExpressionStatementMarkupNoStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmbeddingStatementMarkupNoStatement(AEmbeddingStatementMarkupNoStatement node)
    {
        defaultCase(node);
    }

    public void caseALetStatementNoMarkupNoShortIf(ALetStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseABlockStatementNoMarkupNoShortIf(ABlockStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseACommentStatementNoMarkupNoShortIf(ACommentStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEchoExpressionStatementNoMarkupNoShortIf(AEchoExpressionStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAEchoEmbeddingStatementNoMarkupNoShortIf(AEchoEmbeddingStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseACdataStatementNoMarkupNoShortIf(ACdataStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAYieldStatementNoMarkupNoShortIf(AYieldStatementNoMarkupNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAExpressionAssignment(AExpressionAssignment node)
    {
        defaultCase(node);
    }

    public void caseAStatementAssignment(AStatementAssignment node)
    {
        defaultCase(node);
    }

    public void caseANoAndOrPredicate(ANoAndOrPredicate node)
    {
        defaultCase(node);
    }

    public void caseAAndPredicatePredicate(AAndPredicatePredicate node)
    {
        defaultCase(node);
    }

    public void caseAOrPredicatePredicate(AOrPredicatePredicate node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPredicateNoAndOr(AExpressionPredicateNoAndOr node)
    {
        defaultCase(node);
    }

    public void caseAExpressionTypePredicateNoAndOr(AExpressionTypePredicateNoAndOr node)
    {
        defaultCase(node);
    }

    public void caseANotPredicatePredicateNoAndOr(ANotPredicatePredicateNoAndOr node)
    {
        defaultCase(node);
    }

    public void caseAListType(AListType node)
    {
        defaultCase(node);
    }

    public void caseARecordType(ARecordType node)
    {
        defaultCase(node);
    }

    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    public void caseAEmbedding(AEmbedding node)
    {
        defaultCase(node);
    }

    public void caseAPosttextTextTail(APosttextTextTail node)
    {
        defaultCase(node);
    }

    public void caseAMidtextTextTail(AMidtextTextTail node)
    {
        defaultCase(node);
    }

    public void caseAMarkupMarkupEmbed(AMarkupMarkupEmbed node)
    {
        defaultCase(node);
    }

    public void caseAMarkupExpressionEmbed(AMarkupExpressionEmbed node)
    {
        defaultCase(node);
    }

    public void caseTModule(TModule node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEach(TEach node)
    {
        defaultCase(node);
    }

    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTEcho(TEcho node)
    {
        defaultCase(node);
    }

    public void caseTCdata(TCdata node)
    {
        defaultCase(node);
    }

    public void caseTYield(TYield node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTSite(TSite node)
    {
        defaultCase(node);
    }

    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    public void caseTRecord(TRecord node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemiColon(TSemiColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTNumberSign(TNumberSign node)
    {
        defaultCase(node);
    }

    public void caseTDollarSign(TDollarSign node)
    {
        defaultCase(node);
    }

    public void caseTAtSign(TAtSign node)
    {
        defaultCase(node);
    }

    public void caseTPercentSign(TPercentSign node)
    {
        defaultCase(node);
    }

    public void caseTQuestionMark(TQuestionMark node)
    {
        defaultCase(node);
    }

    public void caseTExclamMark(TExclamMark node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTComments(TComments node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTIdCon(TIdCon node)
    {
        defaultCase(node);
    }

    public void caseTNatCon(TNatCon node)
    {
        defaultCase(node);
    }

    public void caseTSymbolCon(TSymbolCon node)
    {
        defaultCase(node);
    }

    public void caseTStrCon(TStrCon node)
    {
        defaultCase(node);
    }

    public void caseTFilename(TFilename node)
    {
        defaultCase(node);
    }

    public void caseTText(TText node)
    {
        defaultCase(node);
    }

    public void caseTPreText(TPreText node)
    {
        defaultCase(node);
    }

    public void caseTPostText(TPostText node)
    {
        defaultCase(node);
    }

    public void caseTMidText(TMidText node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
