/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseStatement extends PStatement
{
    private PPredicate _predicate_;
    private PStatement _thenbranch_;
    private PStatement _elsebranch_;

    public AIfElseStatement()
    {
        // Constructor
    }

    public AIfElseStatement(
        @SuppressWarnings("hiding") PPredicate _predicate_,
        @SuppressWarnings("hiding") PStatement _thenbranch_,
        @SuppressWarnings("hiding") PStatement _elsebranch_)
    {
        // Constructor
        setPredicate(_predicate_);

        setThenbranch(_thenbranch_);

        setElsebranch(_elsebranch_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseStatement(
            cloneNode(this._predicate_),
            cloneNode(this._thenbranch_),
            cloneNode(this._elsebranch_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseStatement(this);
    }

    public PPredicate getPredicate()
    {
        return this._predicate_;
    }

    public void setPredicate(PPredicate node)
    {
        if(this._predicate_ != null)
        {
            this._predicate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._predicate_ = node;
    }

    public PStatement getThenbranch()
    {
        return this._thenbranch_;
    }

    public void setThenbranch(PStatement node)
    {
        if(this._thenbranch_ != null)
        {
            this._thenbranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenbranch_ = node;
    }

    public PStatement getElsebranch()
    {
        return this._elsebranch_;
    }

    public void setElsebranch(PStatement node)
    {
        if(this._elsebranch_ != null)
        {
            this._elsebranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsebranch_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._predicate_)
            + toString(this._thenbranch_)
            + toString(this._elsebranch_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._predicate_ == child)
        {
            this._predicate_ = null;
            return;
        }

        if(this._thenbranch_ == child)
        {
            this._thenbranch_ = null;
            return;
        }

        if(this._elsebranch_ == child)
        {
            this._elsebranch_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._predicate_ == oldChild)
        {
            setPredicate((PPredicate) newChild);
            return;
        }

        if(this._thenbranch_ == oldChild)
        {
            setThenbranch((PStatement) newChild);
            return;
        }

        if(this._elsebranch_ == oldChild)
        {
            setElsebranch((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
