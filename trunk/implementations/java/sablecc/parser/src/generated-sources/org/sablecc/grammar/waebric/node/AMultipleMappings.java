/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleMappings extends PMappings
{
    private PMappings _mappings_;
    private TSemiColon _semiColon_;
    private PMapping _mapping_;

    public AMultipleMappings()
    {
        // Constructor
    }

    public AMultipleMappings(
        @SuppressWarnings("hiding") PMappings _mappings_,
        @SuppressWarnings("hiding") TSemiColon _semiColon_,
        @SuppressWarnings("hiding") PMapping _mapping_)
    {
        // Constructor
        setMappings(_mappings_);

        setSemiColon(_semiColon_);

        setMapping(_mapping_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleMappings(
            cloneNode(this._mappings_),
            cloneNode(this._semiColon_),
            cloneNode(this._mapping_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleMappings(this);
    }

    public PMappings getMappings()
    {
        return this._mappings_;
    }

    public void setMappings(PMappings node)
    {
        if(this._mappings_ != null)
        {
            this._mappings_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mappings_ = node;
    }

    public TSemiColon getSemiColon()
    {
        return this._semiColon_;
    }

    public void setSemiColon(TSemiColon node)
    {
        if(this._semiColon_ != null)
        {
            this._semiColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiColon_ = node;
    }

    public PMapping getMapping()
    {
        return this._mapping_;
    }

    public void setMapping(PMapping node)
    {
        if(this._mapping_ != null)
        {
            this._mapping_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mapping_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mappings_)
            + toString(this._semiColon_)
            + toString(this._mapping_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mappings_ == child)
        {
            this._mappings_ = null;
            return;
        }

        if(this._semiColon_ == child)
        {
            this._semiColon_ = null;
            return;
        }

        if(this._mapping_ == child)
        {
            this._mapping_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mappings_ == oldChild)
        {
            setMappings((PMappings) newChild);
            return;
        }

        if(this._semiColon_ == oldChild)
        {
            setSemiColon((TSemiColon) newChild);
            return;
        }

        if(this._mapping_ == oldChild)
        {
            setMapping((PMapping) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
