/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMapping extends PMapping
{
    private TFilename _filename_;
    private TColon _colon_;
    private PMarkup _markup_;

    public AMapping()
    {
        // Constructor
    }

    public AMapping(
        @SuppressWarnings("hiding") TFilename _filename_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PMarkup _markup_)
    {
        // Constructor
        setFilename(_filename_);

        setColon(_colon_);

        setMarkup(_markup_);

    }

    @Override
    public Object clone()
    {
        return new AMapping(
            cloneNode(this._filename_),
            cloneNode(this._colon_),
            cloneNode(this._markup_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMapping(this);
    }

    public TFilename getFilename()
    {
        return this._filename_;
    }

    public void setFilename(TFilename node)
    {
        if(this._filename_ != null)
        {
            this._filename_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filename_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PMarkup getMarkup()
    {
        return this._markup_;
    }

    public void setMarkup(PMarkup node)
    {
        if(this._markup_ != null)
        {
            this._markup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._markup_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._filename_)
            + toString(this._colon_)
            + toString(this._markup_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._filename_ == child)
        {
            this._filename_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._markup_ == child)
        {
            this._markup_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._filename_ == oldChild)
        {
            setFilename((TFilename) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._markup_ == oldChild)
        {
            setMarkup((PMarkup) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
