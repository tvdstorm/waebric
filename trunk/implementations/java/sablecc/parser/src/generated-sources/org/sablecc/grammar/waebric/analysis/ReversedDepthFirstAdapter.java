/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import java.util.*;
import org.sablecc.grammar.waebric.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPModules().apply(this);
        outStart(node);
    }

    public void inAModules(AModules node)
    {
        defaultIn(node);
    }

    public void outAModules(AModules node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModules(AModules node)
    {
        inAModules(node);
        {
            List<PModule> copy = new ArrayList<PModule>(node.getModule());
            Collections.reverse(copy);
            for(PModule e : copy)
            {
                e.apply(this);
            }
        }
        outAModules(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            List<PModuleElement> copy = new ArrayList<PModuleElement>(node.getElement());
            Collections.reverse(copy);
            for(PModuleElement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModule(node);
    }

    public void inAModuleId(AModuleId node)
    {
        defaultIn(node);
    }

    public void outAModuleId(AModuleId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuleId(AModuleId node)
    {
        inAModuleId(node);
        {
            List<TIdCon> copy = new ArrayList<TIdCon>(node.getId());
            Collections.reverse(copy);
            for(TIdCon e : copy)
            {
                e.apply(this);
            }
        }
        outAModuleId(node);
    }

    public void inADefModuleElement(ADefModuleElement node)
    {
        defaultIn(node);
    }

    public void outADefModuleElement(ADefModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefModuleElement(ADefModuleElement node)
    {
        inADefModuleElement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outADefModuleElement(node);
    }

    public void inAImportModuleElement(AImportModuleElement node)
    {
        defaultIn(node);
    }

    public void outAImportModuleElement(AImportModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportModuleElement(AImportModuleElement node)
    {
        inAImportModuleElement(node);
        if(node.getModuleId() != null)
        {
            node.getModuleId().apply(this);
        }
        outAImportModuleElement(node);
    }

    public void inASiteModuleElement(ASiteModuleElement node)
    {
        defaultIn(node);
    }

    public void outASiteModuleElement(ASiteModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiteModuleElement(ASiteModuleElement node)
    {
        inASiteModuleElement(node);
        {
            List<PMapping> copy = new ArrayList<PMapping>(node.getMapping());
            Collections.reverse(copy);
            for(PMapping e : copy)
            {
                e.apply(this);
            }
        }
        outASiteModuleElement(node);
    }

    public void inAMapping(AMapping node)
    {
        defaultIn(node);
    }

    public void outAMapping(AMapping node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapping(AMapping node)
    {
        inAMapping(node);
        if(node.getMarkup() != null)
        {
            node.getMarkup().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outAMapping(node);
    }

    public void inAPath(APath node)
    {
        defaultIn(node);
    }

    public void outAPath(APath node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPath(APath node)
    {
        inAPath(node);
        if(node.getFilename() != null)
        {
            node.getFilename().apply(this);
        }
        outAPath(node);
    }

    public void inACallMarkup(ACallMarkup node)
    {
        defaultIn(node);
    }

    public void outACallMarkup(ACallMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallMarkup(ACallMarkup node)
    {
        inACallMarkup(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getDesignator() != null)
        {
            node.getDesignator().apply(this);
        }
        outACallMarkup(node);
    }

    public void inADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultIn(node);
    }

    public void outADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesignatorMarkup(ADesignatorMarkup node)
    {
        inADesignatorMarkup(node);
        if(node.getDesignator() != null)
        {
            node.getDesignator().apply(this);
        }
        outADesignatorMarkup(node);
    }

    public void inATagDesignator(ATagDesignator node)
    {
        defaultIn(node);
    }

    public void outATagDesignator(ATagDesignator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATagDesignator(ATagDesignator node)
    {
        inATagDesignator(node);
        {
            List<PAttribute> copy = new ArrayList<PAttribute>(node.getAttribute());
            Collections.reverse(copy);
            for(PAttribute e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outATagDesignator(node);
    }

    public void inAIdAttribute(AIdAttribute node)
    {
        defaultIn(node);
    }

    public void outAIdAttribute(AIdAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAttribute(AIdAttribute node)
    {
        inAIdAttribute(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAIdAttribute(node);
    }

    public void inAClassAttribute(AClassAttribute node)
    {
        defaultIn(node);
    }

    public void outAClassAttribute(AClassAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassAttribute(AClassAttribute node)
    {
        inAClassAttribute(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAClassAttribute(node);
    }

    public void inANameAttribute(ANameAttribute node)
    {
        defaultIn(node);
    }

    public void outANameAttribute(ANameAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameAttribute(ANameAttribute node)
    {
        inANameAttribute(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outANameAttribute(node);
    }

    public void inATypeAttribute(ATypeAttribute node)
    {
        defaultIn(node);
    }

    public void outATypeAttribute(ATypeAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeAttribute(ATypeAttribute node)
    {
        inATypeAttribute(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outATypeAttribute(node);
    }

    public void inAWidthHeightAttribute(AWidthHeightAttribute node)
    {
        defaultIn(node);
    }

    public void outAWidthHeightAttribute(AWidthHeightAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWidthHeightAttribute(AWidthHeightAttribute node)
    {
        inAWidthHeightAttribute(node);
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        outAWidthHeightAttribute(node);
    }

    public void inAHeightAttribute(AHeightAttribute node)
    {
        defaultIn(node);
    }

    public void outAHeightAttribute(AHeightAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeightAttribute(AHeightAttribute node)
    {
        inAHeightAttribute(node);
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        outAHeightAttribute(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            Collections.reverse(copy);
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        outAArgs(node);
    }

    public void inAAttrArgument(AAttrArgument node)
    {
        defaultIn(node);
    }

    public void outAAttrArgument(AAttrArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttrArgument(AAttrArgument node)
    {
        inAAttrArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAAttrArgument(node);
    }

    public void inAExpressionArgument(AExpressionArgument node)
    {
        defaultIn(node);
    }

    public void outAExpressionArgument(AExpressionArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionArgument(AExpressionArgument node)
    {
        inAExpressionArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionArgument(node);
    }

    public void inACatExpression(ACatExpression node)
    {
        defaultIn(node);
    }

    public void outACatExpression(ACatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACatExpression(ACatExpression node)
    {
        inACatExpression(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outACatExpression(node);
    }

    public void inAVarExpression(AVarExpression node)
    {
        defaultIn(node);
    }

    public void outAVarExpression(AVarExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpression(AVarExpression node)
    {
        inAVarExpression(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAVarExpression(node);
    }

    public void inATextExpression(ATextExpression node)
    {
        defaultIn(node);
    }

    public void outATextExpression(ATextExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextExpression(ATextExpression node)
    {
        inATextExpression(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextExpression(node);
    }

    public void inASymExpression(ASymExpression node)
    {
        defaultIn(node);
    }

    public void outASymExpression(ASymExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymExpression(ASymExpression node)
    {
        inASymExpression(node);
        if(node.getSymbolCon() != null)
        {
            node.getSymbolCon().apply(this);
        }
        outASymExpression(node);
    }

    public void inANumExpression(ANumExpression node)
    {
        defaultIn(node);
    }

    public void outANumExpression(ANumExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumExpression(ANumExpression node)
    {
        inANumExpression(node);
        if(node.getNatCon() != null)
        {
            node.getNatCon().apply(this);
        }
        outANumExpression(node);
    }

    public void inAFieldExpression(AFieldExpression node)
    {
        defaultIn(node);
    }

    public void outAFieldExpression(AFieldExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldExpression(AFieldExpression node)
    {
        inAFieldExpression(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFieldExpression(node);
    }

    public void inAListExpression(AListExpression node)
    {
        defaultIn(node);
    }

    public void outAListExpression(AListExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpression(AListExpression node)
    {
        inAListExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        outAListExpression(node);
    }

    public void inARecordExpression(ARecordExpression node)
    {
        defaultIn(node);
    }

    public void outARecordExpression(ARecordExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordExpression(ARecordExpression node)
    {
        inARecordExpression(node);
        {
            List<PPair> copy = new ArrayList<PPair>(node.getPair());
            Collections.reverse(copy);
            for(PPair e : copy)
            {
                e.apply(this);
            }
        }
        outARecordExpression(node);
    }

    public void inAPair(APair node)
    {
        defaultIn(node);
    }

    public void outAPair(APair node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPair(APair node)
    {
        inAPair(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAPair(node);
    }

    public void inAFormals(AFormals node)
    {
        defaultIn(node);
    }

    public void outAFormals(AFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormals(AFormals node)
    {
        inAFormals(node);
        {
            List<TIdCon> copy = new ArrayList<TIdCon>(node.getIdCon());
            Collections.reverse(copy);
            for(TIdCon e : copy)
            {
                e.apply(this);
            }
        }
        outAFormals(node);
    }

    public void inAAssignmentArgs(AAssignmentArgs node)
    {
        defaultIn(node);
    }

    public void outAAssignmentArgs(AAssignmentArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentArgs(AAssignmentArgs node)
    {
        inAAssignmentArgs(node);
        {
            List<TIdCon> copy = new ArrayList<TIdCon>(node.getIdCon());
            Collections.reverse(copy);
            for(TIdCon e : copy)
            {
                e.apply(this);
            }
        }
        outAAssignmentArgs(node);
    }

    public void inAEachStatement(AEachStatement node)
    {
        defaultIn(node);
    }

    public void outAEachStatement(AEachStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEachStatement(AEachStatement node)
    {
        inAEachStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAEachStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getElsebranch() != null)
        {
            node.getElsebranch().apply(this);
        }
        if(node.getThenbranch() != null)
        {
            node.getThenbranch().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAMarkupStatement(AMarkupStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupStatement(AMarkupStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupStatement(AMarkupStatement node)
    {
        inAMarkupStatement(node);
        if(node.getMarkup() != null)
        {
            node.getMarkup().apply(this);
        }
        outAMarkupStatement(node);
    }

    public void inAMarkupMarkupStatement(AMarkupMarkupStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupMarkupStatement(AMarkupMarkupStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupMarkupStatement(AMarkupMarkupStatement node)
    {
        inAMarkupMarkupStatement(node);
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getHead());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAMarkupMarkupStatement(node);
    }

    public void inAMarkupExpStatement(AMarkupExpStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupExpStatement(AMarkupExpStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupExpStatement(AMarkupExpStatement node)
    {
        inAMarkupExpStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAMarkupExpStatement(node);
    }

    public void inAMarkupEmbeddingStatement(AMarkupEmbeddingStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupEmbeddingStatement(AMarkupEmbeddingStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupEmbeddingStatement(AMarkupEmbeddingStatement node)
    {
        inAMarkupEmbeddingStatement(node);
        if(node.getEmbedding() != null)
        {
            node.getEmbedding().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAMarkupEmbeddingStatement(node);
    }

    public void inAMarkupStatStatement(AMarkupStatStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupStatStatement(AMarkupStatStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupStatStatement(AMarkupStatStatement node)
    {
        inAMarkupStatStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAMarkupStatStatement(node);
    }

    public void inALetStatement(ALetStatement node)
    {
        defaultIn(node);
    }

    public void outALetStatement(ALetStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetStatement(ALetStatement node)
    {
        inALetStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAssignment> copy = new ArrayList<PAssignment>(node.getAssignment());
            Collections.reverse(copy);
            for(PAssignment e : copy)
            {
                e.apply(this);
            }
        }
        outALetStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outABlockStatement(node);
    }

    public void inACommentStatement(ACommentStatement node)
    {
        defaultIn(node);
    }

    public void outACommentStatement(ACommentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommentStatement(ACommentStatement node)
    {
        inACommentStatement(node);
        if(node.getStrCon() != null)
        {
            node.getStrCon().apply(this);
        }
        outACommentStatement(node);
    }

    public void inAEchoStatement(AEchoStatement node)
    {
        defaultIn(node);
    }

    public void outAEchoStatement(AEchoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEchoStatement(AEchoStatement node)
    {
        inAEchoStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAEchoStatement(node);
    }

    public void inAEchoEmbeddingStatement(AEchoEmbeddingStatement node)
    {
        defaultIn(node);
    }

    public void outAEchoEmbeddingStatement(AEchoEmbeddingStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEchoEmbeddingStatement(AEchoEmbeddingStatement node)
    {
        inAEchoEmbeddingStatement(node);
        if(node.getEmbedding() != null)
        {
            node.getEmbedding().apply(this);
        }
        outAEchoEmbeddingStatement(node);
    }

    public void inACdataStatement(ACdataStatement node)
    {
        defaultIn(node);
    }

    public void outACdataStatement(ACdataStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACdataStatement(ACdataStatement node)
    {
        inACdataStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACdataStatement(node);
    }

    public void inAYieldStatement(AYieldStatement node)
    {
        defaultIn(node);
    }

    public void outAYieldStatement(AYieldStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYieldStatement(AYieldStatement node)
    {
        inAYieldStatement(node);
        outAYieldStatement(node);
    }

    public void inAVarBindAssignment(AVarBindAssignment node)
    {
        defaultIn(node);
    }

    public void outAVarBindAssignment(AVarBindAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarBindAssignment(AVarBindAssignment node)
    {
        inAVarBindAssignment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAVarBindAssignment(node);
    }

    public void inAFuncBindAssignment(AFuncBindAssignment node)
    {
        defaultIn(node);
    }

    public void outAFuncBindAssignment(AFuncBindAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncBindAssignment(AFuncBindAssignment node)
    {
        inAFuncBindAssignment(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getAssignmentArgs() != null)
        {
            node.getAssignmentArgs().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAFuncBindAssignment(node);
    }

    public void inAAndPredicate(AAndPredicate node)
    {
        defaultIn(node);
    }

    public void outAAndPredicate(AAndPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndPredicate(AAndPredicate node)
    {
        inAAndPredicate(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndPredicate(node);
    }

    public void inAOrPredicate(AOrPredicate node)
    {
        defaultIn(node);
    }

    public void outAOrPredicate(AOrPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrPredicate(AOrPredicate node)
    {
        inAOrPredicate(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrPredicate(node);
    }

    public void inAExpressionPredicate(AExpressionPredicate node)
    {
        defaultIn(node);
    }

    public void outAExpressionPredicate(AExpressionPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPredicate(AExpressionPredicate node)
    {
        inAExpressionPredicate(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionPredicate(node);
    }

    public void inAIsAPredicate(AIsAPredicate node)
    {
        defaultIn(node);
    }

    public void outAIsAPredicate(AIsAPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsAPredicate(AIsAPredicate node)
    {
        inAIsAPredicate(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIsAPredicate(node);
    }

    public void inANotPredicate(ANotPredicate node)
    {
        defaultIn(node);
    }

    public void outANotPredicate(ANotPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotPredicate(ANotPredicate node)
    {
        inANotPredicate(node);
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outANotPredicate(node);
    }

    public void inAListType(AListType node)
    {
        defaultIn(node);
    }

    public void outAListType(AListType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListType(AListType node)
    {
        inAListType(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListType(node);
    }

    public void inARecordType(ARecordType node)
    {
        defaultIn(node);
    }

    public void outARecordType(ARecordType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordType(ARecordType node)
    {
        inARecordType(node);
        if(node.getRecord() != null)
        {
            node.getRecord().apply(this);
        }
        outARecordType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAPreEmbedding(APreEmbedding node)
    {
        defaultIn(node);
    }

    public void outAPreEmbedding(APreEmbedding node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreEmbedding(APreEmbedding node)
    {
        inAPreEmbedding(node);
        if(node.getTextTail() != null)
        {
            node.getTextTail().apply(this);
        }
        if(node.getEmbed() != null)
        {
            node.getEmbed().apply(this);
        }
        if(node.getPreText() != null)
        {
            node.getPreText().apply(this);
        }
        outAPreEmbedding(node);
    }

    public void inAPostTextTail(APostTextTail node)
    {
        defaultIn(node);
    }

    public void outAPostTextTail(APostTextTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPostTextTail(APostTextTail node)
    {
        inAPostTextTail(node);
        if(node.getPostText() != null)
        {
            node.getPostText().apply(this);
        }
        outAPostTextTail(node);
    }

    public void inAMidTextTail(AMidTextTail node)
    {
        defaultIn(node);
    }

    public void outAMidTextTail(AMidTextTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidTextTail(AMidTextTail node)
    {
        inAMidTextTail(node);
        if(node.getTextTail() != null)
        {
            node.getTextTail().apply(this);
        }
        if(node.getEmbed() != null)
        {
            node.getEmbed().apply(this);
        }
        if(node.getMidText() != null)
        {
            node.getMidText().apply(this);
        }
        outAMidTextTail(node);
    }

    public void inAMarkupEmbeddingEmbed(AMarkupEmbeddingEmbed node)
    {
        defaultIn(node);
    }

    public void outAMarkupEmbeddingEmbed(AMarkupEmbeddingEmbed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupEmbeddingEmbed(AMarkupEmbeddingEmbed node)
    {
        inAMarkupEmbeddingEmbed(node);
        if(node.getTail() != null)
        {
            node.getTail().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getHead());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAMarkupEmbeddingEmbed(node);
    }

    public void inAExpEmbeddingEmbed(AExpEmbeddingEmbed node)
    {
        defaultIn(node);
    }

    public void outAExpEmbeddingEmbed(AExpEmbeddingEmbed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEmbeddingEmbed(AExpEmbeddingEmbed node)
    {
        inAExpEmbeddingEmbed(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            Collections.reverse(copy);
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        outAExpEmbeddingEmbed(node);
    }
}
