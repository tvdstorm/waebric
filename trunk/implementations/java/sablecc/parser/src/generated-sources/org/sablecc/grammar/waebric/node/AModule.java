/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AModule extends PModule
{
    private TModule _module_;
    private PModuleId _moduleId_;
    private final LinkedList<PModuleElement> _moduleElement_ = new LinkedList<PModuleElement>();

    public AModule()
    {
        // Constructor
    }

    public AModule(
        @SuppressWarnings("hiding") TModule _module_,
        @SuppressWarnings("hiding") PModuleId _moduleId_,
        @SuppressWarnings("hiding") List<PModuleElement> _moduleElement_)
    {
        // Constructor
        setModule(_module_);

        setModuleId(_moduleId_);

        setModuleElement(_moduleElement_);

    }

    @Override
    public Object clone()
    {
        return new AModule(
            cloneNode(this._module_),
            cloneNode(this._moduleId_),
            cloneList(this._moduleElement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModule(this);
    }

    public TModule getModule()
    {
        return this._module_;
    }

    public void setModule(TModule node)
    {
        if(this._module_ != null)
        {
            this._module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._module_ = node;
    }

    public PModuleId getModuleId()
    {
        return this._moduleId_;
    }

    public void setModuleId(PModuleId node)
    {
        if(this._moduleId_ != null)
        {
            this._moduleId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moduleId_ = node;
    }

    public LinkedList<PModuleElement> getModuleElement()
    {
        return this._moduleElement_;
    }

    public void setModuleElement(List<PModuleElement> list)
    {
        this._moduleElement_.clear();
        this._moduleElement_.addAll(list);
        for(PModuleElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._module_)
            + toString(this._moduleId_)
            + toString(this._moduleElement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._module_ == child)
        {
            this._module_ = null;
            return;
        }

        if(this._moduleId_ == child)
        {
            this._moduleId_ = null;
            return;
        }

        if(this._moduleElement_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._module_ == oldChild)
        {
            setModule((TModule) newChild);
            return;
        }

        if(this._moduleId_ == oldChild)
        {
            setModuleId((PModuleId) newChild);
            return;
        }

        for(ListIterator<PModuleElement> i = this._moduleElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModuleElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
