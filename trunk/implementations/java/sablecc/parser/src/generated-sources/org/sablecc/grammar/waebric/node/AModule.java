/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AModule extends PModule
{
    private PModuleId _id_;
    private final LinkedList<PModuleElement> _element_ = new LinkedList<PModuleElement>();

    public AModule()
    {
        // Constructor
    }

    public AModule(
        @SuppressWarnings("hiding") PModuleId _id_,
        @SuppressWarnings("hiding") List<PModuleElement> _element_)
    {
        // Constructor
        setId(_id_);

        setElement(_element_);

    }

    @Override
    public Object clone()
    {
        return new AModule(
            cloneNode(this._id_),
            cloneList(this._element_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModule(this);
    }

    public PModuleId getId()
    {
        return this._id_;
    }

    public void setId(PModuleId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PModuleElement> getElement()
    {
        return this._element_;
    }

    public void setElement(List<PModuleElement> list)
    {
        this._element_.clear();
        this._element_.addAll(list);
        for(PModuleElement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._element_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._element_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((PModuleId) newChild);
            return;
        }

        for(ListIterator<PModuleElement> i = this._element_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModuleElement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
