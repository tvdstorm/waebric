/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AEachStatementNoMarkup extends PStatementNoMarkup
{
    private TEach _each_;
    private TLParen _lParen_;
    private TIdCon _idCon_;
    private TColon _colon_;
    private PExpression _expression_;
    private TRParen _rParen_;
    private PStatement _statement_;

    public AEachStatementNoMarkup()
    {
        // Constructor
    }

    public AEachStatementNoMarkup(
        @SuppressWarnings("hiding") TEach _each_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") TIdCon _idCon_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setEach(_each_);

        setLParen(_lParen_);

        setIdCon(_idCon_);

        setColon(_colon_);

        setExpression(_expression_);

        setRParen(_rParen_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new AEachStatementNoMarkup(
            cloneNode(this._each_),
            cloneNode(this._lParen_),
            cloneNode(this._idCon_),
            cloneNode(this._colon_),
            cloneNode(this._expression_),
            cloneNode(this._rParen_),
            cloneNode(this._statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEachStatementNoMarkup(this);
    }

    public TEach getEach()
    {
        return this._each_;
    }

    public void setEach(TEach node)
    {
        if(this._each_ != null)
        {
            this._each_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._each_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public TIdCon getIdCon()
    {
        return this._idCon_;
    }

    public void setIdCon(TIdCon node)
    {
        if(this._idCon_ != null)
        {
            this._idCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idCon_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._each_)
            + toString(this._lParen_)
            + toString(this._idCon_)
            + toString(this._colon_)
            + toString(this._expression_)
            + toString(this._rParen_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._each_ == child)
        {
            this._each_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._idCon_ == child)
        {
            this._idCon_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._each_ == oldChild)
        {
            setEach((TEach) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._idCon_ == oldChild)
        {
            setIdCon((TIdCon) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
