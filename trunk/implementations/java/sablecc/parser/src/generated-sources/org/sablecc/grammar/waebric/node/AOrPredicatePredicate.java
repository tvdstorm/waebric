/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AOrPredicatePredicate extends PPredicate
{
    private PPredicateNoAndOr _predicateNoAndOr_;
    private TOr _or_;
    private PExpression _expression_;

    public AOrPredicatePredicate()
    {
        // Constructor
    }

    public AOrPredicatePredicate(
        @SuppressWarnings("hiding") PPredicateNoAndOr _predicateNoAndOr_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setPredicateNoAndOr(_predicateNoAndOr_);

        setOr(_or_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new AOrPredicatePredicate(
            cloneNode(this._predicateNoAndOr_),
            cloneNode(this._or_),
            cloneNode(this._expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrPredicatePredicate(this);
    }

    public PPredicateNoAndOr getPredicateNoAndOr()
    {
        return this._predicateNoAndOr_;
    }

    public void setPredicateNoAndOr(PPredicateNoAndOr node)
    {
        if(this._predicateNoAndOr_ != null)
        {
            this._predicateNoAndOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._predicateNoAndOr_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._predicateNoAndOr_)
            + toString(this._or_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._predicateNoAndOr_ == child)
        {
            this._predicateNoAndOr_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._predicateNoAndOr_ == oldChild)
        {
            setPredicateNoAndOr((PPredicateNoAndOr) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
