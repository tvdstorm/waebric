/* The following code was generated by JFlex 1.4.3 on 6/16/09 7:50 PM */

package waebric;

/*
@author Rob van der Horst
@author Daniel Weggemans

JFlex specificatie voor Waebric.
*/

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.io.InputStreamReader;
import java.io.InputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/16/09 7:50 PM from the specification file
 * <tt>Z:/F/$user/MoSE/Waebric/jflex/Scanner.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int SITE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\3\1\2\1\20\1\6\1\1\14\20\6\0\1\3\1\65"+
    "\1\4\1\12\1\56\1\60\1\10\1\23\1\52\1\53\1\21\1\70"+
    "\1\24\1\26\1\17\1\22\12\13\1\67\1\14\1\5\1\61\1\27"+
    "\1\64\1\57\6\16\24\25\1\62\1\7\1\63\1\0\1\11\1\0"+
    "\1\44\1\16\1\45\1\32\1\35\1\43\1\51\1\46\1\36\2\25"+
    "\1\34\1\30\1\47\1\31\1\37\1\25\1\40\1\42\1\41\1\33"+
    "\2\25\1\15\1\50\1\25\1\54\1\66\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\11\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\1\1\27\1\30\1\1\1\2\1\3"+
    "\2\6\1\13\1\14\1\17\1\20\1\21\1\27\1\1"+
    "\1\0\1\31\1\32\2\0\1\33\3\0\1\34\1\35"+
    "\2\0\11\6\1\36\1\37\6\6\1\40\3\0\1\6"+
    "\1\0\1\41\1\0\1\31\3\0\1\34\2\0\1\6"+
    "\1\42\1\43\4\6\1\44\7\6\1\45\1\46\1\44"+
    "\1\41\4\0\1\6\1\47\1\50\1\51\1\52\2\6"+
    "\1\53\4\6\2\0\5\6\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\6\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\253\0\u011d\0\u0156"+
    "\0\253\0\u018f\0\253\0\u01c8\0\253\0\u0201\0\u023a\0\253"+
    "\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\253\0\253\0\253\0\253\0\253\0\253\0\u04ad\0\253"+
    "\0\253\0\u04e6\0\u04e6\0\u04e6\0\u051f\0\u0558\0\u04e6\0\u04e6"+
    "\0\u04e6\0\u04e6\0\u04e6\0\u04e6\0\u0591\0\u011d\0\253\0\253"+
    "\0\u05ca\0\u0603\0\253\0\u063c\0\u0675\0\u0273\0\253\0\253"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u01c8\0\u01c8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\253\0\u04e6\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0591\0\253\0\u0b22\0\u011d\0\u0b5b\0\u0b94\0\u0bcd\0\u0273"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u01c8\0\u01c8\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u01c8\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0a77\0\253\0\u051f\0\u0591\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u1041\0\u107a"+
    "\0\u01c8\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u01c8\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u1326\0\u01c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\4\1\6\1\4\1\10"+
    "\1\4\1\11\1\12\1\13\2\14\1\15\2\4\1\16"+
    "\1\17\1\20\1\14\1\4\1\21\1\22\1\14\1\23"+
    "\1\14\1\24\1\25\1\26\1\14\1\27\1\14\1\30"+
    "\2\14\1\31\2\14\1\32\1\14\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\5\2\6\2\52"+
    "\1\53\1\4\2\52\1\54\2\52\2\55\1\4\2\52"+
    "\1\16\2\52\1\55\2\52\5\55\1\56\14\55\1\57"+
    "\1\60\2\52\1\61\1\62\1\63\6\52\1\64\1\52"+
    "\4\4\1\65\64\4\73\0\1\6\66\0\4\66\1\67"+
    "\1\70\1\66\1\71\1\72\7\66\1\0\50\66\10\0"+
    "\1\73\73\0\1\12\70\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\22\14\40\0\1\74\1\75\46\0\1\17"+
    "\3\0\2\17\1\0\5\17\1\0\3\17\1\0\3\17"+
    "\1\0\2\17\1\0\23\17\1\0\15\17\4\76\1\77"+
    "\1\100\1\76\1\101\1\102\7\76\1\0\50\76\13\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\1\14\1\103"+
    "\20\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\5\14\1\104\14\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\5\14\1\105\1\106\13\14\32\0\1\14"+
    "\1\0\2\14\6\0\2\14\1\0\4\14\1\107\7\14"+
    "\1\110\1\111\1\14\1\112\2\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\1\113\12\14\1\114\3\14"+
    "\1\115\2\14\32\0\1\14\1\0\2\14\6\0\2\14"+
    "\1\0\5\14\1\116\14\14\32\0\1\14\1\0\2\14"+
    "\6\0\2\14\1\0\6\14\1\117\2\14\1\120\10\14"+
    "\32\0\1\14\1\0\2\14\6\0\2\14\1\0\1\14"+
    "\1\121\1\122\17\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\6\14\1\123\13\14\105\0\1\124\2\0"+
    "\1\125\3\0\3\125\1\0\7\125\1\126\2\125\1\127"+
    "\47\125\3\0\3\125\1\0\3\125\1\55\1\125\2\55"+
    "\1\126\2\125\1\127\2\125\2\55\1\125\22\55\20\125"+
    "\3\0\3\125\1\0\3\125\1\55\1\125\2\55\1\126"+
    "\2\125\1\127\2\125\2\55\1\125\17\55\1\130\2\55"+
    "\17\125\1\131\1\0\2\131\1\132\1\131\1\0\1\133"+
    "\10\131\1\0\50\131\4\66\1\134\1\70\1\66\1\71"+
    "\1\72\7\66\1\0\61\66\1\135\1\136\1\0\1\66"+
    "\2\135\6\66\1\135\2\66\22\135\15\66\1\135\1\66"+
    "\21\74\1\137\47\74\2\75\1\6\66\75\4\76\1\140"+
    "\1\100\1\76\1\101\1\102\7\76\1\0\61\76\1\141"+
    "\1\142\1\0\1\76\2\141\6\76\1\141\2\76\22\141"+
    "\15\76\1\141\1\76\13\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\2\14\1\143\17\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\13\14\1\144\6\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\11\14\1\145"+
    "\10\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\12\14\1\146\7\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\12\14\1\147\7\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\15\14\1\150\4\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\16\14\1\151"+
    "\3\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\2\14\1\152\17\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\7\14\1\153\12\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\15\14\1\154\4\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\11\14\1\155"+
    "\10\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\10\14\1\156\11\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\1\157\21\14\32\0\1\14\1\0\2\14"+
    "\6\0\2\14\1\0\14\14\1\160\5\14\32\0\1\14"+
    "\1\0\2\14\6\0\2\14\1\0\5\14\1\161\14\14"+
    "\32\0\1\162\1\0\2\162\6\0\1\162\2\0\22\162"+
    "\17\0\1\163\3\0\3\163\1\0\7\163\1\0\2\163"+
    "\1\0\46\163\1\125\3\0\3\125\1\0\3\125\1\55"+
    "\1\125\2\55\1\126\2\125\1\127\2\125\2\55\1\125"+
    "\2\55\1\164\17\55\17\125\1\131\1\0\2\131\1\165"+
    "\1\131\1\0\1\133\10\131\1\0\50\131\11\0\1\135"+
    "\1\0\1\135\1\66\3\135\5\0\2\135\1\0\22\135"+
    "\15\0\1\135\14\0\1\166\1\0\1\167\53\0\22\74"+
    "\1\6\46\74\11\0\1\141\1\0\1\141\1\76\3\141"+
    "\5\0\2\141\1\0\22\141\15\0\1\141\14\0\1\170"+
    "\1\0\1\171\66\0\1\14\1\0\2\14\6\0\2\14"+
    "\1\0\3\14\1\172\16\14\32\0\1\14\1\0\2\14"+
    "\6\0\2\14\1\0\11\14\1\173\10\14\32\0\1\14"+
    "\1\0\2\14\6\0\2\14\1\0\5\14\1\174\14\14"+
    "\32\0\1\14\1\0\2\14\6\0\2\14\1\0\16\14"+
    "\1\175\3\14\32\0\1\14\1\0\2\14\6\0\2\14"+
    "\1\0\1\14\1\176\20\14\32\0\1\14\1\0\2\14"+
    "\6\0\2\14\1\0\1\14\1\177\20\14\32\0\1\14"+
    "\1\0\2\14\6\0\2\14\1\0\1\14\1\200\20\14"+
    "\32\0\1\14\1\0\2\14\6\0\2\14\1\0\5\14"+
    "\1\201\14\14\32\0\1\14\1\0\2\14\6\0\2\14"+
    "\1\0\6\14\1\202\13\14\32\0\1\14\1\0\2\14"+
    "\6\0\2\14\1\0\1\203\21\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\11\14\1\204\10\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\4\14\1\205"+
    "\15\14\32\0\1\166\1\66\67\0\1\206\2\0\1\206"+
    "\13\0\1\206\2\0\1\206\5\0\3\206\36\0\1\170"+
    "\1\76\67\0\1\207\2\0\1\207\13\0\1\207\2\0"+
    "\1\207\5\0\3\207\36\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\4\14\1\210\15\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\10\14\1\211\11\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\10\14\1\212"+
    "\11\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\17\14\1\213\2\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\5\14\1\214\14\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\14\14\1\215\5\14\32\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\2\14\1\216"+
    "\17\14\32\0\1\206\1\66\1\0\1\206\13\0\1\206"+
    "\2\0\1\206\5\0\3\206\36\0\1\207\1\76\1\0"+
    "\1\207\13\0\1\207\2\0\1\207\5\0\3\207\36\0"+
    "\1\14\1\0\2\14\6\0\2\14\1\0\5\14\1\217"+
    "\14\14\32\0\1\14\1\0\2\14\6\0\2\14\1\0"+
    "\11\14\1\220\10\14\32\0\1\14\1\0\2\14\6\0"+
    "\2\14\1\0\2\14\1\221\17\14\32\0\1\14\1\0"+
    "\2\14\6\0\2\14\1\0\21\14\1\222\32\0\1\14"+
    "\1\0\2\14\6\0\2\14\1\0\17\14\1\223\2\14"+
    "\32\0\1\14\1\0\2\14\6\0\2\14\1\0\11\14"+
    "\1\224\10\14\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4959];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\12\1\14\11\1\1\2\11"+
    "\14\1\1\0\2\11\2\0\1\11\3\0\2\11\2\0"+
    "\21\1\1\11\3\0\1\1\1\0\1\11\1\0\1\1"+
    "\3\0\1\1\2\0\20\1\1\11\2\1\4\0\14\1"+
    "\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[148];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private StringBuffer string = new StringBuffer();
	private int html_count = 0;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;
    
	public Lexer(ComplexSymbolFactory sf) {
		this(new InputStreamReader(System.in));
        symbolFactory = sf;
    }
    
    public Lexer(ComplexSymbolFactory sf, InputStream is) {
		this(is);
		symbolFactory = sf;
	}
            
    public Symbol symbol(String name, int code) {		
    	//System.out.println("state: " + yystate() + " name: " + name + " code: " + code + " line: " + (yyline+1));
		return symbolFactory.newSymbol(name, code,new Location(yyline+1,yycolumn+1-yylength()),new Location(yyline+1,yycolumn+1));
    }
    
    public Symbol symbol(String name, int code, Object lexem){
    	//System.out.println("state: " + yystate() + " name: " + name + " code: " + code + " lexem: " + lexem.toString() + " line: " + (yyline+1));		
		return symbolFactory.newSymbol(name, code, new Location(yyline+1, yycolumn +1), new Location(yyline+1,yycolumn+yylength()), lexem);
    }    
    
    private void error(String message) {
    	System.err.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { yybegin(YYINITIAL); return symbol("StrCon", sym.STRCON, yytext());
          }
        case 51: break;
        case 47: 
          { return symbol("Import", sym.IMPORT);
          }
        case 52: break;
        case 11: 
          { return symbol("Left Parenthesis", sym.LPAREN);
          }
        case 53: break;
        case 44: 
          { return symbol("CDATA", sym.CDATA);
          }
        case 54: break;
        case 9: 
          { return symbol("SymbolCon", sym.SYMBOLCON, yytext());
          }
        case 55: break;
        case 7: 
          { return symbol("Dot", sym.DOT);
          }
        case 56: break;
        case 36: 
          { yybegin(YYINITIAL); return symbol("End", sym.END);
          }
        case 57: break;
        case 19: 
          { return symbol("Left brackets", sym.LBRACKET);
          }
        case 58: break;
        case 42: 
          { return symbol("Echo", sym.ECHO);
          }
        case 59: break;
        case 31: 
          { return symbol("In", sym.IN);
          }
        case 60: break;
        case 28: 
          { return symbol("PostText", sym.POSTTEXT, yytext());
          }
        case 61: break;
        case 18: 
          { return symbol("Assign", sym.ASSIGN);
          }
        case 62: break;
        case 23: 
          { return symbol("Colon", sym.COLON);
          }
        case 63: break;
        case 50: 
          { yybegin(COMMENT); return symbol("Comment", sym.COMMENT);
          }
        case 64: break;
        case 16: 
          { return symbol("At sign", sym.AT_SIGN);
          }
        case 65: break;
        case 38: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return symbol("Directory", sym.DIRECTORY, yytext());
          }
        case 66: break;
        case 4: 
          { return symbol("NatCon", sym.NATCON, new Integer(Integer.parseInt(yytext())));
          }
        case 67: break;
        case 14: 
          { return symbol("Right braces", sym.RBRACE);
          }
        case 68: break;
        case 41: 
          { return symbol("Each", sym.EACH);
          }
        case 69: break;
        case 35: 
          { return symbol("Let", sym.LET);
          }
        case 70: break;
        case 2: 
          { /* Negeren */
          }
        case 71: break;
        case 24: 
          { return symbol("Plus", sym.PLUS);
          }
        case 72: break;
        case 40: 
          { return symbol("Else", sym.ELSE);
          }
        case 73: break;
        case 1: 
          { error("Illegal character <"+ yytext()+">");
          }
        case 74: break;
        case 46: 
          { return symbol("Module constant", MODULE);
          }
        case 75: break;
        case 25: 
          { return symbol("Text", sym.TEXT, yytext());
          }
        case 76: break;
        case 34: 
          { return symbol("Def", sym.DEF);
          }
        case 77: break;
        case 8: 
          { return symbol("Slash", sym.SLASH);
          }
        case 78: break;
        case 21: 
          { return symbol("Questionmark", sym.QUESTIONMARK);
          }
        case 79: break;
        case 17: 
          { return symbol("Percent sign", sym.PERCENT_SIGN);
          }
        case 80: break;
        case 32: 
          { return symbol("Or", sym.OR);
          }
        case 81: break;
        case 27: 
          { return symbol("And", sym.AND);
          }
        case 82: break;
        case 10: 
          { return symbol("Comma", sym.COMMA);
          }
        case 83: break;
        case 3: 
          { return symbol("Number sign", sym.NUMBER_SIGN);
          }
        case 84: break;
        case 45: 
          { return symbol("Yield", sym.YIELD);
          }
        case 85: break;
        case 13: 
          { return symbol("Left braces", sym.LBRACE);
          }
        case 86: break;
        case 22: 
          { return symbol("Exclamation", sym.EXCLAMATION);
          }
        case 87: break;
        case 48: 
          { return symbol("Record", sym.RECORD);
          }
        case 88: break;
        case 29: 
          { return symbol("MidText", sym.MIDTEXT, yytext());
          }
        case 89: break;
        case 20: 
          { return symbol("Right brackets", sym.RBRACKET);
          }
        case 90: break;
        case 39: 
          { return symbol("List", sym.LIST);
          }
        case 91: break;
        case 37: 
          { return symbol("Filename", sym.FILENAME, yytext());
          }
        case 92: break;
        case 12: 
          { return symbol("Right parenthesis", sym.RPAREN);
          }
        case 93: break;
        case 15: 
          { return symbol("Dollar sign", sym.DOLLAR_SIGN);
          }
        case 94: break;
        case 43: 
          { yybegin(SITE); return symbol("Site", sym.SITE);
          }
        case 95: break;
        case 5: 
          { return symbol("Semicolon", sym.SEMI);
          }
        case 96: break;
        case 30: 
          { return symbol("If", sym.IF);
          }
        case 97: break;
        case 49: 
          { return symbol("String", sym.STRING);
          }
        case 98: break;
        case 6: 
          { return symbol("IdCon", sym.IDCON, yytext());
          }
        case 99: break;
        case 26: 
          { return symbol("PreText", sym.PRETEXT, yytext());
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
