/*
 * Generated by classgen, version 1.5
 * 6/16/09 7:49 PM
 */
package waebric.node;

public class Module implements SyntaxNode {

  private SyntaxNode parent;
  public ModuleId moduleId;
  public ModuleElementList moduleElementList;

  public Module (ModuleId moduleId, ModuleElementList moduleElementList) {
    this.moduleId = moduleId;
    if (moduleId != null) moduleId.setParent(this);
    this.moduleElementList = moduleElementList;
    if (moduleElementList != null) moduleElementList.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (moduleId != null) moduleId.accept(visitor);
    if (moduleElementList != null) moduleElementList.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (moduleId != null) moduleId.traverseTopDown(visitor);
    if (moduleElementList != null) moduleElementList.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (moduleId != null) moduleId.traverseBottomUp(visitor);
    if (moduleElementList != null) moduleElementList.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Module(\n");
      if (moduleId != null)
        buffer.append(moduleId.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (moduleElementList != null)
        buffer.append(moduleElementList.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Module]");
    return buffer.toString();
  }
}
