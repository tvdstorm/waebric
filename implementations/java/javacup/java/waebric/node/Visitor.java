/*
 * Generated by classgen, version 1.5
 * 7/30/09 10:24 AM
 */
package waebric.node;

public interface Visitor {

  public void visit(ModuleElementList moduleElementList);
  public void visit(ModuleId moduleId);
  public void visit(MappingList mappingList);
  public void visit(FormalList formalList);
  public void visit(StatementList statementList);
  public void visit(AssignmentList assignmentList);
  public void visit(ExpressionList expressionList);
  public void visit(KeyvaluepairList keyvaluepairList);
  public void visit(MarkupList markupList);
  public void visit(AttribuutList attribuutList);
  public void visit(Args args);
  public void visit(Module module);
  public void visit(Mapping mapping);
  public void visit(Path path);
  public void visit(Keyvaluepair keyvaluepair);
  public void visit(Dummy dummy);
  public void visit(ModuleElement moduleElement);
  public void visit(Site site);
  public void visit(ImportDeclaration importDeclaration);
  public void visit(Def def);
  public void visit(Embed embed);
  public void visit(ExpEmbedding expEmbedding);
  public void visit(MarkupEmbedding markupEmbedding);
  public void visit(Texttail texttail);
  public void visit(Post post);
  public void visit(Mid mid);
  public void visit(Embedding embedding);
  public void visit(Embedding0 embedding0);
  public void visit(Pre pre);
  public void visit(Statement statement);
  public void visit(Opmaak opmaak);
  public void visit(MarkupMarkup markupMarkup);
  public void visit(MarkupStat markupStat);
  public void visit(MarkupExp markupExp);
  public void visit(CData cData);
  public void visit(Echo echo);
  public void visit(EchoEmbedding echoEmbedding);
  public void visit(Yield yield);
  public void visit(Comment comment);
  public void visit(Let let);
  public void visit(Each each);
  public void visit(Iff iff);
  public void visit(IfElse ifElse);
  public void visit(MarkupEmbeddingg markupEmbeddingg);
  public void visit(Statement15 statement15);
  public void visit(Block block);
  public void visit(Tiepe tiepe);
  public void visit(ListType listType);
  public void visit(RecordType recordType);
  public void visit(StringType stringType);
  public void visit(Predicate predicate);
  public void visit(Predicate0 predicate0);
  public void visit(IsA isA);
  public void visit(Not not);
  public void visit(And and);
  public void visit(Or or);
  public void visit(Assignment assignment);
  public void visit(VarBind varBind);
  public void visit(FuncBind funcBind);
  public void visit(Expression expression);
  public void visit(List list);
  public void visit(Var var);
  public void visit(Symb symb);
  public void visit(Num num);
  public void visit(Text text);
  public void visit(Record record);
  public void visit(Field field);
  public void visit(Markup markup);
  public void visit(Markup0 markup0);
  public void visit(Call call);
  public void visit(Formal formal);
  public void visit(Formal0 formal0);
  public void visit(Empty empty);
  public void visit(Designator designator);
  public void visit(Designator0 designator0);
  public void visit(Tag tag);
  public void visit(Attribuut attribuut);
  public void visit(Id id);
  public void visit(Classs classs);
  public void visit(Name name);
  public void visit(Type type);
  public void visit(WidthHeight widthHeight);
  public void visit(Height height);
  public void visit(Argument argument);
  public void visit(Argument0 argument0);
  public void visit(Attri attri);

}
