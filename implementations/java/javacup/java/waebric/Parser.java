
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 16 20:42:24 CEST 2009
//----------------------------------------------------

package waebric;

import java_cup.runtime.*;
import java.io.FileInputStream;
import waebric.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 16 20:42:24 CEST 2009
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\006\003\000\002\006" +
    "\005\000\002\007\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\014\003\000\002\014\004\000" +
    "\002\015\002\000\002\015\003\000\002\005\005\000\002" +
    "\022\003\000\002\022\005\000\002\021\002\000\002\021" +
    "\003\000\002\020\002\000\002\020\005\000\002\017\007" +
    "\000\002\010\005\000\002\012\003\000\002\012\005\000" +
    "\002\011\005\000\002\013\003\000\002\013\005\000\002" +
    "\032\004\000\002\040\004\000\002\037\003\000\002\037" +
    "\003\000\002\041\003\000\002\041\004\000\002\042\002" +
    "\000\002\042\003\000\002\027\007\000\002\027\011\000" +
    "\002\027\011\000\002\027\007\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\004\000\002\026\003\000\002\026\004" +
    "\000\002\026\004\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\030\003\000\002\030\004\000\002" +
    "\031\002\000\002\031\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\005\000\002\044\005" +
    "\000\002\043\003\000\002\043\003\000\002\043\005\000" +
    "\002\045\003\000\002\045\005\000\002\046\002\000\002" +
    "\046\003\000\002\047\005\000\002\050\003\000\002\050" +
    "\005\000\002\051\002\000\002\051\003\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\006\000\002\023\004\000\002\024\003\000\002" +
    "\024\004\000\002\025\002\000\002\025\003\000\002\033" +
    "\003\000\002\033\005\000\002\035\003\000\002\035\005" +
    "\000\002\036\002\000\002\036\003\000\002\034\005\000" +
    "\002\052\010\000\002\052\006\000\002\053\003\000\002" +
    "\053\004\000\002\003\003\000\002\003\005\000\002\002" +
    "\005\000\002\004\004\000\002\004\004\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\054\003\000" +
    "\002\054\005\000\002\054\005\000\002\055\003\000\002" +
    "\055\006\000\002\055\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\004\004\001\002\000\004\051\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\002\000\005\000\006\000\014\000\020\000\001" +
    "\002\000\014\002\ufff8\005\020\006\022\014\017\020\015" +
    "\001\002\000\012\002\ufffb\005\ufffb\006\ufffb\014\ufffb\001" +
    "\002\000\004\002\ufff6\001\002\000\012\002\ufff7\005\020" +
    "\006\022\014\017\001\002\000\012\002\ufffc\005\ufffc\006" +
    "\ufffc\014\ufffc\001\002\000\004\051\276\001\002\000\012" +
    "\002\ufffd\005\ufffd\006\ufffd\014\ufffd\001\002\000\004\051" +
    "\126\001\002\000\004\051\007\001\002\000\012\002\ufffa" +
    "\005\ufffa\006\ufffa\014\ufffa\001\002\000\006\054\026\055" +
    "\023\001\002\000\004\010\uffea\001\002\000\006\013\uffed" +
    "\017\uffed\001\002\000\004\010\035\001\002\000\004\007" +
    "\033\001\002\000\006\013\031\017\030\001\002\000\006" +
    "\054\026\055\023\001\002\000\012\002\uffee\005\uffee\006" +
    "\uffee\014\uffee\001\002\000\006\013\uffec\017\uffec\001\002" +
    "\000\004\055\034\001\002\000\004\010\uffe9\001\002\000" +
    "\004\051\040\001\002\000\042\013\uffe5\015\uffe5\017\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\036\uffe5\041" +
    "\uffe5\043\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\062\uffe5" +
    "\001\002\000\044\011\063\013\uffe6\015\uffe6\017\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036\uffe6\041\uffe6" +
    "\043\uffe6\051\uffe6\052\uffe6\053\uffe6\056\uffe6\062\uffe6\001" +
    "\002\000\056\010\043\011\uffb3\013\uffb3\015\uffb3\017\uffb3" +
    "\020\051\022\045\023\047\024\046\027\uffb3\030\uffb3\031" +
    "\uffb3\033\uffb3\034\uffb3\036\uffb3\041\uffb3\043\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\056\uffb3\062\uffb3\001\002\000\006\013" +
    "\uffeb\017\uffeb\001\002\000\056\010\uffb5\011\uffb5\013\uffb5" +
    "\015\uffb5\017\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\036\uffb5\041\uffb5" +
    "\043\uffb5\051\uffb5\052\uffb5\053\uffb5\056\uffb5\062\uffb5\001" +
    "\002\000\004\051\061\001\002\000\044\011\uffe8\013\uffe8" +
    "\015\uffe8\017\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034" +
    "\uffe8\036\uffe8\041\uffe8\043\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\056\uffe8\062\uffe8\001\002\000\004\051\060\001\002\000" +
    "\004\062\055\001\002\000\004\051\054\001\002\000\056" +
    "\010\043\011\uffb2\013\uffb2\015\uffb2\017\uffb2\020\051\022" +
    "\045\023\047\024\046\027\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\036\uffb2\041\uffb2\043\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\056\uffb2\062\uffb2\001\002\000\004\051\052\001\002" +
    "\000\056\010\uffba\011\uffba\013\uffba\015\uffba\017\uffba\020" +
    "\uffba\022\uffba\023\uffba\024\uffba\027\uffba\030\uffba\031\uffba" +
    "\033\uffba\034\uffba\036\uffba\041\uffba\043\uffba\051\uffba\052" +
    "\uffba\053\uffba\056\uffba\062\uffba\001\002\000\056\010\uffb4" +
    "\011\uffb4\013\uffb4\015\uffb4\017\uffb4\020\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\041\uffb4\043\uffb4\051\uffb4\052\uffb4\053\uffb4\056" +
    "\uffb4\062\uffb4\001\002\000\056\010\uffb9\011\uffb9\013\uffb9" +
    "\015\uffb9\017\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9\041\uffb9" +
    "\043\uffb9\051\uffb9\052\uffb9\053\uffb9\056\uffb9\062\uffb9\001" +
    "\002\000\060\010\uffb6\011\uffb6\013\uffb6\015\uffb6\017\uffb6" +
    "\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\056\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\034\uffb6\036\uffb6\041\uffb6\043\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\056\uffb6\062\uffb6\001\002\000" +
    "\004\062\057\001\002\000\056\010\uffb7\011\uffb7\013\uffb7" +
    "\015\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\036\uffb7\041\uffb7" +
    "\043\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\062\uffb7\001" +
    "\002\000\056\010\uffbb\011\uffbb\013\uffbb\015\uffbb\017\uffbb" +
    "\020\uffbb\022\uffbb\023\uffbb\024\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\036\uffbb\041\uffbb\043\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\056\uffbb\062\uffbb\001\002\000\056\010" +
    "\uffb8\011\uffb8\013\uffb8\015\uffb8\017\uffb8\020\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\041\uffb8\043\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\056\uffb8\062\uffb8\001\002\000\046\013\uffe7\015\uffe7\017" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\041\uffe7\043\uffe7\051\uffe7\052\uffe7\053\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\062\uffe7\001\002\000\020\012\uffad\015\064" +
    "\043\075\051\072\052\076\053\074\062\066\001\002\000" +
    "\004\051\115\001\002\000\006\012\uffaf\021\uffaf\001\002" +
    "\000\026\012\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\044" +
    "\uffcb\047\uffcb\050\uffcb\057\uffcb\060\uffcb\001\002\000\026" +
    "\012\uffc7\016\uffc7\017\uffc7\020\113\021\uffc7\044\uffc7\047" +
    "\uffc7\050\uffc7\057\uffc7\060\uffc7\001\002\000\004\012\112" +
    "\001\002\000\006\012\uffac\021\110\001\002\000\010\012" +
    "\uffc6\021\uffc6\026\106\001\002\000\006\012\uffb1\021\uffb1" +
    "\001\002\000\026\012\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\044\uffcc\047\uffcc\050\uffcc\057\uffcc\060\uffcc\001\002" +
    "\000\020\015\064\043\075\044\uffc2\051\077\052\076\053" +
    "\074\062\066\001\002\000\026\012\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\044\uffca\047\uffca\050\uffca\057\uffca\060" +
    "\uffca\001\002\000\022\012\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\044\uffc6\047\uffc6\050\uffc6\001\002\000\006\021" +
    "\uffc4\044\uffc4\001\002\000\004\044\105\001\002\000\006" +
    "\021\103\044\uffc1\001\002\000\016\015\064\043\075\051" +
    "\077\052\076\053\074\062\066\001\002\000\006\021\uffc3" +
    "\044\uffc3\001\002\000\026\012\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\044\uffc9\047\uffc9\050\uffc9\057\uffc9\060\uffc9" +
    "\001\002\000\016\015\064\043\075\051\077\052\076\053" +
    "\074\062\066\001\002\000\006\012\uffb0\021\uffb0\001\002" +
    "\000\016\015\064\043\075\051\072\052\076\053\074\062" +
    "\066\001\002\000\006\012\uffae\021\uffae\001\002\000\046" +
    "\013\uffab\015\uffab\017\uffab\027\uffab\030\uffab\031\uffab\033" +
    "\uffab\034\uffab\036\uffab\041\uffab\043\uffab\051\uffab\052\uffab" +
    "\053\uffab\056\uffab\057\uffab\060\uffab\062\uffab\001\002\000" +
    "\004\051\114\001\002\000\026\012\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\044\uffc5\047\uffc5\050\uffc5\057\uffc5\060" +
    "\uffc5\001\002\000\004\010\123\001\002\000\006\016\uffbf" +
    "\021\uffbf\001\002\000\006\016\121\021\120\001\002\000" +
    "\004\051\115\001\002\000\026\012\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\044\uffc8\047\uffc8\050\uffc8\057\uffc8\060" +
    "\uffc8\001\002\000\006\016\uffbe\021\uffbe\001\002\000\016" +
    "\015\064\043\075\051\077\052\076\053\074\062\066\001" +
    "\002\000\006\016\uffc0\021\uffc0\001\002\000\014\002\ufffe" +
    "\005\ufffe\006\ufffe\014\ufffe\020\015\001\002\000\030\011" +
    "\130\013\ufff1\015\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\036\ufff1\041\ufff1\051\ufff1\001\002\000\026\013" +
    "\uffce\015\137\027\142\030\153\031\140\033\146\034\152" +
    "\036\151\041\144\051\040\001\002\000\006\012\ufff3\051" +
    "\132\001\002\000\004\012\136\001\002\000\006\012\ufff5" +
    "\021\ufff5\001\002\000\006\012\ufff2\021\134\001\002\000" +
    "\004\051\135\001\002\000\006\012\ufff4\021\ufff4\001\002" +
    "\000\026\013\ufff0\015\ufff0\027\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\036\ufff0\041\ufff0\051\ufff0\001\002\000\026" +
    "\015\137\016\uffce\027\142\030\153\031\140\033\146\034" +
    "\152\036\151\041\144\051\040\001\002\000\020\015\064" +
    "\043\075\051\077\052\076\053\074\056\240\062\066\001" +
    "\002\000\034\013\uffd6\015\uffd6\016\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\041" +
    "\uffd6\051\uffd6\001\002\000\016\015\064\043\075\051\077" +
    "\052\076\053\074\062\066\001\002\000\036\015\235\027" +
    "\142\030\153\031\140\033\146\034\152\036\151\041\144" +
    "\043\075\051\040\052\076\053\074\056\240\062\066\001" +
    "\002\000\004\011\210\001\002\000\030\013\uffd0\015\uffd0" +
    "\016\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\036" +
    "\uffd0\041\uffd0\051\uffd0\001\002\000\004\011\202\001\002" +
    "\000\004\013\201\001\002\000\030\013\uffcd\015\137\016" +
    "\uffcd\027\142\030\153\031\140\033\146\034\152\036\151" +
    "\041\144\051\040\001\002\000\004\017\177\001\002\000" +
    "\004\051\160\001\002\000\004\061\156\001\002\000\040" +
    "\015\uffe4\017\155\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\036\uffe4\041\uffe4\043\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\056\uffe4\062\uffe4\001\002\000\034\013\uffd4\015\uffd4\016" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\041\uffd4\051\uffd4\001\002\000\004\017" +
    "\157\001\002\000\034\013\uffdb\015\uffdb\016\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\041\uffdb\051\uffdb\001\002\000\006\011\167\026\170" +
    "\001\002\000\006\032\163\051\160\001\002\000\006\032" +
    "\uffa8\051\uffa8\001\002\000\026\013\uffce\015\137\027\142" +
    "\030\153\031\140\033\146\034\152\036\151\041\144\051" +
    "\040\001\002\000\006\032\uffa7\051\uffa7\001\002\000\004" +
    "\013\166\001\002\000\034\013\uffdd\015\uffdd\016\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\041\uffdd\051\uffdd\001\002\000\006\012\ufff3\051" +
    "\132\001\002\000\016\015\064\043\075\051\077\052\076" +
    "\053\074\062\066\001\002\000\004\017\172\001\002\000" +
    "\006\032\uffa9\051\uffa9\001\002\000\004\012\174\001\002" +
    "\000\004\026\175\001\002\000\024\015\137\027\142\030" +
    "\153\031\140\033\146\034\152\036\151\041\144\051\040" +
    "\001\002\000\006\032\uffaa\051\uffaa\001\002\000\034\013" +
    "\uffd7\015\uffd7\016\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\051\uffd7\001" +
    "\002\000\030\013\uffcf\015\uffcf\016\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\033\uffcf\034\uffcf\036\uffcf\041\uffcf\051\uffcf\001" +
    "\002\000\012\002\uffef\005\uffef\006\uffef\014\uffef\001\002" +
    "\000\004\051\203\001\002\000\004\010\204\001\002\000" +
    "\016\015\064\043\075\051\077\052\076\053\074\062\066" +
    "\001\002\000\004\012\206\001\002\000\024\015\137\027" +
    "\142\030\153\031\140\033\146\034\152\036\151\041\144" +
    "\051\040\001\002\000\034\013\uffde\015\uffde\016\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\041\uffde\051\uffde\001\002\000\020\015\064\043" +
    "\075\046\213\051\077\052\076\053\074\062\066\001\002" +
    "\000\010\012\uff9e\047\230\050\231\001\002\000\012\012" +
    "\uff9b\020\222\047\uff9b\050\uff9b\001\002\000\020\015\064" +
    "\043\075\046\213\051\077\052\076\053\074\062\066\001" +
    "\002\000\004\012\215\001\002\000\024\015\137\027\142" +
    "\030\153\031\140\033\146\034\152\036\151\041\144\051" +
    "\040\001\002\000\034\013\uffe0\015\uffe0\016\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\217\036" +
    "\uffe0\041\uffe0\051\uffe0\001\002\000\024\015\137\027\142" +
    "\030\153\031\140\033\146\034\152\036\151\041\144\051" +
    "\040\001\002\000\034\013\uffdf\015\uffdf\016\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\041\uffdf\051\uffdf\001\002\000\010\012\uff99\047\uff99" +
    "\050\uff99\001\002\000\010\037\223\040\224\042\225\001" +
    "\002\000\004\045\uffa0\001\002\000\004\045\uffa1\001\002" +
    "\000\004\045\uff9f\001\002\000\004\045\227\001\002\000" +
    "\010\012\uff9a\047\uff9a\050\uff9a\001\002\000\020\015\064" +
    "\043\075\046\213\051\077\052\076\053\074\062\066\001" +
    "\002\000\020\015\064\043\075\046\213\051\077\052\076" +
    "\053\074\062\066\001\002\000\004\012\uff9c\001\002\000" +
    "\004\012\uff9d\001\002\000\034\013\uffd5\015\uffd5\016\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\041\uffd5\051\uffd5\001\002\000\026\015\137" +
    "\016\uffce\027\142\030\153\031\140\033\146\034\152\036" +
    "\151\041\144\051\263\001\002\000\040\015\uffe5\017\262" +
    "\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\036\uffe5\041" +
    "\uffe5\043\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\062\uffe5" +
    "\001\002\000\004\017\261\001\002\000\016\015\uffe2\043" +
    "\uffe2\051\040\052\uffe2\053\uffe2\062\uffe2\001\002\000\036" +
    "\015\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\036" +
    "\uffe3\041\uffe3\043\uffe3\051\uffe3\052\uffe3\053\uffe3\056\uffe3" +
    "\062\uffe3\001\002\000\004\017\243\001\002\000\034\013" +
    "\uffd1\015\uffd1\016\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\051\uffd1\001" +
    "\002\000\016\015\uffe4\043\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\062\uffe4\001\002\000\016\015\uffe1\043\uffe1\051\040\052" +
    "\uffe1\053\uffe1\062\uffe1\001\002\000\006\057\254\060\255" +
    "\001\002\000\016\015\064\043\075\051\251\052\076\053" +
    "\074\062\066\001\002\000\004\011\063\001\002\000\022" +
    "\010\043\011\uffb3\020\051\022\045\023\047\024\046\057" +
    "\uffc6\060\uffc6\001\002\000\006\057\uffa3\060\uffa3\001\002" +
    "\000\006\057\uffa2\060\uffa2\001\002\000\004\017\uffa6\001" +
    "\002\000\016\015\uffe2\043\uffe2\051\040\052\uffe2\053\uffe2" +
    "\062\uffe2\001\002\000\004\017\uffa4\001\002\000\006\057" +
    "\254\060\255\001\002\000\004\017\uffa5\001\002\000\034" +
    "\013\uffd2\015\uffd2\016\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\051\uffd2" +
    "\001\002\000\034\013\uffd3\015\uffd3\016\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\041\uffd3\051\uffd3\001\002\000\054\010\266\011\uffb3\015" +
    "\uffb3\017\uffb3\020\051\022\045\023\047\024\046\027\uffb3" +
    "\030\uffb3\031\uffb3\033\uffb3\034\uffb3\036\uffb3\041\uffb3\043" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\056\uffb3\062\uffb3\001\002" +
    "\000\004\016\265\001\002\000\034\013\uffdc\015\uffdc\016" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\041\uffdc\051\uffdc\001\002\000\016\015" +
    "\064\043\075\051\267\052\076\053\074\062\066\001\002" +
    "\000\060\010\uffb8\011\uffb8\015\uffb8\016\uffc6\017\uffb8\020" +
    "\uffb8\021\uffc6\022\uffb8\023\uffb8\024\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\036\uffb8\041\uffb8\043\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\056\uffb8\062\uffb8\001\002\000\004" +
    "\017\271\001\002\000\034\013\uffd8\015\uffd8\016\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\041\uffd8\051\uffd8\001\002\000\004\017\275\001" +
    "\002\000\004\017\274\001\002\000\034\013\uffda\015\uffda" +
    "\016\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\041\uffda\051\uffda\001\002\000\034" +
    "\013\uffd9\015\uffd9\016\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9\051\uffd9" +
    "\001\002\000\014\002\uffff\005\uffff\006\uffff\014\uffff\020" +
    "\uffff\001\002\000\012\002\ufff9\005\ufff9\006\ufff9\014\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\005\004\001\001\000\004\006\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\015\010\010\014\012\015\011\016\020\017" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\015\010\010\016\276\017\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\124\001\001\000\002\001\001\000\010\011" +
    "\023\012\026\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\031\013\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\036\037\040\040\035\001\001\000\002\001\001" +
    "\000\004\034\061\001\001\000\010\023\041\024\047\025" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\033\064\035\070\036\067\043\072\044\066\001\001" +
    "\000\006\047\115\050\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\043\077\044\066\045\101\046\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\103\044\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\106\044\066\001\001\000\002\001\001\000\010\033\110" +
    "\043\072\044\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\123" +
    "\044\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\126\001\001\000\022\026\144\027\140\030\147" +
    "\031\146\032\036\037\153\040\035\041\142\001\001\000" +
    "\006\021\130\022\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\026\144\027\140\030\147" +
    "\031\263\032\036\037\153\040\035\041\142\001\001\000" +
    "\010\002\271\043\272\044\066\001\001\000\002\001\001" +
    "\000\006\043\267\044\066\001\001\000\016\002\241\027" +
    "\233\032\036\037\240\040\235\044\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\177\027\140\032\036\037\153\040\035" +
    "\041\142\001\001\000\002\001\001\000\006\052\161\053" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\163\001\001\000\002\001\001\000\022" +
    "\026\144\027\140\030\147\031\164\032\036\037\153\040" +
    "\035\041\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\172\022\132\001\001\000" +
    "\006\043\170\044\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\026" +
    "\175\027\140\032\036\037\153\040\035\041\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\204\044\066\001\001\000\002\001\001\000\016\026" +
    "\206\027\140\032\036\037\153\040\035\041\142\001\001" +
    "\000\002\001\001\000\012\043\211\044\066\054\213\055" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\211\044\066\055\220\001\001\000\002\001\001\000" +
    "\016\026\215\027\140\032\036\037\153\040\035\041\142" +
    "\001\001\000\002\001\001\000\016\026\217\027\140\032" +
    "\036\037\153\040\035\041\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\043\211\044\066\054\232\055" +
    "\210\001\001\000\012\043\211\044\066\054\231\055\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\026\144\027\140\030\147\031\263\032\036" +
    "\037\153\040\035\041\142\047\115\050\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\245\032\036" +
    "\037\243\040\035\041\244\042\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\036\037\240\040\035\001\001\000\004\003" +
    "\255\001\001\000\012\032\247\040\252\043\251\044\066" +
    "\001\001\000\004\034\061\001\001\000\010\023\041\024" +
    "\047\025\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\256\032\036\037\243\040" +
    "\035\041\244\042\246\001\001\000\002\001\001\000\004" +
    "\003\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\041\024\047\025\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\123\044" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	/* override error routines */
  
  	public void report_fatal_error(String message, Object info)
    {
    	done_parsing();
      	if (info instanceof Symbol) 
      		System.err.println("Fatal: " + message + " \nCan't recover from previous error(s), giving up. @ " + (Symbol)info);     		
      	else 
      		System.err.println("Fatal: " + message + " \nCan't recover from previous error(s), giving up. @ " + cur_token);
      	System.exit(1);
    }

    public void report_error(String message, Object info)
    {
    	if (info instanceof Symbol)
    		System.err.println("Error: " + message + " @ " + (Symbol)info);        	
      	else
        	System.err.println("Error: " + message + " @ " + cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // predicate_no_and_or ::= EXCLAMATION predicate_no_and_or 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate_no_and_or",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // predicate_no_and_or ::= expression DOT type QUESTIONMARK 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tiepe t = (Tiepe)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IsA(e,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate_no_and_or",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // predicate_no_and_or ::= expression 
            {
              Predicate RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Predicate0(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate_no_and_or",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // predicate ::= predicate_no_and_or OR predicate 
            {
              Predicate RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Predicate p1 = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Predicate p2 = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(p1,p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // predicate ::= predicate_no_and_or AND predicate 
            {
              Predicate RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Predicate p1 = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Predicate p2 = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(p1,p2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // predicate ::= predicate_no_and_or 
            {
              Predicate RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type ::= STRING 
            {
              Tiepe RESULT =null;
		 RESULT = new StringType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type ::= RECORD 
            {
              Tiepe RESULT =null;
		 RESULT = new RecordType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type ::= LIST 
            {
              Tiepe RESULT =null;
		 RESULT = new ListType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // embed ::= markup_star markup_no_designator 
            {
              Embed RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MarkupList ms = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Markup m = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MarkupEmbedding(ms,m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("embed",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // embed ::= markup_star expression 
            {
              Embed RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MarkupList ms = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpEmbedding(ms,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("embed",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // embedding ::= PRETEXT embed texttail 
            {
              Embedding RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Embed e = (Embed)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Texttail t = (Texttail)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Pre(text, e,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("embedding",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // texttail ::= MIDTEXT embed texttail 
            {
              Texttail RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Embed e = (Embed)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Texttail t = (Texttail)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mid(text, e,t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texttail",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // texttail ::= POSTTEXT 
            {
              Texttail RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Post(text); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("texttail",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment_plus ::= assignment_plus assignment 
            {
              AssignmentList RESULT =null;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignmentList alist = (AssignmentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int assignmentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignmentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment assignment = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			alist.append(assignment);
			RESULT = alist;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_plus",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment_plus ::= assignment 
            {
              AssignmentList RESULT =null;
		int assignmentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignmentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment assignment = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignmentList(assignment); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_plus",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignment ::= IDCON ASSIGN expression SEMI 
            {
              Assignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarBind(id,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignment ::= IDCON LPAREN formal_star RPAREN ASSIGN statement 
            {
              Assignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncBind(id, fl, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arguments ::= LPAREN argument_star RPAREN 
            {
              Args RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // argument_star ::= argument_plus 
            {
              Args RESULT =null;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args alist = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = alist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_star",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // argument_star ::= 
            {
              Args RESULT =null;
		 RESULT = new Args(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_star",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // argument_plus ::= argument_plus COMMA argument 
            {
              Args RESULT =null;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Args alist = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			alist.append(arg);
			RESULT = alist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_plus",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // argument_plus ::= argument 
            {
              Args RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Args(arg); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_plus",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // argument ::= IDCON ASSIGN expression 
            {
              Argument RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Attri(id, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // argument ::= expression 
            {
              Argument RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Argument0(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // attribuut_star ::= attribuut_plus 
            {
              AttribuutList RESULT =null;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AttribuutList alist = (AttribuutList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = alist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // attribuut_star ::= 
            {
              AttribuutList RESULT =null;
		 RESULT = new AttribuutList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // attribuut_plus ::= attribuut_plus attribuut 
            {
              AttribuutList RESULT =null;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttribuutList alist = (AttribuutList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int attribuutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribuutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attribuut attribuut = (Attribuut)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			alist.append(attribuut);
			RESULT = alist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut_plus",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // attribuut_plus ::= attribuut 
            {
              AttribuutList RESULT =null;
		int attribuutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribuutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attribuut attribuut = (Attribuut)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttribuutList(attribuut); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut_plus",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // attribuut ::= AT_SIGN NATCON 
            {
              Attribuut RESULT =null;
		int ncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer nc = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Height(nc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // attribuut ::= AT_SIGN NATCON PERCENT_SIGN NATCON 
            {
              Attribuut RESULT =null;
		int nc1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nc1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer nc1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nc2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nc2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer nc2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WidthHeight(nc1, nc2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // attribuut ::= COLON IDCON 
            {
              Attribuut RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Type(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // attribuut ::= DOLLAR_SIGN IDCON 
            {
              Attribuut RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Name(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // attribuut ::= DOT IDCON 
            {
              Attribuut RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Classs(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // attribuut ::= NUMBER_SIGN IDCON 
            {
              Attribuut RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribuut",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // keyvaluepair_star ::= keyvaluepair_plus 
            {
              KeyvaluepairList RESULT =null;
		int klistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int klistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		KeyvaluepairList klist = (KeyvaluepairList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = klist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyvaluepair_star",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // keyvaluepair_star ::= 
            {
              KeyvaluepairList RESULT =null;
		 RESULT = new KeyvaluepairList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyvaluepair_star",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // keyvaluepair_plus ::= keyvaluepair_plus COMMA keyvaluepair 
            {
              KeyvaluepairList RESULT =null;
		int klistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int klistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		KeyvaluepairList klist = (KeyvaluepairList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int keyvaluepairleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int keyvaluepairright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Keyvaluepair keyvaluepair = (Keyvaluepair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			klist.append(keyvaluepair);
			RESULT = klist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyvaluepair_plus",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // keyvaluepair_plus ::= keyvaluepair 
            {
              KeyvaluepairList RESULT =null;
		int keyvaluepairleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int keyvaluepairright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Keyvaluepair keyvaluepair = (Keyvaluepair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new KeyvaluepairList(keyvaluepair); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyvaluepair_plus",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // keyvaluepair ::= IDCON COLON expression 
            {
              Keyvaluepair RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Keyvaluepair(id,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keyvaluepair",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_star ::= expression_plus 
            {
              ExpressionList RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionList elist = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = elist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_star",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_star ::= 
            {
              ExpressionList RESULT =null;
		 RESULT = new ExpressionList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_star",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_plus ::= expression_plus COMMA expression 
            {
              ExpressionList RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionList elist = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			elist.append(expression);
			RESULT = elist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_plus",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_plus ::= expression 
            {
              ExpressionList RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionList(expression); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_plus",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression_no_idcon DOT IDCON 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Field(e, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= IDCON 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression_no_idcon 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_no_idcon ::= LBRACE keyvaluepair_plus RBRACE 
            {
              Expression RESULT =null;
		int klistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int klistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		KeyvaluepairList klist = (KeyvaluepairList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Record(klist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_no_idcon",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_no_idcon ::= LBRACKET expression_star RBRACKET 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new List(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_no_idcon",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_no_idcon ::= SYMBOLCON 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Symb(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_no_idcon",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_no_idcon ::= NATCON 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Num(n.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_no_idcon",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_no_idcon ::= TEXT 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Text(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_no_idcon",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement_star ::= statement_plus 
            {
              StatementList RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList slist = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = slist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_star",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_star ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_star",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_plus ::= statement_plus statement 
            {
              StatementList RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList slist = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			slist.append(statement);
			RESULT = slist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_plus",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_plus ::= statement 
            {
              StatementList RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementList(statement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_plus",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= markup_plus embedding SEMI 
            {
              Statement RESULT =null;
		int mpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MarkupList mp = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Embedding e = (Embedding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MarkupEmbeddingg(mp,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= markup_plus expression_no_idcon SEMI 
            {
              Statement RESULT =null;
		int mpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MarkupList mp = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MarkupExp(mp,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= markup_plus markup_no_designator SEMI 
            {
              Statement RESULT =null;
		int mpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MarkupList mp = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Markup m = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MarkupMarkup(mp,m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= markup SEMI 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Markup m = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Opmaak(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= markup_plus statement_no_markup 
            {
              Statement RESULT =null;
		int mpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MarkupList mp = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MarkupStat(mp,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= statement_no_markup 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_no_markup ::= YIELD SEMI 
            {
              Statement RESULT =null;
		 RESULT = new Yield(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_no_markup ::= CDATA expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CData(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_no_markup ::= ECHO embedding SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Embedding e = (Embedding)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new EchoEmbedding(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_no_markup ::= ECHO expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Echo(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_no_markup ::= COMMENT STRCON SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Comment(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_no_markup ::= LBRACE statement_star RBRACE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement_no_markup ::= LET assignment_plus IN statement_star END 
            {
              Statement RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AssignmentList ap = (AssignmentList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList as = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Let(ap,as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_no_markup ::= EACH LPAREN IDCON COLON expression RPAREN statement 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Each(id,e,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_no_markup ::= IF LPAREN predicate RPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElse(p,s1,s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_no_markup ::= IF LPAREN predicate RPAREN statement 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iff(p,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_no_markup",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // markup_star ::= markup_plus 
            {
              MarkupList RESULT =null;
		int mlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MarkupList mlist = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mlist; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup_star",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // markup_star ::= 
            {
              MarkupList RESULT =null;
		 RESULT = new MarkupList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup_star",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // markup_plus ::= markup_plus markup 
            {
              MarkupList RESULT =null;
		int mlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MarkupList mlist = (MarkupList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int markupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int markupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Markup markup = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			mlist.append((Markup)markup);
			RESULT = mlist; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup_plus",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // markup_plus ::= markup 
            {
              MarkupList RESULT =null;
		int markupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int markupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Markup markup = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MarkupList((Markup)markup); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup_plus",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // markup ::= markup_no_designator 
            {
              Markup RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Markup m = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // markup ::= designator 
            {
              Markup RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Markup0(d) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // markup_no_designator ::= designator arguments 
            {
              Markup RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Call(d,args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("markup_no_designator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // designator ::= IDCON attribuut_star 
            {
              Designator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AttribuutList as = (AttribuutList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Tag(id,as); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // path ::= DIRECTORY SLASH FILENAME 
            {
              Path RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String dir = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Path(dir, file); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // path ::= FILENAME 
            {
              Path RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Path("",filename); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mapping ::= path COLON markup 
            {
              Mapping RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Path p = (Path)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Markup m = (Markup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Mapping(p,(Markup) m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mapping",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mappings ::= mappings SEMI mapping 
            {
              MappingList RESULT =null;
		int mlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MappingList mlist = (MappingList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Mapping m = (Mapping)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			mlist.append(m);
			RESULT = mlist;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mappings",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mappings ::= mapping 
            {
              MappingList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Mapping m = (Mapping)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MappingList(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mappings",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // site ::= SITE mappings END 
            {
              Site RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MappingList m = (MappingList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Site(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("site",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= DEF IDCON formals statement_star END 
            {
              Def RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalList f = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Def(i,f,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formals ::= LPAREN formal_star RPAREN 
            {
              FormalList RESULT =null;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalList formals = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = formals; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formals",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formals ::= 
            {
              FormalList RESULT =null;
		
			Empty empty = new Empty(); 
			RESULT = new FormalList(empty); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formals",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal_star ::= formal_plus 
            {
              FormalList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalList list = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_star",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal_star ::= 
            {
              FormalList RESULT =null;
		 
			Empty empty = new Empty();			
			RESULT = new FormalList(empty);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_star",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_plus ::= formal_plus COMMA IDCON 
            {
              FormalList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalList list = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Formal0 formal = new Formal0(id);
			list.append(formal);
			RESULT = list; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_plus",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_plus ::= IDCON 
            {
              FormalList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			Formal0 idcon = new Formal0(id);
			RESULT = new FormalList(idcon); 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_plus",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // module ::= MODULE module_id module_elements_star 
            {
              Module RESULT =null;
		int moduleIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int moduleIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ModuleId moduleId = (ModuleId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModuleElementList mes = (ModuleElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Module(moduleId, mes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // module_elements_star ::= module_elements 
            {
              ModuleElementList RESULT =null;
		int mesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModuleElementList mes = (ModuleElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mes; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_elements_star",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // module_elements_star ::= 
            {
              ModuleElementList RESULT =null;
		 RESULT = new ModuleElementList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_elements_star",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // module_elements ::= module_elements module_element 
            {
              ModuleElementList RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ModuleElementList elements = (ModuleElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModuleElement element = (ModuleElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			elements.append(element);
			RESULT = elements; 
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_elements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // module_elements ::= module_element 
            {
              ModuleElementList RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModuleElement element = (ModuleElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModuleElementList(element); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_elements",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // module_element ::= site 
            {
              ModuleElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Site s = (Site)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_element",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // module_element ::= function 
            {
              ModuleElement RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def fun = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fun; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_element",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_element ::= import_decl 
            {
              ModuleElement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImportDeclaration id = (ImportDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_element",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // import_decl ::= IMPORT module_id 
            {
              ImportDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModuleId id = (ModuleId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ImportDeclaration(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("import_decl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module_id ::= module_id DOT IDCON 
            {
              ModuleId RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ModuleId m = (ModuleId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			m.append(id);
			RESULT = m;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // module_id ::= IDCON 
            {
              ModuleId RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModuleId(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Module start_val = (Module)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

