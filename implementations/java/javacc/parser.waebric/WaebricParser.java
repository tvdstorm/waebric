/* Generated By:JJTree&JavaCC: Do not edit this line. WaebricParser.java */
@SuppressWarnings("all")
public class WaebricParser/*@bgen(jjtree)*/implements WaebricParserTreeConstants, WaebricParserConstants {/*@bgen(jjtree)*/
  protected static JJTWaebricParserState jjtree = new JJTWaebricParserState();public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter a Waebric FunctionDef :");
    new WaebricParser(System.in);
    try {
      SimpleNode n = WaebricParser.Modules();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

/* GENERIC */
  static final public SimpleNode Modules() throws ParseException {
                      /*@bgen(jjtree) Modules */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODULE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Module();
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Module() throws ParseException {
                 /*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      jj_consume_token(ModuleId);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
        case SITE:
        case DEF:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        ModuleElement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ModuleElement() throws ParseException {
                        /*@bgen(jjtree) ModuleElement */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        Import();
        break;
      case SITE:
        Site();
        break;
      case DEF:
        FunctionDef();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement Import 
// *********************************************
  static final public void Import() throws ParseException {
                 /*@bgen(jjtree) Import */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      jj_consume_token(ModuleId);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement Site
// *********************************************
  static final public void Site() throws ParseException {
               /*@bgen(jjtree) Site */
  SimpleNode jjtn000 = new SimpleNode(JJTSITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SITE);
      Mappings();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Mappings() throws ParseException {
                   /*@bgen(jjtree) Mappings */
  SimpleNode jjtn000 = new SimpleNode(JJTMAPPINGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FileName:
        case DirName:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        Mapping();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Mapping() throws ParseException {
                  /*@bgen(jjtree) Mapping */
  SimpleNode jjtn000 = new SimpleNode(JJTMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Path();
      jj_consume_token(COLON);
      Markup();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Path() throws ParseException {
               /*@bgen(jjtree) Path */
  SimpleNode jjtn000 = new SimpleNode(JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FileName:
        jj_consume_token(FileName);
        break;
      case DirName:
        jj_consume_token(DirName);
        jj_consume_token(FileName);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// ModuleElement FunctionDef
// *********************************************
  static final public void FunctionDef() throws ParseException {
                     /*@bgen(jjtree) FunctionDef */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEF);
      jj_consume_token(IdCon);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Formals();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case EACH:
        case LET:
        case YIELD:
        case COMMENT:
        case ECHO:
        case CDATA:
        case LBRACE:
        case IdCon:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Formals() throws ParseException {
                  /*@bgen(jjtree) Formals */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IdCon:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(IdCon);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      }
      jj_consume_token(RPAREN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(8)) {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Predicate();
        jj_consume_token(RPAREN);
        Statement();
        jj_consume_token(ELSE);
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
          Predicate();
          jj_consume_token(RPAREN);
          Statement();
          break;
        case EACH:
          jj_consume_token(EACH);
          jj_consume_token(LPAREN);
          Var();
          jj_consume_token(COLON);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          Statement();
          break;
        case LET:
          jj_consume_token(LET);
          label_6:
          while (true) {
            Assignment();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IdCon:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_6;
            }
          }
          jj_consume_token(IN);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case EACH:
            case LET:
            case YIELD:
            case COMMENT:
            case ECHO:
            case CDATA:
            case LBRACE:
            case IdCon:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_7;
            }
            Statement();
          }
          jj_consume_token(END);
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IF:
            case EACH:
            case LET:
            case YIELD:
            case COMMENT:
            case ECHO:
            case CDATA:
            case LBRACE:
            case IdCon:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_8;
            }
            Statement();
          }
          jj_consume_token(RBRACE);
          break;
        case YIELD:
          jj_consume_token(YIELD);
          jj_consume_token(SEMICOLON);
          break;
        case COMMENT:
          jj_consume_token(COMMENT);
          jj_consume_token(StrCon);
          jj_consume_token(SEMICOLON);
          break;
        case ECHO:
          jj_consume_token(ECHO);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        case CDATA:
          jj_consume_token(CDATA);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[15] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
        case IdCon:
          label_9:
          while (true) {
            Markup();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IdCon:
              ;
              break;
            default:
              jj_la1[16] = jj_gen;
              break label_9;
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          case IF:
          case EACH:
          case LET:
          case YIELD:
          case COMMENT:
          case ECHO:
          case CDATA:
          case LBRACE:
          case IdCon:
            Statement();
            break;
          case LBRACKET:
          case NatCon:
          case SymbolCon:
          case Text:
            Expression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              DotIdCon();
              break;
            default:
              jj_la1[17] = jj_gen;
              ;
            }
            jj_consume_token(SEMICOLON);
            break;
          case PreText:
            Embedding();
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Predicate() throws ParseException {
                    /*@bgen(jjtree) Predicate */
  SimpleNode jjtn000 = new SimpleNode(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          DotIdCon();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
      } else if (jj_2_3(2147483647)) {
        jj_consume_token(DOT);
        jj_consume_token(Type);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
      Formals();
      jj_consume_token(ASSIGN);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Embedding() throws ParseException {
                    /*@bgen(jjtree) Embedding */
  SimpleNode jjtn000 = new SimpleNode(JJTEMBEDDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PreText);
      Embed();
      TextTail();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Embed() throws ParseException {
                /*@bgen(jjtree) Embed */
  SimpleNode jjtn000 = new SimpleNode(JJTEMBED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IdCon:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        Markup();
      }
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DotIdCon();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TextTail() throws ParseException {
                   /*@bgen(jjtree) TextTail */
  SimpleNode jjtn000 = new SimpleNode(JJTTEXTTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PostText:
        jj_consume_token(PostText);
        break;
      case MidText:
        jj_consume_token(MidText);
        Embed();
        TextTail();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

// Used by both the Site and FunctionDef ModuleElements
// *********************************************
  static final public void Markup() throws ParseException {
                 /*@bgen(jjtree) Markup */
  SimpleNode jjtn000 = new SimpleNode(JJTMARKUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Designator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Designator() throws ParseException {
                     /*@bgen(jjtree) Designator */
  SimpleNode jjtn000 = new SimpleNode(JJTDESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case DOT:
        case DOLLAR_SIGN:
        case NUMBER_SIGN:
        case AT:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_11;
        }
        Attribute();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Attribute() throws ParseException {
                    /*@bgen(jjtree) Attribute */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER_SIGN:
        jj_consume_token(NUMBER_SIGN);
        jj_consume_token(IdCon);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IdCon);
        break;
      case DOLLAR_SIGN:
        jj_consume_token(DOLLAR_SIGN);
        jj_consume_token(IdCon);
        break;
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(IdCon);
        break;
      default:
        jj_la1[26] = jj_gen;
        if (jj_2_4(2)) {
          jj_consume_token(AT);
          jj_consume_token(NatCon);
          jj_consume_token(PERCENT);
          jj_consume_token(NatCon);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AT:
            jj_consume_token(AT);
            jj_consume_token(NatCon);
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Arguments() throws ParseException {
                    /*@bgen(jjtree) Arguments */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case LBRACE:
        case IdCon:
        case NatCon:
        case SymbolCon:
        case Text:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        Argument();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Argument() throws ParseException {
                   /*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        Var();
        jj_consume_token(ASSIGN);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          DotIdCon();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case LBRACE:
        case IdCon:
        case NatCon:
        case SymbolCon:
        case Text:
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Var() throws ParseException {
              /*@bgen(jjtree) Var */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SymbolCon:
        jj_consume_token(SymbolCon);
        break;
      case Text:
        jj_consume_token(Text);
        break;
      case NatCon:
        jj_consume_token(NatCon);
        break;
      case IdCon:
        Var();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case LBRACE:
          case IdCon:
          case NatCon:
          case SymbolCon:
          case Text:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_13;
          }
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            DotIdCon();
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[35] = jj_gen;
            ;
          }
        }
        jj_consume_token(RBRACKET);
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IdCon:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_14;
          }
          KeyValuePair();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            jj_la1[37] = jj_gen;
            ;
          }
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DotIdCon() throws ParseException {
                   /*@bgen(jjtree) DotIdCon */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTIDCON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      jj_consume_token(IdCon);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void KeyValuePair() throws ParseException {
                       /*@bgen(jjtree) KeyValuePair */
  SimpleNode jjtn000 = new SimpleNode(JJTKEYVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IdCon);
      jj_consume_token(COLON);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        DotIdCon();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_64() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(NatCon)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(NatCon)) return true;
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(DOLLAR_SIGN)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(NUMBER_SIGN)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(IdCon)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(MidText)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_17()) return true;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(PreText)) return true;
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(Type)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(IdCon)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(CDATA)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(ECHO)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(StrCon)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(YIELD)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    if (jj_3R_39()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LET)) return true;
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(EACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(IdCon)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IdCon)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public WaebricParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0xb00,0xb00,0x0,0x40000000,0x0,0x1000000,0x101ed000,0x0,0x0,0x0,0x0,0x101ed000,0x101ed000,0x0,0x0,0x0,0x0,0x541ed000,0x101ed000,0x0,0x0,0x0,0x0,0x1000000,0x80000000,0x80000000,0x0,0x14000000,0x0,0x0,0x0,0x14000000,0x14000000,0x0,0x0,0x0,0x0,0x14000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x2800,0x0,0x2800,0x0,0x8000,0x8000,0x1,0x2,0x8000,0x8000,0x8000,0x2,0x2,0x8000,0x2,0x100b8000,0x8000,0x2,0x8000,0x2,0x60000000,0x0,0x2e,0xe,0x20,0xb8000,0x1,0x2,0x2,0xb8000,0xb8000,0x2,0x1,0x8000,0x1,0xb8000,0x2,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public WaebricParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WaebricParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WaebricParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public WaebricParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WaebricParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public WaebricParser(WaebricParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(WaebricParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
