// Todo: Lay down restrictions for grammer e.g. make sure keywords are not used for id_con

Package waebric;

Helpers
	input_character = [0x32..0x126];
	not_star = [input_character - '*'];
	not_star_not_slash = [not_star - '/'];
	letter = ['a'..'z'] | ['A'..'Z'];
	digit = ['0'..'9'];
	minus = '-';

Tokens
	// Keywords
	module = 'module';
	if = 'if';
	else = 'else';
	each = 'each';
	let = 'let';
	def = 'def';
	in = 'in';
	end = 'end';
	comment = 'comment';
	echo = 'echo';
	cdata = 'cdata';
	yield = 'yield';
	import = 'import'; 
	site = 'site';
	
	// Separators
	l_paren = '(';
	r_paren = ')';
	l_brace = '{';
	r_brace = '}';
	semi_colon = ';';
	comma = ',';
	dot = '.';
	number_sign = '#';
	dollar_sign = '$';
	at_sign = '@';
	percent_sign = '%';
	
	// Operators
	colon = ':';
	assign = '=';
	slash = '/';

	// Comments	
	comments = 
		'/*' (not_star_not_slash not_star* '*'+)* '/' |
		'//' input_character* '\n';
		
	whitespace = (' ' | 13 | 10 | 9)*;
	
	// Identifier
	id_con = letter (letter | digit | minus)*;
	nat_con = digit+;
	
	// Miscellaneous
	path_element = ([input_character - [' ' + [9 + [13 + [10 + ['.' + ['/' + '\']]]]]]])*;
	file_ext = (letter | digit)+;
				
Ignored Tokens
	comment,
	whitespace;
	
Productions
	// Module definition
	modules = module_declaration*;
	module_declaration = module module_id_declaration module_element_declaration*;
	module_id_declaration = id_con;
	module_element_declaration = 
		{function}	function_declaration | 
		{import}	import_declaration | 
		{site}		site_declaration;
	
	// Imports
	import_declaration = import module_id_declaration;

	// Site
	site_declaration = site mappings_declaration end;
	
	// Mappings
	mappings_declaration = 
		{single}									mapping_declaration |
		{multiple}	mappings_declaration semi_colon mapping_declaration;
	mapping_declaration = path_declaration colon markup_declaration;
	
	// Path & filenames
	path_declaration = 
		{dirname_filename}	dir_name slash file_name |
		{filename}			file_name;
	dir_name = directory;
	directory =
		{single_depth}					path_element |
		{multi_depth}	directory slash path_element;
	file_name = path_element dot file_ext; 

	// Markup	
	markup_declaration = 
		{designator_with_arguments}	designator_declaration arguments_declaration |
		{designator}				designator_declaration;
	
	// Designator
	designator_declaration = id_con attribute_declaration*;
	
	// Attributes
	attribute_declaration =
		{number_sign}		number_sign id_con |
		{dot}				dot id_con |
		{dollar_sign}		dollar_sign id_con |
		{colon}				colon id_con |
		{at_width_height}	at_sign [w]:nat_con percent_sign [h]:nat_con |
		{at_width}			at_sign [w]:nat_con;
	
	// Arguments
	arguments_declaration = l_paren arguments r_paren;
	arguments =
		{single}					argument |
		{multiple}	arguments comma argument;
		
	argument = 
		{argument}						   expression |
		{argument_with_var}		var assign expression;
		  
	// Variable
	var = id_con;

// TODO: Grammer from this point on incomplete...

	// Expressions
	expression = if;

	// Function declaration
	function_declaration = if; 