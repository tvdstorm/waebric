/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AWidthHeightAttribute extends PAttribute
{
    private TNatCon _width_;
    private TNatCon _height_;

    public AWidthHeightAttribute()
    {
        // Constructor
    }

    public AWidthHeightAttribute(
        @SuppressWarnings("hiding") TNatCon _width_,
        @SuppressWarnings("hiding") TNatCon _height_)
    {
        // Constructor
        setWidth(_width_);

        setHeight(_height_);

    }

    @Override
    public Object clone()
    {
        return new AWidthHeightAttribute(
            cloneNode(this._width_),
            cloneNode(this._height_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWidthHeightAttribute(this);
    }

    public TNatCon getWidth()
    {
        return this._width_;
    }

    public void setWidth(TNatCon node)
    {
        if(this._width_ != null)
        {
            this._width_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._width_ = node;
    }

    public TNatCon getHeight()
    {
        return this._height_;
    }

    public void setHeight(TNatCon node)
    {
        if(this._height_ != null)
        {
            this._height_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._height_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._width_)
            + toString(this._height_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._width_ == child)
        {
            this._width_ = null;
            return;
        }

        if(this._height_ == child)
        {
            this._height_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._width_ == oldChild)
        {
            setWidth((TNatCon) newChild);
            return;
        }

        if(this._height_ == oldChild)
        {
            setHeight((TNatCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
