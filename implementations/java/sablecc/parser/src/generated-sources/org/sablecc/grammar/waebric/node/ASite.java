/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class ASite extends PSite
{
    private TSite _site_;
    private PMappings _mappings_;
    private TEnd _end_;

    public ASite()
    {
        // Constructor
    }

    public ASite(
        @SuppressWarnings("hiding") TSite _site_,
        @SuppressWarnings("hiding") PMappings _mappings_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setSite(_site_);

        setMappings(_mappings_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new ASite(
            cloneNode(this._site_),
            cloneNode(this._mappings_),
            cloneNode(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASite(this);
    }

    public TSite getSite()
    {
        return this._site_;
    }

    public void setSite(TSite node)
    {
        if(this._site_ != null)
        {
            this._site_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._site_ = node;
    }

    public PMappings getMappings()
    {
        return this._mappings_;
    }

    public void setMappings(PMappings node)
    {
        if(this._mappings_ != null)
        {
            this._mappings_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mappings_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._site_)
            + toString(this._mappings_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._site_ == child)
        {
            this._site_ = null;
            return;
        }

        if(this._mappings_ == child)
        {
            this._mappings_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._site_ == oldChild)
        {
            setSite((TSite) newChild);
            return;
        }

        if(this._mappings_ == oldChild)
        {
            setMappings((PMappings) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
