/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AIfThenElseStatementNoShortIf extends PStatementNoShortIf
{
    private TIf _if_;
    private TLParen _lParen_;
    private PPredicate _predicate_;
    private TRParen _rParen_;
    private PStatementNoShortIf _thenbranch_;
    private TElse _else_;
    private PStatementNoShortIf _elsebranch_;

    public AIfThenElseStatementNoShortIf()
    {
        // Constructor
    }

    public AIfThenElseStatementNoShortIf(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PPredicate _predicate_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") PStatementNoShortIf _thenbranch_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStatementNoShortIf _elsebranch_)
    {
        // Constructor
        setIf(_if_);

        setLParen(_lParen_);

        setPredicate(_predicate_);

        setRParen(_rParen_);

        setThenbranch(_thenbranch_);

        setElse(_else_);

        setElsebranch(_elsebranch_);

    }

    @Override
    public Object clone()
    {
        return new AIfThenElseStatementNoShortIf(
            cloneNode(this._if_),
            cloneNode(this._lParen_),
            cloneNode(this._predicate_),
            cloneNode(this._rParen_),
            cloneNode(this._thenbranch_),
            cloneNode(this._else_),
            cloneNode(this._elsebranch_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfThenElseStatementNoShortIf(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PPredicate getPredicate()
    {
        return this._predicate_;
    }

    public void setPredicate(PPredicate node)
    {
        if(this._predicate_ != null)
        {
            this._predicate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._predicate_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public PStatementNoShortIf getThenbranch()
    {
        return this._thenbranch_;
    }

    public void setThenbranch(PStatementNoShortIf node)
    {
        if(this._thenbranch_ != null)
        {
            this._thenbranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenbranch_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStatementNoShortIf getElsebranch()
    {
        return this._elsebranch_;
    }

    public void setElsebranch(PStatementNoShortIf node)
    {
        if(this._elsebranch_ != null)
        {
            this._elsebranch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsebranch_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lParen_)
            + toString(this._predicate_)
            + toString(this._rParen_)
            + toString(this._thenbranch_)
            + toString(this._else_)
            + toString(this._elsebranch_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._predicate_ == child)
        {
            this._predicate_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._thenbranch_ == child)
        {
            this._thenbranch_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elsebranch_ == child)
        {
            this._elsebranch_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._predicate_ == oldChild)
        {
            setPredicate((PPredicate) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._thenbranch_ == oldChild)
        {
            setThenbranch((PStatementNoShortIf) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elsebranch_ == oldChild)
        {
            setElsebranch((PStatementNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
