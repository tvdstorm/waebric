/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMarkupStatementStatement extends PStatement
{
    private final LinkedList<PMarkup> _markup_ = new LinkedList<PMarkup>();
    private PStatementNoMarkup _statementNoMarkup_;

    public AMarkupStatementStatement()
    {
        // Constructor
    }

    public AMarkupStatementStatement(
        @SuppressWarnings("hiding") List<PMarkup> _markup_,
        @SuppressWarnings("hiding") PStatementNoMarkup _statementNoMarkup_)
    {
        // Constructor
        setMarkup(_markup_);

        setStatementNoMarkup(_statementNoMarkup_);

    }

    @Override
    public Object clone()
    {
        return new AMarkupStatementStatement(
            cloneList(this._markup_),
            cloneNode(this._statementNoMarkup_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMarkupStatementStatement(this);
    }

    public LinkedList<PMarkup> getMarkup()
    {
        return this._markup_;
    }

    public void setMarkup(List<PMarkup> list)
    {
        this._markup_.clear();
        this._markup_.addAll(list);
        for(PMarkup e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PStatementNoMarkup getStatementNoMarkup()
    {
        return this._statementNoMarkup_;
    }

    public void setStatementNoMarkup(PStatementNoMarkup node)
    {
        if(this._statementNoMarkup_ != null)
        {
            this._statementNoMarkup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementNoMarkup_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._markup_)
            + toString(this._statementNoMarkup_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._markup_.remove(child))
        {
            return;
        }

        if(this._statementNoMarkup_ == child)
        {
            this._statementNoMarkup_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PMarkup> i = this._markup_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMarkup) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statementNoMarkup_ == oldChild)
        {
            setStatementNoMarkup((PStatementNoMarkup) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
