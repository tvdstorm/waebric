/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import java.util.*;
import org.sablecc.grammar.waebric.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAModules(AModules node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAModuleId(AModuleId node)
    {
        defaultCase(node);
    }

    public void caseADefModuleElement(ADefModuleElement node)
    {
        defaultCase(node);
    }

    public void caseAImportModuleElement(AImportModuleElement node)
    {
        defaultCase(node);
    }

    public void caseASiteModuleElement(ASiteModuleElement node)
    {
        defaultCase(node);
    }

    public void caseAMapping(AMapping node)
    {
        defaultCase(node);
    }

    public void caseAPath(APath node)
    {
        defaultCase(node);
    }

    public void caseACallMarkup(ACallMarkup node)
    {
        defaultCase(node);
    }

    public void caseADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultCase(node);
    }

    public void caseATagDesignator(ATagDesignator node)
    {
        defaultCase(node);
    }

    public void caseAIdAttribute(AIdAttribute node)
    {
        defaultCase(node);
    }

    public void caseAClassAttribute(AClassAttribute node)
    {
        defaultCase(node);
    }

    public void caseANameAttribute(ANameAttribute node)
    {
        defaultCase(node);
    }

    public void caseATypeAttribute(ATypeAttribute node)
    {
        defaultCase(node);
    }

    public void caseAWidthHeightAttribute(AWidthHeightAttribute node)
    {
        defaultCase(node);
    }

    public void caseAHeightAttribute(AHeightAttribute node)
    {
        defaultCase(node);
    }

    public void caseAArgs(AArgs node)
    {
        defaultCase(node);
    }

    public void caseAAttrArgument(AAttrArgument node)
    {
        defaultCase(node);
    }

    public void caseAExpressionArgument(AExpressionArgument node)
    {
        defaultCase(node);
    }

    public void caseACatExpression(ACatExpression node)
    {
        defaultCase(node);
    }

    public void caseAVarExpression(AVarExpression node)
    {
        defaultCase(node);
    }

    public void caseATextExpression(ATextExpression node)
    {
        defaultCase(node);
    }

    public void caseASymExpression(ASymExpression node)
    {
        defaultCase(node);
    }

    public void caseANumExpression(ANumExpression node)
    {
        defaultCase(node);
    }

    public void caseAFieldExpression(AFieldExpression node)
    {
        defaultCase(node);
    }

    public void caseAListExpression(AListExpression node)
    {
        defaultCase(node);
    }

    public void caseARecordExpression(ARecordExpression node)
    {
        defaultCase(node);
    }

    public void caseAPair(APair node)
    {
        defaultCase(node);
    }

    public void caseAFormals(AFormals node)
    {
        defaultCase(node);
    }

    public void caseAAssignmentArgs(AAssignmentArgs node)
    {
        defaultCase(node);
    }

    public void caseAEachStatement(AEachStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupStatement(AMarkupStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupMarkupStatement(AMarkupMarkupStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupExpStatement(AMarkupExpStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupEmbeddingStatement(AMarkupEmbeddingStatement node)
    {
        defaultCase(node);
    }

    public void caseAMarkupStatStatement(AMarkupStatStatement node)
    {
        defaultCase(node);
    }

    public void caseALetStatement(ALetStatement node)
    {
        defaultCase(node);
    }

    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    public void caseACommentStatement(ACommentStatement node)
    {
        defaultCase(node);
    }

    public void caseAEchoStatement(AEchoStatement node)
    {
        defaultCase(node);
    }

    public void caseAEchoEmbeddingStatement(AEchoEmbeddingStatement node)
    {
        defaultCase(node);
    }

    public void caseACdataStatement(ACdataStatement node)
    {
        defaultCase(node);
    }

    public void caseAYieldStatement(AYieldStatement node)
    {
        defaultCase(node);
    }

    public void caseAVarBindAssignment(AVarBindAssignment node)
    {
        defaultCase(node);
    }

    public void caseAFuncBindAssignment(AFuncBindAssignment node)
    {
        defaultCase(node);
    }

    public void caseAAndPredicate(AAndPredicate node)
    {
        defaultCase(node);
    }

    public void caseAOrPredicate(AOrPredicate node)
    {
        defaultCase(node);
    }

    public void caseAExpressionPredicate(AExpressionPredicate node)
    {
        defaultCase(node);
    }

    public void caseAIsAPredicate(AIsAPredicate node)
    {
        defaultCase(node);
    }

    public void caseANotPredicate(ANotPredicate node)
    {
        defaultCase(node);
    }

    public void caseAListType(AListType node)
    {
        defaultCase(node);
    }

    public void caseARecordType(ARecordType node)
    {
        defaultCase(node);
    }

    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    public void caseAPreEmbedding(APreEmbedding node)
    {
        defaultCase(node);
    }

    public void caseAPostTextTail(APostTextTail node)
    {
        defaultCase(node);
    }

    public void caseAMidTextTail(AMidTextTail node)
    {
        defaultCase(node);
    }

    public void caseAMarkupEmbeddingEmbed(AMarkupEmbeddingEmbed node)
    {
        defaultCase(node);
    }

    public void caseAExpEmbeddingEmbed(AExpEmbeddingEmbed node)
    {
        defaultCase(node);
    }

    public void caseTModuleKeyword(TModuleKeyword node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEach(TEach node)
    {
        defaultCase(node);
    }

    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTEcho(TEcho node)
    {
        defaultCase(node);
    }

    public void caseTCdata(TCdata node)
    {
        defaultCase(node);
    }

    public void caseTYield(TYield node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTSite(TSite node)
    {
        defaultCase(node);
    }

    public void caseTList(TList node)
    {
        defaultCase(node);
    }

    public void caseTRecord(TRecord node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemiColon(TSemiColon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    public void caseTNumberSign(TNumberSign node)
    {
        defaultCase(node);
    }

    public void caseTDollarSign(TDollarSign node)
    {
        defaultCase(node);
    }

    public void caseTAtSign(TAtSign node)
    {
        defaultCase(node);
    }

    public void caseTPercentSign(TPercentSign node)
    {
        defaultCase(node);
    }

    public void caseTQuestionMark(TQuestionMark node)
    {
        defaultCase(node);
    }

    public void caseTExclamMark(TExclamMark node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTComments(TComments node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTIdCon(TIdCon node)
    {
        defaultCase(node);
    }

    public void caseTNatCon(TNatCon node)
    {
        defaultCase(node);
    }

    public void caseTSymbolCon(TSymbolCon node)
    {
        defaultCase(node);
    }

    public void caseTStrCon(TStrCon node)
    {
        defaultCase(node);
    }

    public void caseTFilename(TFilename node)
    {
        defaultCase(node);
    }

    public void caseTText(TText node)
    {
        defaultCase(node);
    }

    public void caseTPreText(TPreText node)
    {
        defaultCase(node);
    }

    public void caseTPostText(TPostText node)
    {
        defaultCase(node);
    }

    public void caseTMidText(TMidText node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
