/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class APlusExpressionExpression extends PExpression
{
    private PExpressionNoPlus _expressionNoPlus_;
    private TPlus _plus_;
    private PExpression _expression_;

    public APlusExpressionExpression()
    {
        // Constructor
    }

    public APlusExpressionExpression(
        @SuppressWarnings("hiding") PExpressionNoPlus _expressionNoPlus_,
        @SuppressWarnings("hiding") TPlus _plus_,
        @SuppressWarnings("hiding") PExpression _expression_)
    {
        // Constructor
        setExpressionNoPlus(_expressionNoPlus_);

        setPlus(_plus_);

        setExpression(_expression_);

    }

    @Override
    public Object clone()
    {
        return new APlusExpressionExpression(
            cloneNode(this._expressionNoPlus_),
            cloneNode(this._plus_),
            cloneNode(this._expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlusExpressionExpression(this);
    }

    public PExpressionNoPlus getExpressionNoPlus()
    {
        return this._expressionNoPlus_;
    }

    public void setExpressionNoPlus(PExpressionNoPlus node)
    {
        if(this._expressionNoPlus_ != null)
        {
            this._expressionNoPlus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionNoPlus_ = node;
    }

    public TPlus getPlus()
    {
        return this._plus_;
    }

    public void setPlus(TPlus node)
    {
        if(this._plus_ != null)
        {
            this._plus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plus_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionNoPlus_)
            + toString(this._plus_)
            + toString(this._expression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionNoPlus_ == child)
        {
            this._expressionNoPlus_ = null;
            return;
        }

        if(this._plus_ == child)
        {
            this._plus_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionNoPlus_ == oldChild)
        {
            setExpressionNoPlus((PExpressionNoPlus) newChild);
            return;
        }

        if(this._plus_ == oldChild)
        {
            setPlus((TPlus) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
