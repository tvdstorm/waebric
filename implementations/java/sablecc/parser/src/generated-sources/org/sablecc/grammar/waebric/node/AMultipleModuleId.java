/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleModuleId extends PModuleId
{
    private PModuleId _moduleId_;
    private TDot _dot_;
    private TIdCon _idCon_;

    public AMultipleModuleId()
    {
        // Constructor
    }

    public AMultipleModuleId(
        @SuppressWarnings("hiding") PModuleId _moduleId_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TIdCon _idCon_)
    {
        // Constructor
        setModuleId(_moduleId_);

        setDot(_dot_);

        setIdCon(_idCon_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleModuleId(
            cloneNode(this._moduleId_),
            cloneNode(this._dot_),
            cloneNode(this._idCon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleModuleId(this);
    }

    public PModuleId getModuleId()
    {
        return this._moduleId_;
    }

    public void setModuleId(PModuleId node)
    {
        if(this._moduleId_ != null)
        {
            this._moduleId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moduleId_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TIdCon getIdCon()
    {
        return this._idCon_;
    }

    public void setIdCon(TIdCon node)
    {
        if(this._idCon_ != null)
        {
            this._idCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idCon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._moduleId_)
            + toString(this._dot_)
            + toString(this._idCon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._moduleId_ == child)
        {
            this._moduleId_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._idCon_ == child)
        {
            this._idCon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._moduleId_ == oldChild)
        {
            setModuleId((PModuleId) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._idCon_ == oldChild)
        {
            setIdCon((TIdCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
