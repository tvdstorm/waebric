/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AAtWidthAttribute extends PAttribute
{
    private TAtSign _atSign_;
    private TNatCon _w_;

    public AAtWidthAttribute()
    {
        // Constructor
    }

    public AAtWidthAttribute(
        @SuppressWarnings("hiding") TAtSign _atSign_,
        @SuppressWarnings("hiding") TNatCon _w_)
    {
        // Constructor
        setAtSign(_atSign_);

        setW(_w_);

    }

    @Override
    public Object clone()
    {
        return new AAtWidthAttribute(
            cloneNode(this._atSign_),
            cloneNode(this._w_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAtWidthAttribute(this);
    }

    public TAtSign getAtSign()
    {
        return this._atSign_;
    }

    public void setAtSign(TAtSign node)
    {
        if(this._atSign_ != null)
        {
            this._atSign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atSign_ = node;
    }

    public TNatCon getW()
    {
        return this._w_;
    }

    public void setW(TNatCon node)
    {
        if(this._w_ != null)
        {
            this._w_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._w_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atSign_)
            + toString(this._w_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atSign_ == child)
        {
            this._atSign_ = null;
            return;
        }

        if(this._w_ == child)
        {
            this._w_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atSign_ == oldChild)
        {
            setAtSign((TAtSign) newChild);
            return;
        }

        if(this._w_ == oldChild)
        {
            setW((TNatCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
