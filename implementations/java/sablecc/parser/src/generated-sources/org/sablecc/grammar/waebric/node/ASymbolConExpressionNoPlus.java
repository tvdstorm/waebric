/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class ASymbolConExpressionNoPlus extends PExpressionNoPlus
{
    private TSymbolCon _symbolCon_;

    public ASymbolConExpressionNoPlus()
    {
        // Constructor
    }

    public ASymbolConExpressionNoPlus(
        @SuppressWarnings("hiding") TSymbolCon _symbolCon_)
    {
        // Constructor
        setSymbolCon(_symbolCon_);

    }

    @Override
    public Object clone()
    {
        return new ASymbolConExpressionNoPlus(
            cloneNode(this._symbolCon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASymbolConExpressionNoPlus(this);
    }

    public TSymbolCon getSymbolCon()
    {
        return this._symbolCon_;
    }

    public void setSymbolCon(TSymbolCon node)
    {
        if(this._symbolCon_ != null)
        {
            this._symbolCon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._symbolCon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._symbolCon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._symbolCon_ == child)
        {
            this._symbolCon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._symbolCon_ == oldChild)
        {
            setSymbolCon((TSymbolCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
