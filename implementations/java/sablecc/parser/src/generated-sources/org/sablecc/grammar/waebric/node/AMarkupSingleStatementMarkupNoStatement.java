/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AMarkupSingleStatementMarkupNoStatement extends PStatementMarkupNoStatement
{
    private PMarkup _markup_;
    private TSemiColon _semiColon_;

    public AMarkupSingleStatementMarkupNoStatement()
    {
        // Constructor
    }

    public AMarkupSingleStatementMarkupNoStatement(
        @SuppressWarnings("hiding") PMarkup _markup_,
        @SuppressWarnings("hiding") TSemiColon _semiColon_)
    {
        // Constructor
        setMarkup(_markup_);

        setSemiColon(_semiColon_);

    }

    @Override
    public Object clone()
    {
        return new AMarkupSingleStatementMarkupNoStatement(
            cloneNode(this._markup_),
            cloneNode(this._semiColon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMarkupSingleStatementMarkupNoStatement(this);
    }

    public PMarkup getMarkup()
    {
        return this._markup_;
    }

    public void setMarkup(PMarkup node)
    {
        if(this._markup_ != null)
        {
            this._markup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._markup_ = node;
    }

    public TSemiColon getSemiColon()
    {
        return this._semiColon_;
    }

    public void setSemiColon(TSemiColon node)
    {
        if(this._semiColon_ != null)
        {
            this._semiColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiColon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._markup_)
            + toString(this._semiColon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._markup_ == child)
        {
            this._markup_ = null;
            return;
        }

        if(this._semiColon_ == child)
        {
            this._semiColon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._markup_ == oldChild)
        {
            setMarkup((PMarkup) newChild);
            return;
        }

        if(this._semiColon_ == oldChild)
        {
            setSemiColon((TSemiColon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
