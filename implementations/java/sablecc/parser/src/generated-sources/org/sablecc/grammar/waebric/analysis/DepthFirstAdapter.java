/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import java.util.*;
import org.sablecc.grammar.waebric.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPModules().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAModules(AModules node)
    {
        defaultIn(node);
    }

    public void outAModules(AModules node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModules(AModules node)
    {
        inAModules(node);
        {
            List<PModule> copy = new ArrayList<PModule>(node.getModule());
            for(PModule e : copy)
            {
                e.apply(this);
            }
        }
        outAModules(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModule(AModule node)
    {
        inAModule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getModuleId() != null)
        {
            node.getModuleId().apply(this);
        }
        {
            List<PModuleElement> copy = new ArrayList<PModuleElement>(node.getModuleElement());
            for(PModuleElement e : copy)
            {
                e.apply(this);
            }
        }
        outAModule(node);
    }

    public void inASingleModuleId(ASingleModuleId node)
    {
        defaultIn(node);
    }

    public void outASingleModuleId(ASingleModuleId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleModuleId(ASingleModuleId node)
    {
        inASingleModuleId(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outASingleModuleId(node);
    }

    public void inAMultipleModuleId(AMultipleModuleId node)
    {
        defaultIn(node);
    }

    public void outAMultipleModuleId(AMultipleModuleId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleModuleId(AMultipleModuleId node)
    {
        inAMultipleModuleId(node);
        if(node.getModuleId() != null)
        {
            node.getModuleId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAMultipleModuleId(node);
    }

    public void inAFunctionModuleElement(AFunctionModuleElement node)
    {
        defaultIn(node);
    }

    public void outAFunctionModuleElement(AFunctionModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionModuleElement(AFunctionModuleElement node)
    {
        inAFunctionModuleElement(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionModuleElement(node);
    }

    public void inAImportModuleElement(AImportModuleElement node)
    {
        defaultIn(node);
    }

    public void outAImportModuleElement(AImportModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportModuleElement(AImportModuleElement node)
    {
        inAImportModuleElement(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        outAImportModuleElement(node);
    }

    public void inASiteModuleElement(ASiteModuleElement node)
    {
        defaultIn(node);
    }

    public void outASiteModuleElement(ASiteModuleElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiteModuleElement(ASiteModuleElement node)
    {
        inASiteModuleElement(node);
        if(node.getSite() != null)
        {
            node.getSite().apply(this);
        }
        outASiteModuleElement(node);
    }

    public void inAImport(AImport node)
    {
        defaultIn(node);
    }

    public void outAImport(AImport node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImport(AImport node)
    {
        inAImport(node);
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getModuleId() != null)
        {
            node.getModuleId().apply(this);
        }
        outAImport(node);
    }

    public void inASite(ASite node)
    {
        defaultIn(node);
    }

    public void outASite(ASite node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASite(ASite node)
    {
        inASite(node);
        if(node.getSite() != null)
        {
            node.getSite().apply(this);
        }
        if(node.getMappings() != null)
        {
            node.getMappings().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outASite(node);
    }

    public void inASingleMappings(ASingleMappings node)
    {
        defaultIn(node);
    }

    public void outASingleMappings(ASingleMappings node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleMappings(ASingleMappings node)
    {
        inASingleMappings(node);
        if(node.getMapping() != null)
        {
            node.getMapping().apply(this);
        }
        outASingleMappings(node);
    }

    public void inAMultipleMappings(AMultipleMappings node)
    {
        defaultIn(node);
    }

    public void outAMultipleMappings(AMultipleMappings node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleMappings(AMultipleMappings node)
    {
        inAMultipleMappings(node);
        if(node.getMappings() != null)
        {
            node.getMappings().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        if(node.getMapping() != null)
        {
            node.getMapping().apply(this);
        }
        outAMultipleMappings(node);
    }

    public void inAMapping(AMapping node)
    {
        defaultIn(node);
    }

    public void outAMapping(AMapping node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMapping(AMapping node)
    {
        inAMapping(node);
        if(node.getFilename() != null)
        {
            node.getFilename().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getMarkup() != null)
        {
            node.getMarkup().apply(this);
        }
        outAMapping(node);
    }

    public void inADesignatorWithArgsMarkup(ADesignatorWithArgsMarkup node)
    {
        defaultIn(node);
    }

    public void outADesignatorWithArgsMarkup(ADesignatorWithArgsMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesignatorWithArgsMarkup(ADesignatorWithArgsMarkup node)
    {
        inADesignatorWithArgsMarkup(node);
        if(node.getMarkupNoShortMarkup() != null)
        {
            node.getMarkupNoShortMarkup().apply(this);
        }
        outADesignatorWithArgsMarkup(node);
    }

    public void inADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultIn(node);
    }

    public void outADesignatorMarkup(ADesignatorMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesignatorMarkup(ADesignatorMarkup node)
    {
        inADesignatorMarkup(node);
        if(node.getDesignator() != null)
        {
            node.getDesignator().apply(this);
        }
        outADesignatorMarkup(node);
    }

    public void inADesignatorWithArgsMarkupNoShortMarkup(ADesignatorWithArgsMarkupNoShortMarkup node)
    {
        defaultIn(node);
    }

    public void outADesignatorWithArgsMarkupNoShortMarkup(ADesignatorWithArgsMarkupNoShortMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesignatorWithArgsMarkupNoShortMarkup(ADesignatorWithArgsMarkupNoShortMarkup node)
    {
        inADesignatorWithArgsMarkupNoShortMarkup(node);
        if(node.getDesignator() != null)
        {
            node.getDesignator().apply(this);
        }
        if(node.getArguments() != null)
        {
            node.getArguments().apply(this);
        }
        outADesignatorWithArgsMarkupNoShortMarkup(node);
    }

    public void inADesignator(ADesignator node)
    {
        defaultIn(node);
    }

    public void outADesignator(ADesignator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADesignator(ADesignator node)
    {
        inADesignator(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        {
            List<PAttribute> copy = new ArrayList<PAttribute>(node.getAttribute());
            for(PAttribute e : copy)
            {
                e.apply(this);
            }
        }
        outADesignator(node);
    }

    public void inANumberSignAttribute(ANumberSignAttribute node)
    {
        defaultIn(node);
    }

    public void outANumberSignAttribute(ANumberSignAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberSignAttribute(ANumberSignAttribute node)
    {
        inANumberSignAttribute(node);
        if(node.getNumberSign() != null)
        {
            node.getNumberSign().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outANumberSignAttribute(node);
    }

    public void inADotAttribute(ADotAttribute node)
    {
        defaultIn(node);
    }

    public void outADotAttribute(ADotAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotAttribute(ADotAttribute node)
    {
        inADotAttribute(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outADotAttribute(node);
    }

    public void inADollarSignAttribute(ADollarSignAttribute node)
    {
        defaultIn(node);
    }

    public void outADollarSignAttribute(ADollarSignAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADollarSignAttribute(ADollarSignAttribute node)
    {
        inADollarSignAttribute(node);
        if(node.getDollarSign() != null)
        {
            node.getDollarSign().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outADollarSignAttribute(node);
    }

    public void inAColonAttribute(AColonAttribute node)
    {
        defaultIn(node);
    }

    public void outAColonAttribute(AColonAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColonAttribute(AColonAttribute node)
    {
        inAColonAttribute(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAColonAttribute(node);
    }

    public void inAAtWidthHeightAttribute(AAtWidthHeightAttribute node)
    {
        defaultIn(node);
    }

    public void outAAtWidthHeightAttribute(AAtWidthHeightAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtWidthHeightAttribute(AAtWidthHeightAttribute node)
    {
        inAAtWidthHeightAttribute(node);
        if(node.getAtSign() != null)
        {
            node.getAtSign().apply(this);
        }
        if(node.getW() != null)
        {
            node.getW().apply(this);
        }
        if(node.getPercentSign() != null)
        {
            node.getPercentSign().apply(this);
        }
        if(node.getH() != null)
        {
            node.getH().apply(this);
        }
        outAAtWidthHeightAttribute(node);
    }

    public void inAAtWidthAttribute(AAtWidthAttribute node)
    {
        defaultIn(node);
    }

    public void outAAtWidthAttribute(AAtWidthAttribute node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtWidthAttribute(AAtWidthAttribute node)
    {
        inAAtWidthAttribute(node);
        if(node.getAtSign() != null)
        {
            node.getAtSign().apply(this);
        }
        if(node.getW() != null)
        {
            node.getW().apply(this);
        }
        outAAtWidthAttribute(node);
    }

    public void inAArguments(AArguments node)
    {
        defaultIn(node);
    }

    public void outAArguments(AArguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArguments(AArguments node)
    {
        inAArguments(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAArguments(node);
    }

    public void inASingleArgumentList(ASingleArgumentList node)
    {
        defaultIn(node);
    }

    public void outASingleArgumentList(ASingleArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgumentList(ASingleArgumentList node)
    {
        inASingleArgumentList(node);
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outASingleArgumentList(node);
    }

    public void inAMultipleArgumentList(AMultipleArgumentList node)
    {
        defaultIn(node);
    }

    public void outAMultipleArgumentList(AMultipleArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleArgumentList(AMultipleArgumentList node)
    {
        inAMultipleArgumentList(node);
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outAMultipleArgumentList(node);
    }

    public void inAAssignArgument(AAssignArgument node)
    {
        defaultIn(node);
    }

    public void outAAssignArgument(AAssignArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignArgument(AAssignArgument node)
    {
        inAAssignArgument(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignArgument(node);
    }

    public void inAArgumentArgument(AArgumentArgument node)
    {
        defaultIn(node);
    }

    public void outAArgumentArgument(AArgumentArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentArgument(AArgumentArgument node)
    {
        inAArgumentArgument(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgumentArgument(node);
    }

    public void inANoPlusExpression(ANoPlusExpression node)
    {
        defaultIn(node);
    }

    public void outANoPlusExpression(ANoPlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoPlusExpression(ANoPlusExpression node)
    {
        inANoPlusExpression(node);
        if(node.getExpressionNoPlus() != null)
        {
            node.getExpressionNoPlus().apply(this);
        }
        outANoPlusExpression(node);
    }

    public void inAPlusExpressionExpression(APlusExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpressionExpression(APlusExpressionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpressionExpression(APlusExpressionExpression node)
    {
        inAPlusExpressionExpression(node);
        if(node.getExpressionNoPlus() != null)
        {
            node.getExpressionNoPlus().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPlusExpressionExpression(node);
    }

    public void inAIdconExpressionNoPlus(AIdconExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outAIdconExpressionNoPlus(AIdconExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdconExpressionNoPlus(AIdconExpressionNoPlus node)
    {
        inAIdconExpressionNoPlus(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAIdconExpressionNoPlus(node);
    }

    public void inATextExpressionNoPlus(ATextExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outATextExpressionNoPlus(ATextExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATextExpressionNoPlus(ATextExpressionNoPlus node)
    {
        inATextExpressionNoPlus(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        outATextExpressionNoPlus(node);
    }

    public void inASymbolConExpressionNoPlus(ASymbolConExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outASymbolConExpressionNoPlus(ASymbolConExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolConExpressionNoPlus(ASymbolConExpressionNoPlus node)
    {
        inASymbolConExpressionNoPlus(node);
        if(node.getSymbolCon() != null)
        {
            node.getSymbolCon().apply(this);
        }
        outASymbolConExpressionNoPlus(node);
    }

    public void inANatConExpressionNoPlus(ANatConExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outANatConExpressionNoPlus(ANatConExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANatConExpressionNoPlus(ANatConExpressionNoPlus node)
    {
        inANatConExpressionNoPlus(node);
        if(node.getNatCon() != null)
        {
            node.getNatCon().apply(this);
        }
        outANatConExpressionNoPlus(node);
    }

    public void inADotIdconExpressionNoPlus(ADotIdconExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outADotIdconExpressionNoPlus(ADotIdconExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotIdconExpressionNoPlus(ADotIdconExpressionNoPlus node)
    {
        inADotIdconExpressionNoPlus(node);
        if(node.getExpressionNoPlus() != null)
        {
            node.getExpressionNoPlus().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outADotIdconExpressionNoPlus(node);
    }

    public void inAMultipleExpressionsExpressionNoPlus(AMultipleExpressionsExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpressionsExpressionNoPlus(AMultipleExpressionsExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExpressionsExpressionNoPlus(AMultipleExpressionsExpressionNoPlus node)
    {
        inAMultipleExpressionsExpressionNoPlus(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpressions() != null)
        {
            node.getExpressions().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAMultipleExpressionsExpressionNoPlus(node);
    }

    public void inAKeyValuePairsExpressionNoPlus(AKeyValuePairsExpressionNoPlus node)
    {
        defaultIn(node);
    }

    public void outAKeyValuePairsExpressionNoPlus(AKeyValuePairsExpressionNoPlus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyValuePairsExpressionNoPlus(AKeyValuePairsExpressionNoPlus node)
    {
        inAKeyValuePairsExpressionNoPlus(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getKeyValuePairs() != null)
        {
            node.getKeyValuePairs().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAKeyValuePairsExpressionNoPlus(node);
    }

    public void inASingleExpressions(ASingleExpressions node)
    {
        defaultIn(node);
    }

    public void outASingleExpressions(ASingleExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExpressions(ASingleExpressions node)
    {
        inASingleExpressions(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASingleExpressions(node);
    }

    public void inAMultipleExpressions(AMultipleExpressions node)
    {
        defaultIn(node);
    }

    public void outAMultipleExpressions(AMultipleExpressions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleExpressions(AMultipleExpressions node)
    {
        inAMultipleExpressions(node);
        if(node.getExpressions() != null)
        {
            node.getExpressions().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMultipleExpressions(node);
    }

    public void inASingleKeyValuePairs(ASingleKeyValuePairs node)
    {
        defaultIn(node);
    }

    public void outASingleKeyValuePairs(ASingleKeyValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleKeyValuePairs(ASingleKeyValuePairs node)
    {
        inASingleKeyValuePairs(node);
        if(node.getKeyValuePair() != null)
        {
            node.getKeyValuePair().apply(this);
        }
        outASingleKeyValuePairs(node);
    }

    public void inAMultipleKeyValuePairs(AMultipleKeyValuePairs node)
    {
        defaultIn(node);
    }

    public void outAMultipleKeyValuePairs(AMultipleKeyValuePairs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleKeyValuePairs(AMultipleKeyValuePairs node)
    {
        inAMultipleKeyValuePairs(node);
        if(node.getKeyValuePairs() != null)
        {
            node.getKeyValuePairs().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getKeyValuePair() != null)
        {
            node.getKeyValuePair().apply(this);
        }
        outAMultipleKeyValuePairs(node);
    }

    public void inAKeyValuePair(AKeyValuePair node)
    {
        defaultIn(node);
    }

    public void outAKeyValuePair(AKeyValuePair node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAKeyValuePair(AKeyValuePair node)
    {
        inAKeyValuePair(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAKeyValuePair(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outAFunction(node);
    }

    public void inAFormals(AFormals node)
    {
        defaultIn(node);
    }

    public void outAFormals(AFormals node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormals(AFormals node)
    {
        inAFormals(node);
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        outAFormals(node);
    }

    public void inASingleFormal(ASingleFormal node)
    {
        defaultIn(node);
    }

    public void outASingleFormal(ASingleFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFormal(ASingleFormal node)
    {
        inASingleFormal(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outASingleFormal(node);
    }

    public void inAMultipleFormal(AMultipleFormal node)
    {
        defaultIn(node);
    }

    public void outAMultipleFormal(AMultipleFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleFormal(AMultipleFormal node)
    {
        inAMultipleFormal(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        outAMultipleFormal(node);
    }

    public void inANoMarkupStatement(ANoMarkupStatement node)
    {
        defaultIn(node);
    }

    public void outANoMarkupStatement(ANoMarkupStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoMarkupStatement(ANoMarkupStatement node)
    {
        inANoMarkupStatement(node);
        if(node.getStatementNoMarkup() != null)
        {
            node.getStatementNoMarkup().apply(this);
        }
        outANoMarkupStatement(node);
    }

    public void inAMarkupStatementStatement(AMarkupStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupStatementStatement(AMarkupStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupStatementStatement(AMarkupStatementStatement node)
    {
        inAMarkupStatementStatement(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatementNoMarkup() != null)
        {
            node.getStatementNoMarkup().apply(this);
        }
        outAMarkupStatementStatement(node);
    }

    public void inAMarkupNoStatementStatement(AMarkupNoStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupNoStatementStatement(AMarkupNoStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupNoStatementStatement(AMarkupNoStatementStatement node)
    {
        inAMarkupNoStatementStatement(node);
        if(node.getStatementMarkupNoStatement() != null)
        {
            node.getStatementMarkupNoStatement().apply(this);
        }
        outAMarkupNoStatementStatement(node);
    }

    public void inAEachStatementNoMarkup(AEachStatementNoMarkup node)
    {
        defaultIn(node);
    }

    public void outAEachStatementNoMarkup(AEachStatementNoMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEachStatementNoMarkup(AEachStatementNoMarkup node)
    {
        inAEachStatementNoMarkup(node);
        if(node.getEach() != null)
        {
            node.getEach().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAEachStatementNoMarkup(node);
    }

    public void inAIfThenStatementNoMarkup(AIfThenStatementNoMarkup node)
    {
        defaultIn(node);
    }

    public void outAIfThenStatementNoMarkup(AIfThenStatementNoMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStatementNoMarkup(AIfThenStatementNoMarkup node)
    {
        inAIfThenStatementNoMarkup(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfThenStatementNoMarkup(node);
    }

    public void inAIfThenElseStatementNoMarkup(AIfThenElseStatementNoMarkup node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementNoMarkup(AIfThenElseStatementNoMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementNoMarkup(AIfThenElseStatementNoMarkup node)
    {
        inAIfThenElseStatementNoMarkup(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getThenbranch() != null)
        {
            node.getThenbranch().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElsebranch() != null)
        {
            node.getElsebranch().apply(this);
        }
        outAIfThenElseStatementNoMarkup(node);
    }

    public void inANoShortIfStatementNoMarkup(ANoShortIfStatementNoMarkup node)
    {
        defaultIn(node);
    }

    public void outANoShortIfStatementNoMarkup(ANoShortIfStatementNoMarkup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoShortIfStatementNoMarkup(ANoShortIfStatementNoMarkup node)
    {
        inANoShortIfStatementNoMarkup(node);
        if(node.getStatementNoMarkupNoShortIf() != null)
        {
            node.getStatementNoMarkupNoShortIf().apply(this);
        }
        outANoShortIfStatementNoMarkup(node);
    }

    public void inANoMarkupStatementNoShortIf(ANoMarkupStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outANoMarkupStatementNoShortIf(ANoMarkupStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoMarkupStatementNoShortIf(ANoMarkupStatementNoShortIf node)
    {
        inANoMarkupStatementNoShortIf(node);
        if(node.getStatementNoMarkupNoShortIf() != null)
        {
            node.getStatementNoMarkupNoShortIf().apply(this);
        }
        outANoMarkupStatementNoShortIf(node);
    }

    public void inAMarkupNoStatementStatementNoShortIf(AMarkupNoStatementStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAMarkupNoStatementStatementNoShortIf(AMarkupNoStatementStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupNoStatementStatementNoShortIf(AMarkupNoStatementStatementNoShortIf node)
    {
        inAMarkupNoStatementStatementNoShortIf(node);
        if(node.getStatementMarkupNoStatement() != null)
        {
            node.getStatementMarkupNoStatement().apply(this);
        }
        outAMarkupNoStatementStatementNoShortIf(node);
    }

    public void inAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        inAIfThenElseStatementNoShortIf(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getThenbranch() != null)
        {
            node.getThenbranch().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElsebranch() != null)
        {
            node.getElsebranch().apply(this);
        }
        outAIfThenElseStatementNoShortIf(node);
    }

    public void inAMarkupSingleStatementMarkupNoStatement(AMarkupSingleStatementMarkupNoStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupSingleStatementMarkupNoStatement(AMarkupSingleStatementMarkupNoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupSingleStatementMarkupNoStatement(AMarkupSingleStatementMarkupNoStatement node)
    {
        inAMarkupSingleStatementMarkupNoStatement(node);
        if(node.getMarkup() != null)
        {
            node.getMarkup().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAMarkupSingleStatementMarkupNoStatement(node);
    }

    public void inAMarkupMultipleStatementMarkupNoStatement(AMarkupMultipleStatementMarkupNoStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupMultipleStatementMarkupNoStatement(AMarkupMultipleStatementMarkupNoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupMultipleStatementMarkupNoStatement(AMarkupMultipleStatementMarkupNoStatement node)
    {
        inAMarkupMultipleStatementMarkupNoStatement(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMultiple());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSingle() != null)
        {
            node.getSingle().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAMarkupMultipleStatementMarkupNoStatement(node);
    }

    public void inAMarkupExpressionStatementMarkupNoStatement(AMarkupExpressionStatementMarkupNoStatement node)
    {
        defaultIn(node);
    }

    public void outAMarkupExpressionStatementMarkupNoStatement(AMarkupExpressionStatementMarkupNoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupExpressionStatementMarkupNoStatement(AMarkupExpressionStatementMarkupNoStatement node)
    {
        inAMarkupExpressionStatementMarkupNoStatement(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAMarkupExpressionStatementMarkupNoStatement(node);
    }

    public void inAEmbeddingStatementMarkupNoStatement(AEmbeddingStatementMarkupNoStatement node)
    {
        defaultIn(node);
    }

    public void outAEmbeddingStatementMarkupNoStatement(AEmbeddingStatementMarkupNoStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmbeddingStatementMarkupNoStatement(AEmbeddingStatementMarkupNoStatement node)
    {
        inAEmbeddingStatementMarkupNoStatement(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEmbedding() != null)
        {
            node.getEmbedding().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAEmbeddingStatementMarkupNoStatement(node);
    }

    public void inALetStatementNoMarkupNoShortIf(ALetStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outALetStatementNoMarkupNoShortIf(ALetStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetStatementNoMarkupNoShortIf(ALetStatementNoMarkupNoShortIf node)
    {
        inALetStatementNoMarkupNoShortIf(node);
        if(node.getLet() != null)
        {
            node.getLet().apply(this);
        }
        {
            List<PAssignment> copy = new ArrayList<PAssignment>(node.getAssignment());
            for(PAssignment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outALetStatementNoMarkupNoShortIf(node);
    }

    public void inABlockStatementNoMarkupNoShortIf(ABlockStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outABlockStatementNoMarkupNoShortIf(ABlockStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementNoMarkupNoShortIf(ABlockStatementNoMarkupNoShortIf node)
    {
        inABlockStatementNoMarkupNoShortIf(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlockStatementNoMarkupNoShortIf(node);
    }

    public void inACommentStatementNoMarkupNoShortIf(ACommentStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outACommentStatementNoMarkupNoShortIf(ACommentStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommentStatementNoMarkupNoShortIf(ACommentStatementNoMarkupNoShortIf node)
    {
        inACommentStatementNoMarkupNoShortIf(node);
        if(node.getComment() != null)
        {
            node.getComment().apply(this);
        }
        if(node.getStrCon() != null)
        {
            node.getStrCon().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outACommentStatementNoMarkupNoShortIf(node);
    }

    public void inAEchoExpressionStatementNoMarkupNoShortIf(AEchoExpressionStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAEchoExpressionStatementNoMarkupNoShortIf(AEchoExpressionStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEchoExpressionStatementNoMarkupNoShortIf(AEchoExpressionStatementNoMarkupNoShortIf node)
    {
        inAEchoExpressionStatementNoMarkupNoShortIf(node);
        if(node.getEcho() != null)
        {
            node.getEcho().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAEchoExpressionStatementNoMarkupNoShortIf(node);
    }

    public void inAEchoEmbeddingStatementNoMarkupNoShortIf(AEchoEmbeddingStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAEchoEmbeddingStatementNoMarkupNoShortIf(AEchoEmbeddingStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEchoEmbeddingStatementNoMarkupNoShortIf(AEchoEmbeddingStatementNoMarkupNoShortIf node)
    {
        inAEchoEmbeddingStatementNoMarkupNoShortIf(node);
        if(node.getEcho() != null)
        {
            node.getEcho().apply(this);
        }
        if(node.getEmbedding() != null)
        {
            node.getEmbedding().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAEchoEmbeddingStatementNoMarkupNoShortIf(node);
    }

    public void inACdataStatementNoMarkupNoShortIf(ACdataStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outACdataStatementNoMarkupNoShortIf(ACdataStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACdataStatementNoMarkupNoShortIf(ACdataStatementNoMarkupNoShortIf node)
    {
        inACdataStatementNoMarkupNoShortIf(node);
        if(node.getCdata() != null)
        {
            node.getCdata().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outACdataStatementNoMarkupNoShortIf(node);
    }

    public void inAYieldStatementNoMarkupNoShortIf(AYieldStatementNoMarkupNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAYieldStatementNoMarkupNoShortIf(AYieldStatementNoMarkupNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYieldStatementNoMarkupNoShortIf(AYieldStatementNoMarkupNoShortIf node)
    {
        inAYieldStatementNoMarkupNoShortIf(node);
        if(node.getYield() != null)
        {
            node.getYield().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAYieldStatementNoMarkupNoShortIf(node);
    }

    public void inAExpressionAssignment(AExpressionAssignment node)
    {
        defaultIn(node);
    }

    public void outAExpressionAssignment(AExpressionAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionAssignment(AExpressionAssignment node)
    {
        inAExpressionAssignment(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAExpressionAssignment(node);
    }

    public void inAStatementAssignment(AStatementAssignment node)
    {
        defaultIn(node);
    }

    public void outAStatementAssignment(AStatementAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementAssignment(AStatementAssignment node)
    {
        inAStatementAssignment(node);
        if(node.getIdCon() != null)
        {
            node.getIdCon().apply(this);
        }
        if(node.getFormals() != null)
        {
            node.getFormals().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementAssignment(node);
    }

    public void inANoAndOrPredicate(ANoAndOrPredicate node)
    {
        defaultIn(node);
    }

    public void outANoAndOrPredicate(ANoAndOrPredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoAndOrPredicate(ANoAndOrPredicate node)
    {
        inANoAndOrPredicate(node);
        if(node.getPredicateNoAndOr() != null)
        {
            node.getPredicateNoAndOr().apply(this);
        }
        outANoAndOrPredicate(node);
    }

    public void inAAndPredicatePredicate(AAndPredicatePredicate node)
    {
        defaultIn(node);
    }

    public void outAAndPredicatePredicate(AAndPredicatePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndPredicatePredicate(AAndPredicatePredicate node)
    {
        inAAndPredicatePredicate(node);
        if(node.getPredicateNoAndOr() != null)
        {
            node.getPredicateNoAndOr().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getPredicate() != null)
        {
            node.getPredicate().apply(this);
        }
        outAAndPredicatePredicate(node);
    }

    public void inAOrPredicatePredicate(AOrPredicatePredicate node)
    {
        defaultIn(node);
    }

    public void outAOrPredicatePredicate(AOrPredicatePredicate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrPredicatePredicate(AOrPredicatePredicate node)
    {
        inAOrPredicatePredicate(node);
        if(node.getPredicateNoAndOr() != null)
        {
            node.getPredicateNoAndOr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAOrPredicatePredicate(node);
    }

    public void inAExpressionPredicateNoAndOr(AExpressionPredicateNoAndOr node)
    {
        defaultIn(node);
    }

    public void outAExpressionPredicateNoAndOr(AExpressionPredicateNoAndOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionPredicateNoAndOr(AExpressionPredicateNoAndOr node)
    {
        inAExpressionPredicateNoAndOr(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionPredicateNoAndOr(node);
    }

    public void inAExpressionTypePredicateNoAndOr(AExpressionTypePredicateNoAndOr node)
    {
        defaultIn(node);
    }

    public void outAExpressionTypePredicateNoAndOr(AExpressionTypePredicateNoAndOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionTypePredicateNoAndOr(AExpressionTypePredicateNoAndOr node)
    {
        inAExpressionTypePredicateNoAndOr(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getQuestionMark() != null)
        {
            node.getQuestionMark().apply(this);
        }
        outAExpressionTypePredicateNoAndOr(node);
    }

    public void inANotPredicatePredicateNoAndOr(ANotPredicatePredicateNoAndOr node)
    {
        defaultIn(node);
    }

    public void outANotPredicatePredicateNoAndOr(ANotPredicatePredicateNoAndOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotPredicatePredicateNoAndOr(ANotPredicatePredicateNoAndOr node)
    {
        inANotPredicatePredicateNoAndOr(node);
        if(node.getExclamMark() != null)
        {
            node.getExclamMark().apply(this);
        }
        if(node.getPredicateNoAndOr() != null)
        {
            node.getPredicateNoAndOr().apply(this);
        }
        outANotPredicatePredicateNoAndOr(node);
    }

    public void inAListType(AListType node)
    {
        defaultIn(node);
    }

    public void outAListType(AListType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListType(AListType node)
    {
        inAListType(node);
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListType(node);
    }

    public void inARecordType(ARecordType node)
    {
        defaultIn(node);
    }

    public void outARecordType(ARecordType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecordType(ARecordType node)
    {
        inARecordType(node);
        if(node.getRecord() != null)
        {
            node.getRecord().apply(this);
        }
        outARecordType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAEmbedding(AEmbedding node)
    {
        defaultIn(node);
    }

    public void outAEmbedding(AEmbedding node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmbedding(AEmbedding node)
    {
        inAEmbedding(node);
        if(node.getPreText() != null)
        {
            node.getPreText().apply(this);
        }
        if(node.getEmbed() != null)
        {
            node.getEmbed().apply(this);
        }
        if(node.getTextTail() != null)
        {
            node.getTextTail().apply(this);
        }
        outAEmbedding(node);
    }

    public void inAPosttextTextTail(APosttextTextTail node)
    {
        defaultIn(node);
    }

    public void outAPosttextTextTail(APosttextTextTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosttextTextTail(APosttextTextTail node)
    {
        inAPosttextTextTail(node);
        if(node.getPostText() != null)
        {
            node.getPostText().apply(this);
        }
        outAPosttextTextTail(node);
    }

    public void inAMidtextTextTail(AMidtextTextTail node)
    {
        defaultIn(node);
    }

    public void outAMidtextTextTail(AMidtextTextTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMidtextTextTail(AMidtextTextTail node)
    {
        inAMidtextTextTail(node);
        if(node.getMidText() != null)
        {
            node.getMidText().apply(this);
        }
        if(node.getEmbed() != null)
        {
            node.getEmbed().apply(this);
        }
        if(node.getTextTail() != null)
        {
            node.getTextTail().apply(this);
        }
        outAMidtextTextTail(node);
    }

    public void inAMarkupMarkupEmbed(AMarkupMarkupEmbed node)
    {
        defaultIn(node);
    }

    public void outAMarkupMarkupEmbed(AMarkupMarkupEmbed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupMarkupEmbed(AMarkupMarkupEmbed node)
    {
        inAMarkupMarkupEmbed(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMultiple());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSingle() != null)
        {
            node.getSingle().apply(this);
        }
        outAMarkupMarkupEmbed(node);
    }

    public void inAMarkupExpressionEmbed(AMarkupExpressionEmbed node)
    {
        defaultIn(node);
    }

    public void outAMarkupExpressionEmbed(AMarkupExpressionEmbed node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMarkupExpressionEmbed(AMarkupExpressionEmbed node)
    {
        inAMarkupExpressionEmbed(node);
        {
            List<PMarkup> copy = new ArrayList<PMarkup>(node.getMarkup());
            for(PMarkup e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMarkupExpressionEmbed(node);
    }
}
