/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AAtWidthHeightAttribute extends PAttribute
{
    private TAtSign _atSign_;
    private TNatCon _w_;
    private TPercentSign _percentSign_;
    private TNatCon _h_;

    public AAtWidthHeightAttribute()
    {
        // Constructor
    }

    public AAtWidthHeightAttribute(
        @SuppressWarnings("hiding") TAtSign _atSign_,
        @SuppressWarnings("hiding") TNatCon _w_,
        @SuppressWarnings("hiding") TPercentSign _percentSign_,
        @SuppressWarnings("hiding") TNatCon _h_)
    {
        // Constructor
        setAtSign(_atSign_);

        setW(_w_);

        setPercentSign(_percentSign_);

        setH(_h_);

    }

    @Override
    public Object clone()
    {
        return new AAtWidthHeightAttribute(
            cloneNode(this._atSign_),
            cloneNode(this._w_),
            cloneNode(this._percentSign_),
            cloneNode(this._h_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAtWidthHeightAttribute(this);
    }

    public TAtSign getAtSign()
    {
        return this._atSign_;
    }

    public void setAtSign(TAtSign node)
    {
        if(this._atSign_ != null)
        {
            this._atSign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._atSign_ = node;
    }

    public TNatCon getW()
    {
        return this._w_;
    }

    public void setW(TNatCon node)
    {
        if(this._w_ != null)
        {
            this._w_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._w_ = node;
    }

    public TPercentSign getPercentSign()
    {
        return this._percentSign_;
    }

    public void setPercentSign(TPercentSign node)
    {
        if(this._percentSign_ != null)
        {
            this._percentSign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._percentSign_ = node;
    }

    public TNatCon getH()
    {
        return this._h_;
    }

    public void setH(TNatCon node)
    {
        if(this._h_ != null)
        {
            this._h_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._h_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._atSign_)
            + toString(this._w_)
            + toString(this._percentSign_)
            + toString(this._h_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._atSign_ == child)
        {
            this._atSign_ = null;
            return;
        }

        if(this._w_ == child)
        {
            this._w_ = null;
            return;
        }

        if(this._percentSign_ == child)
        {
            this._percentSign_ = null;
            return;
        }

        if(this._h_ == child)
        {
            this._h_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._atSign_ == oldChild)
        {
            setAtSign((TAtSign) newChild);
            return;
        }

        if(this._w_ == oldChild)
        {
            setW((TNatCon) newChild);
            return;
        }

        if(this._percentSign_ == oldChild)
        {
            setPercentSign((TPercentSign) newChild);
            return;
        }

        if(this._h_ == oldChild)
        {
            setH((TNatCon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
