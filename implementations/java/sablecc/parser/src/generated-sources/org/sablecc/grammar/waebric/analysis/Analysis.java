/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.analysis;

import org.sablecc.grammar.waebric.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAModules(AModules node);
    void caseAModule(AModule node);
    void caseASingleModuleId(ASingleModuleId node);
    void caseAMultipleModuleId(AMultipleModuleId node);
    void caseAFunctionModuleElement(AFunctionModuleElement node);
    void caseAImportModuleElement(AImportModuleElement node);
    void caseASiteModuleElement(ASiteModuleElement node);
    void caseAImport(AImport node);
    void caseASite(ASite node);
    void caseASingleMappings(ASingleMappings node);
    void caseAMultipleMappings(AMultipleMappings node);
    void caseAMapping(AMapping node);
    void caseADesignatorWithArgsMarkup(ADesignatorWithArgsMarkup node);
    void caseADesignatorMarkup(ADesignatorMarkup node);
    void caseADesignatorWithArgsMarkupNoShortMarkup(ADesignatorWithArgsMarkupNoShortMarkup node);
    void caseADesignator(ADesignator node);
    void caseANumberSignAttribute(ANumberSignAttribute node);
    void caseADotAttribute(ADotAttribute node);
    void caseADollarSignAttribute(ADollarSignAttribute node);
    void caseAColonAttribute(AColonAttribute node);
    void caseAAtWidthHeightAttribute(AAtWidthHeightAttribute node);
    void caseAAtWidthAttribute(AAtWidthAttribute node);
    void caseAArguments(AArguments node);
    void caseASingleArgumentList(ASingleArgumentList node);
    void caseAMultipleArgumentList(AMultipleArgumentList node);
    void caseAAssignArgument(AAssignArgument node);
    void caseAArgumentArgument(AArgumentArgument node);
    void caseANoPlusExpression(ANoPlusExpression node);
    void caseAPlusExpressionExpression(APlusExpressionExpression node);
    void caseAIdconExpressionNoPlus(AIdconExpressionNoPlus node);
    void caseATextExpressionNoPlus(ATextExpressionNoPlus node);
    void caseASymbolConExpressionNoPlus(ASymbolConExpressionNoPlus node);
    void caseANatConExpressionNoPlus(ANatConExpressionNoPlus node);
    void caseADotIdconExpressionNoPlus(ADotIdconExpressionNoPlus node);
    void caseAMultipleExpressionsExpressionNoPlus(AMultipleExpressionsExpressionNoPlus node);
    void caseAKeyValuePairsExpressionNoPlus(AKeyValuePairsExpressionNoPlus node);
    void caseASingleExpressions(ASingleExpressions node);
    void caseAMultipleExpressions(AMultipleExpressions node);
    void caseASingleKeyValuePairs(ASingleKeyValuePairs node);
    void caseAMultipleKeyValuePairs(AMultipleKeyValuePairs node);
    void caseAKeyValuePair(AKeyValuePair node);
    void caseAFunction(AFunction node);
    void caseAFormals(AFormals node);
    void caseASingleFormal(ASingleFormal node);
    void caseAMultipleFormal(AMultipleFormal node);
    void caseANoMarkupStatement(ANoMarkupStatement node);
    void caseAMarkupStatementStatement(AMarkupStatementStatement node);
    void caseAMarkupNoStatementStatement(AMarkupNoStatementStatement node);
    void caseAEachStatementNoMarkup(AEachStatementNoMarkup node);
    void caseAIfThenStatementNoMarkup(AIfThenStatementNoMarkup node);
    void caseAIfThenElseStatementNoMarkup(AIfThenElseStatementNoMarkup node);
    void caseANoShortIfStatementNoMarkup(ANoShortIfStatementNoMarkup node);
    void caseANoMarkupStatementNoShortIf(ANoMarkupStatementNoShortIf node);
    void caseAMarkupNoStatementStatementNoShortIf(AMarkupNoStatementStatementNoShortIf node);
    void caseAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node);
    void caseAMarkupSingleStatementMarkupNoStatement(AMarkupSingleStatementMarkupNoStatement node);
    void caseAMarkupMultipleStatementMarkupNoStatement(AMarkupMultipleStatementMarkupNoStatement node);
    void caseAMarkupExpressionStatementMarkupNoStatement(AMarkupExpressionStatementMarkupNoStatement node);
    void caseAEmbeddingStatementMarkupNoStatement(AEmbeddingStatementMarkupNoStatement node);
    void caseALetStatementNoMarkupNoShortIf(ALetStatementNoMarkupNoShortIf node);
    void caseABlockStatementNoMarkupNoShortIf(ABlockStatementNoMarkupNoShortIf node);
    void caseACommentStatementNoMarkupNoShortIf(ACommentStatementNoMarkupNoShortIf node);
    void caseAEchoExpressionStatementNoMarkupNoShortIf(AEchoExpressionStatementNoMarkupNoShortIf node);
    void caseAEchoEmbeddingStatementNoMarkupNoShortIf(AEchoEmbeddingStatementNoMarkupNoShortIf node);
    void caseACdataStatementNoMarkupNoShortIf(ACdataStatementNoMarkupNoShortIf node);
    void caseAYieldStatementNoMarkupNoShortIf(AYieldStatementNoMarkupNoShortIf node);
    void caseAExpressionAssignment(AExpressionAssignment node);
    void caseAStatementAssignment(AStatementAssignment node);
    void caseANoAndOrPredicate(ANoAndOrPredicate node);
    void caseAAndPredicatePredicate(AAndPredicatePredicate node);
    void caseAOrPredicatePredicate(AOrPredicatePredicate node);
    void caseAExpressionPredicateNoAndOr(AExpressionPredicateNoAndOr node);
    void caseAExpressionTypePredicateNoAndOr(AExpressionTypePredicateNoAndOr node);
    void caseANotPredicatePredicateNoAndOr(ANotPredicatePredicateNoAndOr node);
    void caseAListType(AListType node);
    void caseARecordType(ARecordType node);
    void caseAStringType(AStringType node);
    void caseAEmbedding(AEmbedding node);
    void caseAPosttextTextTail(APosttextTextTail node);
    void caseAMidtextTextTail(AMidtextTextTail node);
    void caseAMarkupMarkupEmbed(AMarkupMarkupEmbed node);
    void caseAMarkupExpressionEmbed(AMarkupExpressionEmbed node);

    void caseTModule(TModule node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTEach(TEach node);
    void caseTLet(TLet node);
    void caseTDef(TDef node);
    void caseTIn(TIn node);
    void caseTEnd(TEnd node);
    void caseTComment(TComment node);
    void caseTEcho(TEcho node);
    void caseTCdata(TCdata node);
    void caseTYield(TYield node);
    void caseTImport(TImport node);
    void caseTSite(TSite node);
    void caseTList(TList node);
    void caseTRecord(TRecord node);
    void caseTString(TString node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemiColon(TSemiColon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTCaret(TCaret node);
    void caseTNumberSign(TNumberSign node);
    void caseTDollarSign(TDollarSign node);
    void caseTAtSign(TAtSign node);
    void caseTPercentSign(TPercentSign node);
    void caseTQuestionMark(TQuestionMark node);
    void caseTExclamMark(TExclamMark node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTColon(TColon node);
    void caseTAssign(TAssign node);
    void caseTSlash(TSlash node);
    void caseTPlus(TPlus node);
    void caseTComments(TComments node);
    void caseTWhitespace(TWhitespace node);
    void caseTIdCon(TIdCon node);
    void caseTNatCon(TNatCon node);
    void caseTSymbolCon(TSymbolCon node);
    void caseTStrCon(TStrCon node);
    void caseTFilename(TFilename node);
    void caseTText(TText node);
    void caseTPreText(TPreText node);
    void caseTPostText(TPostText node);
    void caseTMidText(TMidText node);
    void caseEOF(EOF node);
}
