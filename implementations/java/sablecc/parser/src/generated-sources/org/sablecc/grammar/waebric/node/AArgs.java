/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.node;

import java.util.*;
import org.sablecc.grammar.waebric.analysis.*;

@SuppressWarnings("nls")
public final class AArgs extends PArgs
{
    private final LinkedList<PArgument> _argument_ = new LinkedList<PArgument>();

    public AArgs()
    {
        // Constructor
    }

    public AArgs(
        @SuppressWarnings("hiding") List<PArgument> _argument_)
    {
        // Constructor
        setArgument(_argument_);

    }

    @Override
    public Object clone()
    {
        return new AArgs(
            cloneList(this._argument_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgs(this);
    }

    public LinkedList<PArgument> getArgument()
    {
        return this._argument_;
    }

    public void setArgument(List<PArgument> list)
    {
        this._argument_.clear();
        this._argument_.addAll(list);
        for(PArgument e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argument_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argument_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PArgument> i = this._argument_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgument) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
