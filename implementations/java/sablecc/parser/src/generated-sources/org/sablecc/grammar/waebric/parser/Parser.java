/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.parser;

import org.sablecc.grammar.waebric.lexer.*;
import org.sablecc.grammar.waebric.node.*;
import org.sablecc.grammar.waebric.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAmodules1Modules */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAmodules2Modules */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAmodule1Module */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAmodule2Module */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce ASingleModuleId */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AMultipleModuleId */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AFunctionModuleElement */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AImportModuleElement */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce ASiteModuleElement */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AImport */
		    {
			ArrayList list = new9();
			push(goTo(4), list, false);
		    }
		    break;
                    case 10: /* reduce ASite */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce ASingleMappings */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AMultipleMappings */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AMapping */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce ADesignatorWithArgsMarkup */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce ADesignatorMarkup */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce ADesignatorWithArgsMarkupNoShortMarkup */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AAdesignator1Designator */
		    {
			ArrayList list = new17();
			push(goTo(10), list, false);
		    }
		    break;
                    case 18: /* reduce AAdesignator2Designator */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce ANumberSignAttribute */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce ADotAttribute */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce ADollarSignAttribute */
		    {
			ArrayList list = new21();
			push(goTo(11), list, false);
		    }
		    break;
                    case 22: /* reduce AColonAttribute */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce AAtWidthHeightAttribute */
		    {
			ArrayList list = new23();
			push(goTo(11), list, false);
		    }
		    break;
                    case 24: /* reduce AAtWidthAttribute */
		    {
			ArrayList list = new24();
			push(goTo(11), list, false);
		    }
		    break;
                    case 25: /* reduce AAarguments1Arguments */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce AAarguments2Arguments */
		    {
			ArrayList list = new26();
			push(goTo(12), list, false);
		    }
		    break;
                    case 27: /* reduce ASingleArgumentList */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce AMultipleArgumentList */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce AAssignArgument */
		    {
			ArrayList list = new29();
			push(goTo(14), list, false);
		    }
		    break;
                    case 30: /* reduce AArgumentArgument */
		    {
			ArrayList list = new30();
			push(goTo(14), list, false);
		    }
		    break;
                    case 31: /* reduce ANoPlusExpression */
		    {
			ArrayList list = new31();
			push(goTo(15), list, false);
		    }
		    break;
                    case 32: /* reduce APlusExpressionExpression */
		    {
			ArrayList list = new32();
			push(goTo(15), list, false);
		    }
		    break;
                    case 33: /* reduce AIdconExpressionNoPlus */
		    {
			ArrayList list = new33();
			push(goTo(16), list, false);
		    }
		    break;
                    case 34: /* reduce ATextExpressionNoPlus */
		    {
			ArrayList list = new34();
			push(goTo(16), list, false);
		    }
		    break;
                    case 35: /* reduce ASymbolConExpressionNoPlus */
		    {
			ArrayList list = new35();
			push(goTo(16), list, false);
		    }
		    break;
                    case 36: /* reduce ANatConExpressionNoPlus */
		    {
			ArrayList list = new36();
			push(goTo(16), list, false);
		    }
		    break;
                    case 37: /* reduce ADotIdconExpressionNoPlus */
		    {
			ArrayList list = new37();
			push(goTo(16), list, false);
		    }
		    break;
                    case 38: /* reduce AAmultipleexpressionsexpressionnoplus1ExpressionNoPlus */
		    {
			ArrayList list = new38();
			push(goTo(16), list, false);
		    }
		    break;
                    case 39: /* reduce AAmultipleexpressionsexpressionnoplus2ExpressionNoPlus */
		    {
			ArrayList list = new39();
			push(goTo(16), list, false);
		    }
		    break;
                    case 40: /* reduce AAkeyvaluepairsexpressionnoplus1ExpressionNoPlus */
		    {
			ArrayList list = new40();
			push(goTo(16), list, false);
		    }
		    break;
                    case 41: /* reduce AAkeyvaluepairsexpressionnoplus2ExpressionNoPlus */
		    {
			ArrayList list = new41();
			push(goTo(16), list, false);
		    }
		    break;
                    case 42: /* reduce ASingleExpressions */
		    {
			ArrayList list = new42();
			push(goTo(17), list, false);
		    }
		    break;
                    case 43: /* reduce AMultipleExpressions */
		    {
			ArrayList list = new43();
			push(goTo(17), list, false);
		    }
		    break;
                    case 44: /* reduce ASingleKeyValuePairs */
		    {
			ArrayList list = new44();
			push(goTo(18), list, false);
		    }
		    break;
                    case 45: /* reduce AMultipleKeyValuePairs */
		    {
			ArrayList list = new45();
			push(goTo(18), list, false);
		    }
		    break;
                    case 46: /* reduce AKeyValuePair */
		    {
			ArrayList list = new46();
			push(goTo(19), list, false);
		    }
		    break;
                    case 47: /* reduce AAfunction1Function */
		    {
			ArrayList list = new47();
			push(goTo(20), list, false);
		    }
		    break;
                    case 48: /* reduce AAfunction2Function */
		    {
			ArrayList list = new48();
			push(goTo(20), list, false);
		    }
		    break;
                    case 49: /* reduce AAfunction3Function */
		    {
			ArrayList list = new49();
			push(goTo(20), list, false);
		    }
		    break;
                    case 50: /* reduce AAfunction4Function */
		    {
			ArrayList list = new50();
			push(goTo(20), list, false);
		    }
		    break;
                    case 51: /* reduce AAformals1Formals */
		    {
			ArrayList list = new51();
			push(goTo(21), list, false);
		    }
		    break;
                    case 52: /* reduce AAformals2Formals */
		    {
			ArrayList list = new52();
			push(goTo(21), list, false);
		    }
		    break;
                    case 53: /* reduce ASingleFormal */
		    {
			ArrayList list = new53();
			push(goTo(22), list, false);
		    }
		    break;
                    case 54: /* reduce AMultipleFormal */
		    {
			ArrayList list = new54();
			push(goTo(22), list, false);
		    }
		    break;
                    case 55: /* reduce ANoMarkupStatement */
		    {
			ArrayList list = new55();
			push(goTo(23), list, false);
		    }
		    break;
                    case 56: /* reduce AMarkupStatementStatement */
		    {
			ArrayList list = new56();
			push(goTo(23), list, false);
		    }
		    break;
                    case 57: /* reduce AMarkupNoStatementStatement */
		    {
			ArrayList list = new57();
			push(goTo(23), list, false);
		    }
		    break;
                    case 58: /* reduce AEachStatementNoMarkup */
		    {
			ArrayList list = new58();
			push(goTo(24), list, false);
		    }
		    break;
                    case 59: /* reduce AIfThenStatementNoMarkup */
		    {
			ArrayList list = new59();
			push(goTo(24), list, false);
		    }
		    break;
                    case 60: /* reduce AIfThenElseStatementNoMarkup */
		    {
			ArrayList list = new60();
			push(goTo(24), list, false);
		    }
		    break;
                    case 61: /* reduce ANoShortIfStatementNoMarkup */
		    {
			ArrayList list = new61();
			push(goTo(24), list, false);
		    }
		    break;
                    case 62: /* reduce ANoMarkupStatementNoShortIf */
		    {
			ArrayList list = new62();
			push(goTo(25), list, false);
		    }
		    break;
                    case 63: /* reduce AMarkupNoStatementStatementNoShortIf */
		    {
			ArrayList list = new63();
			push(goTo(25), list, false);
		    }
		    break;
                    case 64: /* reduce AIfThenElseStatementNoShortIf */
		    {
			ArrayList list = new64();
			push(goTo(25), list, false);
		    }
		    break;
                    case 65: /* reduce AMarkupSingleStatementMarkupNoStatement */
		    {
			ArrayList list = new65();
			push(goTo(26), list, false);
		    }
		    break;
                    case 66: /* reduce AMarkupMultipleStatementMarkupNoStatement */
		    {
			ArrayList list = new66();
			push(goTo(26), list, false);
		    }
		    break;
                    case 67: /* reduce AMarkupExpressionStatementMarkupNoStatement */
		    {
			ArrayList list = new67();
			push(goTo(26), list, false);
		    }
		    break;
                    case 68: /* reduce AEmbeddingStatementMarkupNoStatement */
		    {
			ArrayList list = new68();
			push(goTo(26), list, false);
		    }
		    break;
                    case 69: /* reduce AAletstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new69();
			push(goTo(27), list, false);
		    }
		    break;
                    case 70: /* reduce AAletstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new70();
			push(goTo(27), list, false);
		    }
		    break;
                    case 71: /* reduce AAblockstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new71();
			push(goTo(27), list, false);
		    }
		    break;
                    case 72: /* reduce AAblockstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new72();
			push(goTo(27), list, false);
		    }
		    break;
                    case 73: /* reduce ACommentStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new73();
			push(goTo(27), list, false);
		    }
		    break;
                    case 74: /* reduce AEchoExpressionStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new74();
			push(goTo(27), list, false);
		    }
		    break;
                    case 75: /* reduce AEchoEmbeddingStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new75();
			push(goTo(27), list, false);
		    }
		    break;
                    case 76: /* reduce ACdataStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new76();
			push(goTo(27), list, false);
		    }
		    break;
                    case 77: /* reduce AYieldStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new77();
			push(goTo(27), list, false);
		    }
		    break;
                    case 78: /* reduce AExpressionAssignment */
		    {
			ArrayList list = new78();
			push(goTo(28), list, false);
		    }
		    break;
                    case 79: /* reduce AStatementAssignment */
		    {
			ArrayList list = new79();
			push(goTo(28), list, false);
		    }
		    break;
                    case 80: /* reduce ANoAndOrPredicate */
		    {
			ArrayList list = new80();
			push(goTo(29), list, false);
		    }
		    break;
                    case 81: /* reduce AAndPredicatePredicate */
		    {
			ArrayList list = new81();
			push(goTo(29), list, false);
		    }
		    break;
                    case 82: /* reduce AOrPredicatePredicate */
		    {
			ArrayList list = new82();
			push(goTo(29), list, false);
		    }
		    break;
                    case 83: /* reduce AExpressionPredicateNoAndOr */
		    {
			ArrayList list = new83();
			push(goTo(30), list, false);
		    }
		    break;
                    case 84: /* reduce AExpressionTypePredicateNoAndOr */
		    {
			ArrayList list = new84();
			push(goTo(30), list, false);
		    }
		    break;
                    case 85: /* reduce ANotPredicatePredicateNoAndOr */
		    {
			ArrayList list = new85();
			push(goTo(30), list, false);
		    }
		    break;
                    case 86: /* reduce AListType */
		    {
			ArrayList list = new86();
			push(goTo(31), list, false);
		    }
		    break;
                    case 87: /* reduce ARecordType */
		    {
			ArrayList list = new87();
			push(goTo(31), list, false);
		    }
		    break;
                    case 88: /* reduce AStringType */
		    {
			ArrayList list = new88();
			push(goTo(31), list, false);
		    }
		    break;
                    case 89: /* reduce AEmbedding */
		    {
			ArrayList list = new89();
			push(goTo(32), list, false);
		    }
		    break;
                    case 90: /* reduce APosttextTextTail */
		    {
			ArrayList list = new90();
			push(goTo(33), list, false);
		    }
		    break;
                    case 91: /* reduce AMidtextTextTail */
		    {
			ArrayList list = new91();
			push(goTo(33), list, false);
		    }
		    break;
                    case 92: /* reduce AAmarkupmarkupembed1Embed */
		    {
			ArrayList list = new92();
			push(goTo(34), list, false);
		    }
		    break;
                    case 93: /* reduce AAmarkupmarkupembed2Embed */
		    {
			ArrayList list = new93();
			push(goTo(34), list, false);
		    }
		    break;
                    case 94: /* reduce AAmarkupexpressionembed1Embed */
		    {
			ArrayList list = new94();
			push(goTo(34), list, false);
		    }
		    break;
                    case 95: /* reduce AAmarkupexpressionembed2Embed */
		    {
			ArrayList list = new95();
			push(goTo(34), list, false);
		    }
		    break;
                    case 96: /* reduce ATerminal$Module */
		    {
			ArrayList list = new96();
			push(goTo(35), list, true);
		    }
		    break;
                    case 97: /* reduce ANonTerminal$Module */
		    {
			ArrayList list = new97();
			push(goTo(35), list, true);
		    }
		    break;
                    case 98: /* reduce ATerminal$ModuleElement */
		    {
			ArrayList list = new98();
			push(goTo(36), list, true);
		    }
		    break;
                    case 99: /* reduce ANonTerminal$ModuleElement */
		    {
			ArrayList list = new99();
			push(goTo(36), list, true);
		    }
		    break;
                    case 100: /* reduce ATerminal$Attribute */
		    {
			ArrayList list = new100();
			push(goTo(37), list, true);
		    }
		    break;
                    case 101: /* reduce ANonTerminal$Attribute */
		    {
			ArrayList list = new101();
			push(goTo(37), list, true);
		    }
		    break;
                    case 102: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new102();
			push(goTo(38), list, true);
		    }
		    break;
                    case 103: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new103();
			push(goTo(38), list, true);
		    }
		    break;
                    case 104: /* reduce ATerminal$Markup */
		    {
			ArrayList list = new104();
			push(goTo(39), list, true);
		    }
		    break;
                    case 105: /* reduce ANonTerminal$Markup */
		    {
			ArrayList list = new105();
			push(goTo(39), list, true);
		    }
		    break;
                    case 106: /* reduce ATerminal$Assignment */
		    {
			ArrayList list = new106();
			push(goTo(40), list, true);
		    }
		    break;
                    case 107: /* reduce ANonTerminal$Assignment */
		    {
			ArrayList list = new107();
			push(goTo(40), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PModules node1 = (PModules) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAmodules1Modules */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PModules pmodulesNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pmodulesNode1 = new AModules(listNode2);
        }
	nodeList.add(pmodulesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAmodules2Modules */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModules pmodulesNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pmodulesNode1 = new AModules(listNode3);
        }
	nodeList.add(pmodulesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAmodule1Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TModule tmoduleNode2;
        PModuleId pmoduleidNode3;
        LinkedList listNode4 = new LinkedList();
        tmoduleNode2 = (TModule)nodeArrayList1.get(0);
        pmoduleidNode3 = (PModuleId)nodeArrayList2.get(0);
        {
            // Block
        }

        pmoduleNode1 = new AModule(tmoduleNode2, pmoduleidNode3, listNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAmodule2Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        TModule tmoduleNode2;
        PModuleId pmoduleidNode3;
        LinkedList listNode5 = new LinkedList();
        tmoduleNode2 = (TModule)nodeArrayList1.get(0);
        pmoduleidNode3 = (PModuleId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmoduleNode1 = new AModule(tmoduleNode2, pmoduleidNode3, listNode5);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ASingleModuleId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleId pmoduleidNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);

        pmoduleidNode1 = new ASingleModuleId(tidconNode2);
        }
	nodeList.add(pmoduleidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AMultipleModuleId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleId pmoduleidNode1;
        {
            // Block
        PModuleId pmoduleidNode2;
        TDot tdotNode3;
        TIdCon tidconNode4;
        pmoduleidNode2 = (PModuleId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidconNode4 = (TIdCon)nodeArrayList3.get(0);

        pmoduleidNode1 = new AMultipleModuleId(pmoduleidNode2, tdotNode3, tidconNode4);
        }
	nodeList.add(pmoduleidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AFunctionModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pmoduleelementNode1 = new AFunctionModuleElement(pfunctionNode2);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AImportModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        PImport pimportNode2;
        pimportNode2 = (PImport)nodeArrayList1.get(0);

        pmoduleelementNode1 = new AImportModuleElement(pimportNode2);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ASiteModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        PSite psiteNode2;
        psiteNode2 = (PSite)nodeArrayList1.get(0);

        pmoduleelementNode1 = new ASiteModuleElement(psiteNode2);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AImport */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PImport pimportNode1;
        {
            // Block
        TImport timportNode2;
        PModuleId pmoduleidNode3;
        timportNode2 = (TImport)nodeArrayList1.get(0);
        pmoduleidNode3 = (PModuleId)nodeArrayList2.get(0);

        pimportNode1 = new AImport(timportNode2, pmoduleidNode3);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ASite */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSite psiteNode1;
        {
            // Block
        TSite tsiteNode2;
        PMappings pmappingsNode3;
        TEnd tendNode4;
        tsiteNode2 = (TSite)nodeArrayList1.get(0);
        pmappingsNode3 = (PMappings)nodeArrayList2.get(0);
        tendNode4 = (TEnd)nodeArrayList3.get(0);

        psiteNode1 = new ASite(tsiteNode2, pmappingsNode3, tendNode4);
        }
	nodeList.add(psiteNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ASingleMappings */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMappings pmappingsNode1;
        {
            // Block
        PMapping pmappingNode2;
        pmappingNode2 = (PMapping)nodeArrayList1.get(0);

        pmappingsNode1 = new ASingleMappings(pmappingNode2);
        }
	nodeList.add(pmappingsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AMultipleMappings */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMappings pmappingsNode1;
        {
            // Block
        PMappings pmappingsNode2;
        TSemiColon tsemicolonNode3;
        PMapping pmappingNode4;
        pmappingsNode2 = (PMappings)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemiColon)nodeArrayList2.get(0);
        pmappingNode4 = (PMapping)nodeArrayList3.get(0);

        pmappingsNode1 = new AMultipleMappings(pmappingsNode2, tsemicolonNode3, pmappingNode4);
        }
	nodeList.add(pmappingsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AMapping */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMapping pmappingNode1;
        {
            // Block
        TFilename tfilenameNode2;
        TColon tcolonNode3;
        PMarkup pmarkupNode4;
        tfilenameNode2 = (TFilename)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pmarkupNode4 = (PMarkup)nodeArrayList3.get(0);

        pmappingNode1 = new AMapping(tfilenameNode2, tcolonNode3, pmarkupNode4);
        }
	nodeList.add(pmappingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ADesignatorWithArgsMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkup pmarkupNode1;
        {
            // Block
        PMarkupNoShortMarkup pmarkupnoshortmarkupNode2;
        pmarkupnoshortmarkupNode2 = (PMarkupNoShortMarkup)nodeArrayList1.get(0);

        pmarkupNode1 = new ADesignatorWithArgsMarkup(pmarkupnoshortmarkupNode2);
        }
	nodeList.add(pmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ADesignatorMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkup pmarkupNode1;
        {
            // Block
        PDesignator pdesignatorNode2;
        pdesignatorNode2 = (PDesignator)nodeArrayList1.get(0);

        pmarkupNode1 = new ADesignatorMarkup(pdesignatorNode2);
        }
	nodeList.add(pmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ADesignatorWithArgsMarkupNoShortMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkupNoShortMarkup pmarkupnoshortmarkupNode1;
        {
            // Block
        PDesignator pdesignatorNode2;
        PArguments pargumentsNode3;
        pdesignatorNode2 = (PDesignator)nodeArrayList1.get(0);
        pargumentsNode3 = (PArguments)nodeArrayList2.get(0);

        pmarkupnoshortmarkupNode1 = new ADesignatorWithArgsMarkupNoShortMarkup(pdesignatorNode2, pargumentsNode3);
        }
	nodeList.add(pmarkupnoshortmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAdesignator1Designator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDesignator pdesignatorNode1;
        {
            // Block
        TIdCon tidconNode2;
        LinkedList listNode3 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        {
            // Block
        }

        pdesignatorNode1 = new ADesignator(tidconNode2, listNode3);
        }
	nodeList.add(pdesignatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAdesignator2Designator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDesignator pdesignatorNode1;
        {
            // Block
        TIdCon tidconNode2;
        LinkedList listNode4 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdesignatorNode1 = new ADesignator(tidconNode2, listNode4);
        }
	nodeList.add(pdesignatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ANumberSignAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TNumberSign tnumbersignNode2;
        TIdCon tidconNode3;
        tnumbersignNode2 = (TNumberSign)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new ANumberSignAttribute(tnumbersignNode2, tidconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ADotAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TDot tdotNode2;
        TIdCon tidconNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new ADotAttribute(tdotNode2, tidconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ADollarSignAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TDollarSign tdollarsignNode2;
        TIdCon tidconNode3;
        tdollarsignNode2 = (TDollarSign)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new ADollarSignAttribute(tdollarsignNode2, tidconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AColonAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TColon tcolonNode2;
        TIdCon tidconNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new AColonAttribute(tcolonNode2, tidconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAtWidthHeightAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TAtSign tatsignNode2;
        TNatCon tnatconNode3;
        TPercentSign tpercentsignNode4;
        TNatCon tnatconNode5;
        tatsignNode2 = (TAtSign)nodeArrayList1.get(0);
        tnatconNode3 = (TNatCon)nodeArrayList2.get(0);
        tpercentsignNode4 = (TPercentSign)nodeArrayList3.get(0);
        tnatconNode5 = (TNatCon)nodeArrayList4.get(0);

        pattributeNode1 = new AAtWidthHeightAttribute(tatsignNode2, tnatconNode3, tpercentsignNode4, tnatconNode5);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAtWidthAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TAtSign tatsignNode2;
        TNatCon tnatconNode3;
        tatsignNode2 = (TAtSign)nodeArrayList1.get(0);
        tnatconNode3 = (TNatCon)nodeArrayList2.get(0);

        pattributeNode1 = new AAtWidthAttribute(tatsignNode2, tnatconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAarguments1Arguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        TLParen tlparenNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode4 = (TRParen)nodeArrayList2.get(0);

        pargumentsNode1 = new AArguments(tlparenNode2, null, trparenNode4);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAarguments2Arguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        TLParen tlparenNode2;
        PArgumentList pargumentlistNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pargumentlistNode3 = (PArgumentList)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pargumentsNode1 = new AArguments(tlparenNode2, pargumentlistNode3, trparenNode4);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ASingleArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PArgument pargumentNode2;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);

        pargumentlistNode1 = new ASingleArgumentList(pargumentNode2);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AMultipleArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentList pargumentlistNode1;
        {
            // Block
        PArgumentList pargumentlistNode2;
        TComma tcommaNode3;
        PArgument pargumentNode4;
        pargumentlistNode2 = (PArgumentList)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pargumentNode4 = (PArgument)nodeArrayList3.get(0);

        pargumentlistNode1 = new AMultipleArgumentList(pargumentlistNode2, tcommaNode3, pargumentNode4);
        }
	nodeList.add(pargumentlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAssignArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        TIdCon tidconNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pargumentNode1 = new AAssignArgument(tidconNode2, tassignNode3, pexpressionNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AArgumentArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentNode1 = new AArgumentArgument(pexpressionNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANoPlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpressionNoPlus pexpressionnoplusNode2;
        pexpressionnoplusNode2 = (PExpressionNoPlus)nodeArrayList1.get(0);

        pexpressionNode1 = new ANoPlusExpression(pexpressionnoplusNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce APlusExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpressionNoPlus pexpressionnoplusNode2;
        TPlus tplusNode3;
        PExpression pexpressionNode4;
        pexpressionnoplusNode2 = (PExpressionNoPlus)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpressionExpression(pexpressionnoplusNode2, tplusNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AIdconExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);

        pexpressionnoplusNode1 = new AIdconExpressionNoPlus(tidconNode2);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATextExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        pexpressionnoplusNode1 = new ATextExpressionNoPlus(ttextNode2);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASymbolConExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TSymbolCon tsymbolconNode2;
        tsymbolconNode2 = (TSymbolCon)nodeArrayList1.get(0);

        pexpressionnoplusNode1 = new ASymbolConExpressionNoPlus(tsymbolconNode2);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANatConExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TNatCon tnatconNode2;
        tnatconNode2 = (TNatCon)nodeArrayList1.get(0);

        pexpressionnoplusNode1 = new ANatConExpressionNoPlus(tnatconNode2);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ADotIdconExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        PExpressionNoPlus pexpressionnoplusNode2;
        TCaret tcaretNode3;
        TIdCon tidconNode4;
        pexpressionnoplusNode2 = (PExpressionNoPlus)nodeArrayList1.get(0);
        tcaretNode3 = (TCaret)nodeArrayList2.get(0);
        tidconNode4 = (TIdCon)nodeArrayList3.get(0);

        pexpressionnoplusNode1 = new ADotIdconExpressionNoPlus(pexpressionnoplusNode2, tcaretNode3, tidconNode4);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAmultipleexpressionsexpressionnoplus1ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList2.get(0);

        pexpressionnoplusNode1 = new AMultipleExpressionsExpressionNoPlus(tlbracketNode2, null, trbracketNode4);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAmultipleexpressionsexpressionnoplus2ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        PExpressions pexpressionsNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        pexpressionsNode3 = (PExpressions)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pexpressionnoplusNode1 = new AMultipleExpressionsExpressionNoPlus(tlbracketNode2, pexpressionsNode3, trbracketNode4);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAkeyvaluepairsexpressionnoplus1ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pexpressionnoplusNode1 = new AKeyValuePairsExpressionNoPlus(tlbraceNode2, null, trbraceNode4);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAkeyvaluepairsexpressionnoplus2ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressionNoPlus pexpressionnoplusNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        PKeyValuePairs pkeyvaluepairsNode3;
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        pkeyvaluepairsNode3 = (PKeyValuePairs)nodeArrayList2.get(0);
        trbraceNode4 = (TRBrace)nodeArrayList3.get(0);

        pexpressionnoplusNode1 = new AKeyValuePairsExpressionNoPlus(tlbraceNode2, pkeyvaluepairsNode3, trbraceNode4);
        }
	nodeList.add(pexpressionnoplusNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ASingleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressions pexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pexpressionsNode1 = new ASingleExpressions(pexpressionNode2);
        }
	nodeList.add(pexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AMultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpressions pexpressionsNode1;
        {
            // Block
        PExpressions pexpressionsNode2;
        TComma tcommaNode3;
        PExpression pexpressionNode4;
        pexpressionsNode2 = (PExpressions)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionsNode1 = new AMultipleExpressions(pexpressionsNode2, tcommaNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ASingleKeyValuePairs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeyValuePairs pkeyvaluepairsNode1;
        {
            // Block
        PKeyValuePair pkeyvaluepairNode2;
        pkeyvaluepairNode2 = (PKeyValuePair)nodeArrayList1.get(0);

        pkeyvaluepairsNode1 = new ASingleKeyValuePairs(pkeyvaluepairNode2);
        }
	nodeList.add(pkeyvaluepairsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AMultipleKeyValuePairs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeyValuePairs pkeyvaluepairsNode1;
        {
            // Block
        PKeyValuePairs pkeyvaluepairsNode2;
        TComma tcommaNode3;
        PKeyValuePair pkeyvaluepairNode4;
        pkeyvaluepairsNode2 = (PKeyValuePairs)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pkeyvaluepairNode4 = (PKeyValuePair)nodeArrayList3.get(0);

        pkeyvaluepairsNode1 = new AMultipleKeyValuePairs(pkeyvaluepairsNode2, tcommaNode3, pkeyvaluepairNode4);
        }
	nodeList.add(pkeyvaluepairsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AKeyValuePair */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PKeyValuePair pkeyvaluepairNode1;
        {
            // Block
        TIdCon tidconNode2;
        TColon tcolonNode3;
        PExpression pexpressionNode4;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pkeyvaluepairNode1 = new AKeyValuePair(tidconNode2, tcolonNode3, pexpressionNode4);
        }
	nodeList.add(pkeyvaluepairNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TDef tdefNode2;
        TIdCon tidconNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        TEnd tendNode6;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);
        {
            // Block
        }
        tendNode6 = (TEnd)nodeArrayList3.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidconNode3, null, listNode5, tendNode6);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TDef tdefNode2;
        TIdCon tidconNode3;
        PFormals pformalsNode4;
        LinkedList listNode5 = new LinkedList();
        TEnd tendNode6;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);
        pformalsNode4 = (PFormals)nodeArrayList3.get(0);
        {
            // Block
        }
        tendNode6 = (TEnd)nodeArrayList4.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidconNode3, pformalsNode4, listNode5, tendNode6);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAfunction3Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TDef tdefNode2;
        TIdCon tidconNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        TEnd tendNode7;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendNode7 = (TEnd)nodeArrayList4.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidconNode3, null, listNode6, tendNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAfunction4Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TDef tdefNode2;
        TIdCon tidconNode3;
        PFormals pformalsNode4;
        LinkedList listNode6 = new LinkedList();
        TEnd tendNode7;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList2.get(0);
        pformalsNode4 = (PFormals)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendNode7 = (TEnd)nodeArrayList5.get(0);

        pfunctionNode1 = new AFunction(tdefNode2, tidconNode3, pformalsNode4, listNode6, tendNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAformals1Formals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        TLParen tlparenNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        trparenNode4 = (TRParen)nodeArrayList2.get(0);

        pformalsNode1 = new AFormals(tlparenNode2, null, trparenNode4);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAformals2Formals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        TLParen tlparenNode2;
        PFormal pformalNode3;
        TRParen trparenNode4;
        tlparenNode2 = (TLParen)nodeArrayList1.get(0);
        pformalNode3 = (PFormal)nodeArrayList2.get(0);
        trparenNode4 = (TRParen)nodeArrayList3.get(0);

        pformalsNode1 = new AFormals(tlparenNode2, pformalNode3, trparenNode4);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ASingleFormal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);

        pformalNode1 = new ASingleFormal(tidconNode2);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AMultipleFormal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PFormal pformalNode2;
        TComma tcommaNode3;
        TIdCon tidconNode4;
        pformalNode2 = (PFormal)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        tidconNode4 = (TIdCon)nodeArrayList3.get(0);

        pformalNode1 = new AMultipleFormal(pformalNode2, tcommaNode3, tidconNode4);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce ANoMarkupStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PStatementNoMarkup pstatementnomarkupNode2;
        pstatementnomarkupNode2 = (PStatementNoMarkup)nodeArrayList1.get(0);

        pstatementNode1 = new ANoMarkupStatement(pstatementnomarkupNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AMarkupStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PStatementNoMarkup pstatementnomarkupNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pstatementnomarkupNode4 = (PStatementNoMarkup)nodeArrayList2.get(0);

        pstatementNode1 = new AMarkupStatementStatement(listNode3, pstatementnomarkupNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AMarkupNoStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PStatementMarkupNoStatement pstatementmarkupnostatementNode2;
        pstatementmarkupnostatementNode2 = (PStatementMarkupNoStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AMarkupNoStatementStatement(pstatementmarkupnostatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AEachStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkup pstatementnomarkupNode1;
        {
            // Block
        TEach teachNode2;
        TLParen tlparenNode3;
        TIdCon tidconNode4;
        TColon tcolonNode5;
        PExpression pexpressionNode6;
        TRParen trparenNode7;
        PStatement pstatementNode8;
        teachNode2 = (TEach)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        tidconNode4 = (TIdCon)nodeArrayList3.get(0);
        tcolonNode5 = (TColon)nodeArrayList4.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList5.get(0);
        trparenNode7 = (TRParen)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pstatementnomarkupNode1 = new AEachStatementNoMarkup(teachNode2, tlparenNode3, tidconNode4, tcolonNode5, pexpressionNode6, trparenNode7, pstatementNode8);
        }
	nodeList.add(pstatementnomarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AIfThenStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkup pstatementnomarkupNode1;
        {
            // Block
        TIf tifNode2;
        TLParen tlparenNode3;
        PPredicate ppredicateNode4;
        TRParen trparenNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        ppredicateNode4 = (PPredicate)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementnomarkupNode1 = new AIfThenStatementNoMarkup(tifNode2, tlparenNode3, ppredicateNode4, trparenNode5, pstatementNode6);
        }
	nodeList.add(pstatementnomarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AIfThenElseStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkup pstatementnomarkupNode1;
        {
            // Block
        TIf tifNode2;
        TLParen tlparenNode3;
        PPredicate ppredicateNode4;
        TRParen trparenNode5;
        PStatementNoShortIf pstatementnoshortifNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        ppredicateNode4 = (PPredicate)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        pstatementnoshortifNode6 = (PStatementNoShortIf)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pstatementnomarkupNode1 = new AIfThenElseStatementNoMarkup(tifNode2, tlparenNode3, ppredicateNode4, trparenNode5, pstatementnoshortifNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pstatementnomarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ANoShortIfStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkup pstatementnomarkupNode1;
        {
            // Block
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode2;
        pstatementnomarkupnoshortifNode2 = (PStatementNoMarkupNoShortIf)nodeArrayList1.get(0);

        pstatementnomarkupNode1 = new ANoShortIfStatementNoMarkup(pstatementnomarkupnoshortifNode2);
        }
	nodeList.add(pstatementnomarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ANoMarkupStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode2;
        pstatementnomarkupnoshortifNode2 = (PStatementNoMarkupNoShortIf)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new ANoMarkupStatementNoShortIf(pstatementnomarkupnoshortifNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AMarkupNoStatementStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PStatementMarkupNoStatement pstatementmarkupnostatementNode2;
        pstatementmarkupnostatementNode2 = (PStatementMarkupNoStatement)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new AMarkupNoStatementStatementNoShortIf(pstatementmarkupnostatementNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AIfThenElseStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        TIf tifNode2;
        TLParen tlparenNode3;
        PPredicate ppredicateNode4;
        TRParen trparenNode5;
        PStatementNoShortIf pstatementnoshortifNode6;
        TElse telseNode7;
        PStatementNoShortIf pstatementnoshortifNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLParen)nodeArrayList2.get(0);
        ppredicateNode4 = (PPredicate)nodeArrayList3.get(0);
        trparenNode5 = (TRParen)nodeArrayList4.get(0);
        pstatementnoshortifNode6 = (PStatementNoShortIf)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementnoshortifNode8 = (PStatementNoShortIf)nodeArrayList7.get(0);

        pstatementnoshortifNode1 = new AIfThenElseStatementNoShortIf(tifNode2, tlparenNode3, ppredicateNode4, trparenNode5, pstatementnoshortifNode6, telseNode7, pstatementnoshortifNode8);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AMarkupSingleStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementMarkupNoStatement pstatementmarkupnostatementNode1;
        {
            // Block
        PMarkup pmarkupNode2;
        TSemiColon tsemicolonNode3;
        pmarkupNode2 = (PMarkup)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemiColon)nodeArrayList2.get(0);

        pstatementmarkupnostatementNode1 = new AMarkupSingleStatementMarkupNoStatement(pmarkupNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementmarkupnostatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AMarkupMultipleStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementMarkupNoStatement pstatementmarkupnostatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PMarkupNoShortMarkup pmarkupnoshortmarkupNode4;
        TSemiColon tsemicolonNode5;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmarkupnoshortmarkupNode4 = (PMarkupNoShortMarkup)nodeArrayList2.get(0);
        tsemicolonNode5 = (TSemiColon)nodeArrayList3.get(0);

        pstatementmarkupnostatementNode1 = new AMarkupMultipleStatementMarkupNoStatement(listNode3, pmarkupnoshortmarkupNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementmarkupnostatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AMarkupExpressionStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementMarkupNoStatement pstatementmarkupnostatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        TSemiColon tsemicolonNode5;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode5 = (TSemiColon)nodeArrayList3.get(0);

        pstatementmarkupnostatementNode1 = new AMarkupExpressionStatementMarkupNoStatement(listNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementmarkupnostatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AEmbeddingStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementMarkupNoStatement pstatementmarkupnostatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PEmbedding pembeddingNode4;
        TSemiColon tsemicolonNode5;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pembeddingNode4 = (PEmbedding)nodeArrayList2.get(0);
        tsemicolonNode5 = (TSemiColon)nodeArrayList3.get(0);

        pstatementmarkupnostatementNode1 = new AEmbeddingStatementMarkupNoStatement(listNode3, pembeddingNode4, tsemicolonNode5);
        }
	nodeList.add(pstatementmarkupnostatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAletstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TLet tletNode2;
        LinkedList listNode4 = new LinkedList();
        TIn tinNode5;
        LinkedList listNode6 = new LinkedList();
        TEnd tendNode7;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tinNode5 = (TIn)nodeArrayList3.get(0);
        {
            // Block
        }
        tendNode7 = (TEnd)nodeArrayList4.get(0);

        pstatementnomarkupnoshortifNode1 = new ALetStatementNoMarkupNoShortIf(tletNode2, listNode4, tinNode5, listNode6, tendNode7);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AAletstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TLet tletNode2;
        LinkedList listNode4 = new LinkedList();
        TIn tinNode5;
        LinkedList listNode7 = new LinkedList();
        TEnd tendNode8;
        tletNode2 = (TLet)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tinNode5 = (TIn)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tendNode8 = (TEnd)nodeArrayList5.get(0);

        pstatementnomarkupnoshortifNode1 = new ALetStatementNoMarkupNoShortIf(tletNode2, listNode4, tinNode5, listNode7, tendNode8);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AAblockstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pstatementnomarkupnoshortifNode1 = new ABlockStatementNoMarkupNoShortIf(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAblockstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pstatementnomarkupnoshortifNode1 = new ABlockStatementNoMarkupNoShortIf(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ACommentStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TComment tcommentNode2;
        TStrCon tstrconNode3;
        TSemiColon tsemicolonNode4;
        tcommentNode2 = (TComment)nodeArrayList1.get(0);
        tstrconNode3 = (TStrCon)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemiColon)nodeArrayList3.get(0);

        pstatementnomarkupnoshortifNode1 = new ACommentStatementNoMarkupNoShortIf(tcommentNode2, tstrconNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AEchoExpressionStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TEcho techoNode2;
        PExpression pexpressionNode3;
        TSemiColon tsemicolonNode4;
        techoNode2 = (TEcho)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemiColon)nodeArrayList3.get(0);

        pstatementnomarkupnoshortifNode1 = new AEchoExpressionStatementNoMarkupNoShortIf(techoNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AEchoEmbeddingStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TEcho techoNode2;
        PEmbedding pembeddingNode3;
        TSemiColon tsemicolonNode4;
        techoNode2 = (TEcho)nodeArrayList1.get(0);
        pembeddingNode3 = (PEmbedding)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemiColon)nodeArrayList3.get(0);

        pstatementnomarkupnoshortifNode1 = new AEchoEmbeddingStatementNoMarkupNoShortIf(techoNode2, pembeddingNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ACdataStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TCdata tcdataNode2;
        PExpression pexpressionNode3;
        TSemiColon tsemicolonNode4;
        tcdataNode2 = (TCdata)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemiColon)nodeArrayList3.get(0);

        pstatementnomarkupnoshortifNode1 = new ACdataStatementNoMarkupNoShortIf(tcdataNode2, pexpressionNode3, tsemicolonNode4);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AYieldStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatementNoMarkupNoShortIf pstatementnomarkupnoshortifNode1;
        {
            // Block
        TYield tyieldNode2;
        TSemiColon tsemicolonNode3;
        tyieldNode2 = (TYield)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemiColon)nodeArrayList2.get(0);

        pstatementnomarkupnoshortifNode1 = new AYieldStatementNoMarkupNoShortIf(tyieldNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementnomarkupnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AExpressionAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdCon tidconNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSemiColon tsemicolonNode5;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemiColon)nodeArrayList4.get(0);

        passignmentNode1 = new AExpressionAssignment(tidconNode2, tassignNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AStatementAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdCon tidconNode2;
        PFormals pformalsNode3;
        TAssign tassignNode4;
        PStatement pstatementNode5;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        pformalsNode3 = (PFormals)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        passignmentNode1 = new AStatementAssignment(tidconNode2, pformalsNode3, tassignNode4, pstatementNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ANoAndOrPredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicateNoAndOr ppredicatenoandorNode2;
        ppredicatenoandorNode2 = (PPredicateNoAndOr)nodeArrayList1.get(0);

        ppredicateNode1 = new ANoAndOrPredicate(ppredicatenoandorNode2);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AAndPredicatePredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicateNoAndOr ppredicatenoandorNode2;
        TAnd tandNode3;
        PPredicate ppredicateNode4;
        ppredicatenoandorNode2 = (PPredicateNoAndOr)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        ppredicateNode4 = (PPredicate)nodeArrayList3.get(0);

        ppredicateNode1 = new AAndPredicatePredicate(ppredicatenoandorNode2, tandNode3, ppredicateNode4);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AOrPredicatePredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicateNoAndOr ppredicatenoandorNode2;
        TOr torNode3;
        PExpression pexpressionNode4;
        ppredicatenoandorNode2 = (PPredicateNoAndOr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        ppredicateNode1 = new AOrPredicatePredicate(ppredicatenoandorNode2, torNode3, pexpressionNode4);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AExpressionPredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicateNoAndOr ppredicatenoandorNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        ppredicatenoandorNode1 = new AExpressionPredicateNoAndOr(pexpressionNode2);
        }
	nodeList.add(ppredicatenoandorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AExpressionTypePredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicateNoAndOr ppredicatenoandorNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        TQuestionMark tquestionmarkNode5;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);
        tquestionmarkNode5 = (TQuestionMark)nodeArrayList4.get(0);

        ppredicatenoandorNode1 = new AExpressionTypePredicateNoAndOr(pexpressionNode2, tcolonNode3, ptypeNode4, tquestionmarkNode5);
        }
	nodeList.add(ppredicatenoandorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ANotPredicatePredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicateNoAndOr ppredicatenoandorNode1;
        {
            // Block
        TExclamMark texclammarkNode2;
        PPredicateNoAndOr ppredicatenoandorNode3;
        texclammarkNode2 = (TExclamMark)nodeArrayList1.get(0);
        ppredicatenoandorNode3 = (PPredicateNoAndOr)nodeArrayList2.get(0);

        ppredicatenoandorNode1 = new ANotPredicatePredicateNoAndOr(texclammarkNode2, ppredicatenoandorNode3);
        }
	nodeList.add(ppredicatenoandorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AListType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TList tlistNode2;
        tlistNode2 = (TList)nodeArrayList1.get(0);

        ptypeNode1 = new AListType(tlistNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ARecordType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TRecord trecordNode2;
        trecordNode2 = (TRecord)nodeArrayList1.get(0);

        ptypeNode1 = new ARecordType(trecordNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AEmbedding */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbedding pembeddingNode1;
        {
            // Block
        TPreText tpretextNode2;
        PEmbed pembedNode3;
        PTextTail ptexttailNode4;
        tpretextNode2 = (TPreText)nodeArrayList1.get(0);
        pembedNode3 = (PEmbed)nodeArrayList2.get(0);
        ptexttailNode4 = (PTextTail)nodeArrayList3.get(0);

        pembeddingNode1 = new AEmbedding(tpretextNode2, pembedNode3, ptexttailNode4);
        }
	nodeList.add(pembeddingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce APosttextTextTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTextTail ptexttailNode1;
        {
            // Block
        TPostText tposttextNode2;
        tposttextNode2 = (TPostText)nodeArrayList1.get(0);

        ptexttailNode1 = new APosttextTextTail(tposttextNode2);
        }
	nodeList.add(ptexttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce AMidtextTextTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTextTail ptexttailNode1;
        {
            // Block
        TMidText tmidtextNode2;
        PEmbed pembedNode3;
        PTextTail ptexttailNode4;
        tmidtextNode2 = (TMidText)nodeArrayList1.get(0);
        pembedNode3 = (PEmbed)nodeArrayList2.get(0);
        ptexttailNode4 = (PTextTail)nodeArrayList3.get(0);

        ptexttailNode1 = new AMidtextTextTail(tmidtextNode2, pembedNode3, ptexttailNode4);
        }
	nodeList.add(ptexttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AAmarkupmarkupembed1Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PMarkupNoShortMarkup pmarkupnoshortmarkupNode3;
        {
            // Block
        }
        pmarkupnoshortmarkupNode3 = (PMarkupNoShortMarkup)nodeArrayList1.get(0);

        pembedNode1 = new AMarkupMarkupEmbed(listNode2, pmarkupnoshortmarkupNode3);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AAmarkupmarkupembed2Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PMarkupNoShortMarkup pmarkupnoshortmarkupNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmarkupnoshortmarkupNode4 = (PMarkupNoShortMarkup)nodeArrayList2.get(0);

        pembedNode1 = new AMarkupMarkupEmbed(listNode3, pmarkupnoshortmarkupNode4);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AAmarkupexpressionembed1Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PExpression pexpressionNode3;
        {
            // Block
        }
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);

        pembedNode1 = new AMarkupExpressionEmbed(listNode2, pexpressionNode3);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AAmarkupexpressionembed2Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pembedNode1 = new AMarkupExpressionEmbed(listNode3, pexpressionNode4);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ATerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PModule pmoduleNode1;
        pmoduleNode1 = (PModule)nodeArrayList1.get(0);
	if(pmoduleNode1 != null)
	{
	  listNode2.add(pmoduleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ANonTerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PModule pmoduleNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduleNode2 != null)
	{
	  listNode3.add(pmoduleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ATerminal$ModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PModuleElement pmoduleelementNode1;
        pmoduleelementNode1 = (PModuleElement)nodeArrayList1.get(0);
	if(pmoduleelementNode1 != null)
	{
	  listNode2.add(pmoduleelementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ANonTerminal$ModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PModuleElement pmoduleelementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoduleelementNode2 = (PModuleElement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduleelementNode2 != null)
	{
	  listNode3.add(pmoduleelementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ATerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAttribute pattributeNode1;
        pattributeNode1 = (PAttribute)nodeArrayList1.get(0);
	if(pattributeNode1 != null)
	{
	  listNode2.add(pattributeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ANonTerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAttribute pattributeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pattributeNode2 = (PAttribute)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pattributeNode2 != null)
	{
	  listNode3.add(pattributeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ATerminal$Markup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMarkup pmarkupNode1;
        pmarkupNode1 = (PMarkup)nodeArrayList1.get(0);
	if(pmarkupNode1 != null)
	{
	  listNode2.add(pmarkupNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ANonTerminal$Markup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMarkup pmarkupNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmarkupNode2 = (PMarkup)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmarkupNode2 != null)
	{
	  listNode3.add(pmarkupNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce ATerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAssignment passignmentNode1;
        passignmentNode1 = (PAssignment)nodeArrayList1.get(0);
	if(passignmentNode1 != null)
	{
	  listNode2.add(passignmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce ANonTerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAssignment passignmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        passignmentNode2 = (PAssignment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(passignmentNode2 != null)
	{
	  listNode3.add(passignmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {39, SHIFT, 5}, },
			{{-1, ERROR, 2}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 2}, {5, SHIFT, 8}, {12, SHIFT, 9}, {13, SHIFT, 10}, {25, SHIFT, 11}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 8}, {39, SHIFT, 17}, },
			{{-1, ERROR, 9}, {39, SHIFT, 5}, },
			{{-1, ERROR, 10}, {43, SHIFT, 19}, },
			{{-1, ERROR, 11}, {39, SHIFT, 22}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 3}, {5, SHIFT, 8}, {12, SHIFT, 9}, {13, SHIFT, 10}, },
			{{-1, ERROR, 17}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {17, SHIFT, 32}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 9}, {25, SHIFT, 11}, },
			{{-1, ERROR, 19}, {35, SHIFT, 45}, },
			{{-1, ERROR, 20}, {7, SHIFT, 46}, {23, SHIFT, 47}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 24}, {17, SHIFT, 48}, },
			{{-1, ERROR, 25}, {17, SHIFT, 49}, },
			{{-1, ERROR, 26}, {39, SHIFT, 50}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 28}, {42, SHIFT, 53}, },
			{{-1, ERROR, 29}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, {45, SHIFT, 60}, },
			{{-1, ERROR, 30}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 31}, {23, SHIFT, 65}, },
			{{-1, ERROR, 32}, {18, SHIFT, 66}, {39, SHIFT, 67}, },
			{{-1, ERROR, 33}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {20, SHIFT, 69}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 17}, {25, SHIFT, 71}, {27, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {35, SHIFT, 75}, },
			{{-1, REDUCE, 104}, {23, SHIFT, 78}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, {17, SHIFT, 79}, },
			{{-1, ERROR, 38}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 81}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 43}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 83}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, ERROR, 44}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 85}, {21, SHIFT, 55}, {39, SHIFT, 86}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, {45, SHIFT, 60}, },
			{{-1, ERROR, 45}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 47}, {43, SHIFT, 19}, },
			{{-1, ERROR, 48}, {19, SHIFT, 54}, {21, SHIFT, 55}, {32, SHIFT, 94}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 49}, {39, SHIFT, 98}, },
			{{-1, ERROR, 50}, {17, SHIFT, 32}, {36, SHIFT, 99}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 52}, {6, SHIFT, 101}, {39, SHIFT, 50}, },
			{{-1, ERROR, 53}, {23, SHIFT, 103}, },
			{{-1, ERROR, 54}, {20, SHIFT, 104}, {39, SHIFT, 105}, },
			{{-1, ERROR, 55}, {19, SHIFT, 54}, {21, SHIFT, 55}, {22, SHIFT, 108}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 60}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 86}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 61}, {23, SHIFT, 116}, },
			{{-1, REDUCE, 31}, {26, SHIFT, 117}, {38, SHIFT, 118}, },
			{{-1, ERROR, 63}, {23, SHIFT, 119}, },
			{{-1, ERROR, 64}, {23, SHIFT, 120}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 68}, {18, SHIFT, 121}, {24, SHIFT, 122}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 70}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {20, SHIFT, 123}, {39, SHIFT, 34}, },
			{{-1, ERROR, 71}, {39, SHIFT, 124}, },
			{{-1, ERROR, 72}, {39, SHIFT, 125}, },
			{{-1, ERROR, 73}, {39, SHIFT, 126}, },
			{{-1, ERROR, 74}, {40, SHIFT, 127}, },
			{{-1, ERROR, 75}, {39, SHIFT, 128}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 18}, {25, SHIFT, 71}, {27, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {35, SHIFT, 75}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 79}, {18, SHIFT, 130}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 131}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 82}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 135}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 85}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {20, SHIFT, 136}, {39, SHIFT, 137}, },
			{{-1, REDUCE, 17}, {23, REDUCE, 33}, {25, SHIFT, 71}, {26, REDUCE, 33}, {27, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {35, SHIFT, 75}, {38, REDUCE, 33}, {46, REDUCE, 33}, {47, REDUCE, 33}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 14}, {23, SHIFT, 138}, },
			{{-1, ERROR, 89}, {23, SHIFT, 139}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 91}, {23, SHIFT, 140}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 94}, {19, SHIFT, 54}, {21, SHIFT, 55}, {32, SHIFT, 94}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 83}, {35, SHIFT, 142}, },
			{{-1, ERROR, 96}, {18, SHIFT, 143}, },
			{{-1, REDUCE, 80}, {33, SHIFT, 144}, {34, SHIFT, 145}, },
			{{-1, ERROR, 98}, {35, SHIFT, 146}, },
			{{-1, ERROR, 99}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 100}, {36, SHIFT, 148}, },
			{{-1, ERROR, 101}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 149}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 105}, {35, SHIFT, 151}, },
			{{-1, ERROR, 106}, {20, SHIFT, 152}, {24, SHIFT, 153}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 110}, {22, SHIFT, 154}, {24, SHIFT, 155}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 14}, {46, REDUCE, 92}, {47, REDUCE, 92}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 114}, {46, SHIFT, 156}, {47, SHIFT, 157}, },
			{{-1, ERROR, 115}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 86}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 117}, {39, SHIFT, 161}, },
			{{-1, ERROR, 118}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 122}, {39, SHIFT, 163}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 24}, {30, SHIFT, 164}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 33}, {36, SHIFT, 165}, },
			{{-1, ERROR, 132}, {18, SHIFT, 166}, {24, SHIFT, 167}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 71}, {23, REDUCE, 40}, {26, REDUCE, 40}, {38, REDUCE, 40}, },
			{{-1, REDUCE, 17}, {25, SHIFT, 71}, {27, SHIFT, 72}, {28, SHIFT, 73}, {29, SHIFT, 74}, {35, SHIFT, 168}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 142}, {14, SHIFT, 169}, {15, SHIFT, 170}, {16, SHIFT, 171}, },
			{{-1, ERROR, 143}, {1, SHIFT, 173}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, ERROR, 144}, {19, SHIFT, 54}, {21, SHIFT, 55}, {32, SHIFT, 94}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 145}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 146}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 147}, {23, SHIFT, 181}, },
			{{-1, ERROR, 148}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 150}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {7, SHIFT, 183}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, ERROR, 151}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 153}, {39, SHIFT, 105}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 155}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 157}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 86}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 14}, {46, REDUCE, 93}, {47, REDUCE, 93}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 164}, {40, SHIFT, 188}, },
			{{-1, ERROR, 165}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 167}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 131}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 168}, {19, SHIFT, 54}, {21, SHIFT, 55}, {39, SHIFT, 191}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 172}, {31, SHIFT, 192}, },
			{{-1, ERROR, 173}, {17, SHIFT, 193}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 175}, {2, SHIFT, 194}, },
			{{-1, REDUCE, 57}, {2, REDUCE, 63}, },
			{{-1, REDUCE, 61}, {2, REDUCE, 62}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 180}, {18, SHIFT, 195}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 187}, {46, SHIFT, 156}, {47, SHIFT, 157}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 22}, {20, REDUCE, 33}, {24, REDUCE, 33}, {26, REDUCE, 33}, {38, REDUCE, 33}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 193}, {19, SHIFT, 54}, {21, SHIFT, 55}, {32, SHIFT, 94}, {39, SHIFT, 56}, {40, SHIFT, 57}, {41, SHIFT, 58}, {44, SHIFT, 59}, },
			{{-1, ERROR, 194}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, ERROR, 195}, {1, SHIFT, 24}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 197}, {18, SHIFT, 200}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 200}, {1, SHIFT, 173}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, ERROR, 201}, {2, SHIFT, 202}, },
			{{-1, ERROR, 202}, {1, SHIFT, 173}, {3, SHIFT, 25}, {4, SHIFT, 26}, {8, SHIFT, 28}, {9, SHIFT, 29}, {10, SHIFT, 30}, {11, SHIFT, 31}, {19, SHIFT, 33}, {39, SHIFT, 34}, },
			{{-1, REDUCE, 64}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 7}, },
			{{-1, 6}, {9, 18}, },
			{{-1, 12}, {16, 23}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 20}, },
			{{-1, 21}, {47, 93}, },
			{{-1, 35}, {44, 87}, {45, 92}, {60, 111}, {115, 87}, {157, 111}, },
			{{-1, 36}, {44, 88}, {60, 112}, {115, 159}, {157, 112}, },
			{{-1, 37}, },
			{{-1, 76}, {77, 129}, },
			{{-1, 80}, },
			{{-1, 132}, },
			{{-1, 133}, {167, 190}, },
			{{-1, 95}, {29, 61}, {30, 64}, {44, 89}, {55, 109}, {60, 113}, {79, 134}, {99, 147}, {115, 160}, {118, 162}, {145, 179}, {146, 180}, {151, 184}, {155, 186}, {157, 113}, {165, 189}, {167, 134}, {168, 184}, },
			{{-1, 62}, },
			{{-1, 110}, },
			{{-1, 106}, },
			{{-1, 107}, {153, 185}, },
			{{-1, 15}, },
			{{-1, 38}, {50, 100}, },
			{{-1, 68}, },
			{{-1, 39}, {43, 84}, {70, 84}, {82, 84}, {143, 174}, {148, 182}, {150, 84}, {194, 198}, {195, 199}, {200, 174}, {202, 198}, },
			{{-1, 40}, {44, 90}, },
			{{-1, 175}, {200, 201}, {202, 203}, },
			{{-1, 41}, {143, 176}, {200, 176}, {202, 176}, },
			{{-1, 42}, {143, 177}, {200, 177}, {202, 177}, },
			{{-1, 51}, {52, 102}, },
			{{-1, 96}, {144, 178}, {193, 197}, },
			{{-1, 97}, {94, 141}, },
			{{-1, 172}, },
			{{-1, 63}, {44, 91}, },
			{{-1, 158}, {187, 196}, },
			{{-1, 114}, {157, 187}, },
			{{-1, 4}, },
			{{-1, 16}, },
			{{-1, 77}, },
			{{-1, 70}, {17, 43}, {38, 82}, {101, 150}, },
			{{-1, 44}, {60, 115}, {157, 115}, },
			{{-1, 52}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'module', EOF",
			"expecting: id con",
			"expecting: EOF",
			"expecting: 'module', 'def', 'import', 'site', '.', EOF",
			"expecting: filename",
			"expecting: 'module', 'def', 'import', 'site', EOF",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', id con",
			"expecting: ':'",
			"expecting: 'end', ';'",
			"expecting: '('",
			"expecting: str con",
			"expecting: '{', '[', id con, nat con, symbol con, text, pre text",
			"expecting: '{', '[', id con, nat con, symbol con, text",
			"expecting: ';'",
			"expecting: ')', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', ':', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', id con",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '[', id con, nat con, symbol con, text, pre text",
			"expecting: '{', '[', '!', id con, nat con, symbol con, text",
			"expecting: '(', '='",
			"expecting: 'in', id con",
			"expecting: '}', id con",
			"expecting: '{', '[', ']', id con, nat con, symbol con, text",
			"expecting: ')', '}', ']', ';', ',', '^', '&&', '||', ':', '+', post text, mid text",
			"expecting: 'if', 'else', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '=', id con",
			"expecting: ')', ','",
			"expecting: nat con",
			"expecting: ')', '{', '[', id con, nat con, symbol con, text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text, post text, mid text",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '^', '#', '$', '@', ':', '+', id con, nat con, symbol con, text, pre text, post text, mid text",
			"expecting: ')', '&&', '||', ':'",
			"expecting: ')'",
			"expecting: ')', '&&', '||'",
			"expecting: '='",
			"expecting: '}', ','",
			"expecting: ']', ','",
			"expecting: '{', '[', id con, nat con, symbol con, text, post text, mid text",
			"expecting: post text, mid text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', '%', ':', id con, nat con, symbol con, text, pre text",
			"expecting: ')', ',', '^', '=', '+'",
			"expecting: 'if', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', ';', '^', '+', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', ':', id con, nat con, symbol con, text, pre text",
			"expecting: 'list', 'record', 'string'",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', id con",
			"expecting: ')', '}', ']', ';', ',', '&&', '||', ':', post text, mid text",
			"expecting: '?'",
			"expecting: 'else'",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '}', '[', ';', ',', '.', '^', '#', '$', '@', ':', '+', id con, nat con, symbol con, text, pre text",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 0, 3, 3, 0, 1, 1, 4, 1, 5, 5, 5, 5, 5, 6, 3, 7, 8, 8, 3, 5, 9, 9, 1, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 20, 23, 1, 5, 4, 24, 1, 25, 26, 26, 13, 27, 28, 29, 29, 29, 29, 12, 13, 29, 13, 13, 30, 31, 32, 32, 30, 15, 1, 1, 1, 33, 1, 16, 16, 30, 34, 35, 5, 20, 5, 21, 15, 36, 23, 17, 13, 22, 13, 8, 8, 24, 37, 38, 39, 7, 12, 40, 20, 26, 30, 29, 7, 41, 41, 29, 42, 42, 12, 43, 44, 44, 12, 30, 1, 12, 30, 30, 31, 1, 30, 16, 16, 16, 45, 16, 16, 35, 46, 32, 32, 32, 5, 47, 48, 30, 30, 30, 39, 49, 50, 24, 12, 12, 13, 50, 30, 20, 12, 29, 1, 29, 12, 13, 12, 13, 43, 44, 29, 51, 32, 33, 12, 35, 12, 12, 52, 52, 52, 52, 9, 22, 53, 30, 30, 38, 38, 38, 26, 26, 30, 41, 41, 42, 44, 16, 32, 32, 54, 39, 24, 50, 50, 13, 38, 22, 22, 50, 53, 50, 53, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
