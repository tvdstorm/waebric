/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammar.waebric.parser;

import org.sablecc.grammar.waebric.lexer.*;
import org.sablecc.grammar.waebric.node.*;
import org.sablecc.grammar.waebric.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAmodules1Modules */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAmodules2Modules */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAmodule1Module */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAmodule2Module */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AModuleId */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ASingleModuleIdArguments */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AMultipleModuleIdArguments */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AFunctionModuleElement */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AImportModuleElement */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce ASiteModuleElement */
		    {
			ArrayList list = new9();
			push(goTo(4), list);
		    }
		    break;
                    case 10: /* reduce ASemiColonTerminator */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AImport */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce ASite */
		    {
			ArrayList list = new12();
			push(goTo(7), list);
		    }
		    break;
                    case 13: /* reduce ASingleMappings */
		    {
			ArrayList list = new13();
			push(goTo(8), list);
		    }
		    break;
                    case 14: /* reduce AMultipleMappings */
		    {
			ArrayList list = new14();
			push(goTo(8), list);
		    }
		    break;
                    case 15: /* reduce AMapping */
		    {
			ArrayList list = new15();
			push(goTo(9), list);
		    }
		    break;
                    case 16: /* reduce APath */
		    {
			ArrayList list = new16();
			push(goTo(10), list);
		    }
		    break;
                    case 17: /* reduce ADesignatorWithArgsMarkup */
		    {
			ArrayList list = new17();
			push(goTo(11), list);
		    }
		    break;
                    case 18: /* reduce ADesignatorMarkup */
		    {
			ArrayList list = new18();
			push(goTo(11), list);
		    }
		    break;
                    case 19: /* reduce ADesignatorWithArgsMarkupNoShortMarkup */
		    {
			ArrayList list = new19();
			push(goTo(12), list);
		    }
		    break;
                    case 20: /* reduce AAdesignator1Designator */
		    {
			ArrayList list = new20();
			push(goTo(13), list);
		    }
		    break;
                    case 21: /* reduce AAdesignator2Designator */
		    {
			ArrayList list = new21();
			push(goTo(13), list);
		    }
		    break;
                    case 22: /* reduce ANumberSignAttribute */
		    {
			ArrayList list = new22();
			push(goTo(14), list);
		    }
		    break;
                    case 23: /* reduce ADotAttribute */
		    {
			ArrayList list = new23();
			push(goTo(14), list);
		    }
		    break;
                    case 24: /* reduce ADollarSignAttribute */
		    {
			ArrayList list = new24();
			push(goTo(14), list);
		    }
		    break;
                    case 25: /* reduce AColonAttribute */
		    {
			ArrayList list = new25();
			push(goTo(14), list);
		    }
		    break;
                    case 26: /* reduce AAtWidthHeightAttribute */
		    {
			ArrayList list = new26();
			push(goTo(14), list);
		    }
		    break;
                    case 27: /* reduce AAtWidthAttribute */
		    {
			ArrayList list = new27();
			push(goTo(14), list);
		    }
		    break;
                    case 28: /* reduce AAarguments1Arguments */
		    {
			ArrayList list = new28();
			push(goTo(15), list);
		    }
		    break;
                    case 29: /* reduce AAarguments2Arguments */
		    {
			ArrayList list = new29();
			push(goTo(15), list);
		    }
		    break;
                    case 30: /* reduce ASingleArgumentList */
		    {
			ArrayList list = new30();
			push(goTo(16), list);
		    }
		    break;
                    case 31: /* reduce AMultipleArgumentList */
		    {
			ArrayList list = new31();
			push(goTo(16), list);
		    }
		    break;
                    case 32: /* reduce AAssignArgument */
		    {
			ArrayList list = new32();
			push(goTo(17), list);
		    }
		    break;
                    case 33: /* reduce AArgumentArgument */
		    {
			ArrayList list = new33();
			push(goTo(17), list);
		    }
		    break;
                    case 34: /* reduce ANoPlusExpression */
		    {
			ArrayList list = new34();
			push(goTo(18), list);
		    }
		    break;
                    case 35: /* reduce APlusExpressionExpression */
		    {
			ArrayList list = new35();
			push(goTo(18), list);
		    }
		    break;
                    case 36: /* reduce AIdconExpressionNoPlus */
		    {
			ArrayList list = new36();
			push(goTo(19), list);
		    }
		    break;
                    case 37: /* reduce ATextExpressionNoPlus */
		    {
			ArrayList list = new37();
			push(goTo(19), list);
		    }
		    break;
                    case 38: /* reduce ASymbolConExpressionNoPlus */
		    {
			ArrayList list = new38();
			push(goTo(19), list);
		    }
		    break;
                    case 39: /* reduce ANatConExpressionNoPlus */
		    {
			ArrayList list = new39();
			push(goTo(19), list);
		    }
		    break;
                    case 40: /* reduce ADotIdconExpressionNoPlus */
		    {
			ArrayList list = new40();
			push(goTo(19), list);
		    }
		    break;
                    case 41: /* reduce AAmultipleexpressionsexpressionnoplus1ExpressionNoPlus */
		    {
			ArrayList list = new41();
			push(goTo(19), list);
		    }
		    break;
                    case 42: /* reduce AAmultipleexpressionsexpressionnoplus2ExpressionNoPlus */
		    {
			ArrayList list = new42();
			push(goTo(19), list);
		    }
		    break;
                    case 43: /* reduce AAkeyvaluepairsexpressionnoplus1ExpressionNoPlus */
		    {
			ArrayList list = new43();
			push(goTo(19), list);
		    }
		    break;
                    case 44: /* reduce AAkeyvaluepairsexpressionnoplus2ExpressionNoPlus */
		    {
			ArrayList list = new44();
			push(goTo(19), list);
		    }
		    break;
                    case 45: /* reduce ASingleExpressions */
		    {
			ArrayList list = new45();
			push(goTo(20), list);
		    }
		    break;
                    case 46: /* reduce AMultipleExpressions */
		    {
			ArrayList list = new46();
			push(goTo(20), list);
		    }
		    break;
                    case 47: /* reduce ASingleKeyValuePairs */
		    {
			ArrayList list = new47();
			push(goTo(21), list);
		    }
		    break;
                    case 48: /* reduce AMultipleKeyValuePairs */
		    {
			ArrayList list = new48();
			push(goTo(21), list);
		    }
		    break;
                    case 49: /* reduce AKeyValuePair */
		    {
			ArrayList list = new49();
			push(goTo(22), list);
		    }
		    break;
                    case 50: /* reduce AAfunction1Function */
		    {
			ArrayList list = new50();
			push(goTo(23), list);
		    }
		    break;
                    case 51: /* reduce AAfunction2Function */
		    {
			ArrayList list = new51();
			push(goTo(23), list);
		    }
		    break;
                    case 52: /* reduce AAfunction3Function */
		    {
			ArrayList list = new52();
			push(goTo(23), list);
		    }
		    break;
                    case 53: /* reduce AAfunction4Function */
		    {
			ArrayList list = new53();
			push(goTo(23), list);
		    }
		    break;
                    case 54: /* reduce AAformals1Formals */
		    {
			ArrayList list = new54();
			push(goTo(24), list);
		    }
		    break;
                    case 55: /* reduce AAformals2Formals */
		    {
			ArrayList list = new55();
			push(goTo(24), list);
		    }
		    break;
                    case 56: /* reduce ASingleFormal */
		    {
			ArrayList list = new56();
			push(goTo(25), list);
		    }
		    break;
                    case 57: /* reduce AMultipleFormal */
		    {
			ArrayList list = new57();
			push(goTo(25), list);
		    }
		    break;
                    case 58: /* reduce ANoMarkupStatement */
		    {
			ArrayList list = new58();
			push(goTo(26), list);
		    }
		    break;
                    case 59: /* reduce AMarkupStatementStatement */
		    {
			ArrayList list = new59();
			push(goTo(26), list);
		    }
		    break;
                    case 60: /* reduce AMarkupNoStatementStatement */
		    {
			ArrayList list = new60();
			push(goTo(26), list);
		    }
		    break;
                    case 61: /* reduce AEachStatementNoMarkup */
		    {
			ArrayList list = new61();
			push(goTo(27), list);
		    }
		    break;
                    case 62: /* reduce AIfThenStatementNoMarkup */
		    {
			ArrayList list = new62();
			push(goTo(27), list);
		    }
		    break;
                    case 63: /* reduce AIfThenElseStatementNoMarkup */
		    {
			ArrayList list = new63();
			push(goTo(27), list);
		    }
		    break;
                    case 64: /* reduce ANoShortIfStatementNoMarkup */
		    {
			ArrayList list = new64();
			push(goTo(27), list);
		    }
		    break;
                    case 65: /* reduce ANoMarkupStatementNoShortIf */
		    {
			ArrayList list = new65();
			push(goTo(28), list);
		    }
		    break;
                    case 66: /* reduce AMarkupNoStatementStatementNoShortIf */
		    {
			ArrayList list = new66();
			push(goTo(28), list);
		    }
		    break;
                    case 67: /* reduce AIfThenElseStatementNoShortIf */
		    {
			ArrayList list = new67();
			push(goTo(28), list);
		    }
		    break;
                    case 68: /* reduce AMarkupSingleStatementMarkupNoStatement */
		    {
			ArrayList list = new68();
			push(goTo(29), list);
		    }
		    break;
                    case 69: /* reduce AMarkupMultipleStatementMarkupNoStatement */
		    {
			ArrayList list = new69();
			push(goTo(29), list);
		    }
		    break;
                    case 70: /* reduce AMarkupExpressionStatementMarkupNoStatement */
		    {
			ArrayList list = new70();
			push(goTo(29), list);
		    }
		    break;
                    case 71: /* reduce AEmbeddingStatementMarkupNoStatement */
		    {
			ArrayList list = new71();
			push(goTo(29), list);
		    }
		    break;
                    case 72: /* reduce AAletstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new72();
			push(goTo(30), list);
		    }
		    break;
                    case 73: /* reduce AAletstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new73();
			push(goTo(30), list);
		    }
		    break;
                    case 74: /* reduce AAblockstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new74();
			push(goTo(30), list);
		    }
		    break;
                    case 75: /* reduce AAblockstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
		    {
			ArrayList list = new75();
			push(goTo(30), list);
		    }
		    break;
                    case 76: /* reduce ACommentStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new76();
			push(goTo(30), list);
		    }
		    break;
                    case 77: /* reduce AEchoExpressionStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new77();
			push(goTo(30), list);
		    }
		    break;
                    case 78: /* reduce AEchoEmbeddingStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new78();
			push(goTo(30), list);
		    }
		    break;
                    case 79: /* reduce ACdataStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new79();
			push(goTo(30), list);
		    }
		    break;
                    case 80: /* reduce AYieldStatementNoMarkupNoShortIf */
		    {
			ArrayList list = new80();
			push(goTo(30), list);
		    }
		    break;
                    case 81: /* reduce AExpressionAssignment */
		    {
			ArrayList list = new81();
			push(goTo(31), list);
		    }
		    break;
                    case 82: /* reduce AStatementAssignment */
		    {
			ArrayList list = new82();
			push(goTo(31), list);
		    }
		    break;
                    case 83: /* reduce AAassignmentargs1AssignmentArgs */
		    {
			ArrayList list = new83();
			push(goTo(32), list);
		    }
		    break;
                    case 84: /* reduce AAassignmentargs2AssignmentArgs */
		    {
			ArrayList list = new84();
			push(goTo(32), list);
		    }
		    break;
                    case 85: /* reduce ASingleAssignmentArg */
		    {
			ArrayList list = new85();
			push(goTo(33), list);
		    }
		    break;
                    case 86: /* reduce AMultipleAssignmentArg */
		    {
			ArrayList list = new86();
			push(goTo(33), list);
		    }
		    break;
                    case 87: /* reduce ANoAndOrPredicate */
		    {
			ArrayList list = new87();
			push(goTo(34), list);
		    }
		    break;
                    case 88: /* reduce AAndPredicatePredicate */
		    {
			ArrayList list = new88();
			push(goTo(34), list);
		    }
		    break;
                    case 89: /* reduce AOrPredicatePredicate */
		    {
			ArrayList list = new89();
			push(goTo(34), list);
		    }
		    break;
                    case 90: /* reduce AExpressionPredicateNoAndOr */
		    {
			ArrayList list = new90();
			push(goTo(35), list);
		    }
		    break;
                    case 91: /* reduce AExpressionTypePredicateNoAndOr */
		    {
			ArrayList list = new91();
			push(goTo(35), list);
		    }
		    break;
                    case 92: /* reduce ANotPredicatePredicateNoAndOr */
		    {
			ArrayList list = new92();
			push(goTo(35), list);
		    }
		    break;
                    case 93: /* reduce AListType */
		    {
			ArrayList list = new93();
			push(goTo(36), list);
		    }
		    break;
                    case 94: /* reduce ARecordType */
		    {
			ArrayList list = new94();
			push(goTo(36), list);
		    }
		    break;
                    case 95: /* reduce AStringType */
		    {
			ArrayList list = new95();
			push(goTo(36), list);
		    }
		    break;
                    case 96: /* reduce AEmbedding */
		    {
			ArrayList list = new96();
			push(goTo(37), list);
		    }
		    break;
                    case 97: /* reduce APosttextTextTail */
		    {
			ArrayList list = new97();
			push(goTo(38), list);
		    }
		    break;
                    case 98: /* reduce AMidtextTextTail */
		    {
			ArrayList list = new98();
			push(goTo(38), list);
		    }
		    break;
                    case 99: /* reduce AAmarkupmarkupembed1Embed */
		    {
			ArrayList list = new99();
			push(goTo(39), list);
		    }
		    break;
                    case 100: /* reduce AAmarkupmarkupembed2Embed */
		    {
			ArrayList list = new100();
			push(goTo(39), list);
		    }
		    break;
                    case 101: /* reduce AAmarkupexpressionembed1Embed */
		    {
			ArrayList list = new101();
			push(goTo(39), list);
		    }
		    break;
                    case 102: /* reduce AAmarkupexpressionembed2Embed */
		    {
			ArrayList list = new102();
			push(goTo(39), list);
		    }
		    break;
                    case 103: /* reduce ATerminal$Module */
		    {
			ArrayList list = new103();
			push(goTo(40), list);
		    }
		    break;
                    case 104: /* reduce ANonTerminal$Module */
		    {
			ArrayList list = new104();
			push(goTo(40), list);
		    }
		    break;
                    case 105: /* reduce ATerminal$ModuleElement */
		    {
			ArrayList list = new105();
			push(goTo(41), list);
		    }
		    break;
                    case 106: /* reduce ANonTerminal$ModuleElement */
		    {
			ArrayList list = new106();
			push(goTo(41), list);
		    }
		    break;
                    case 107: /* reduce ATerminal$Attribute */
		    {
			ArrayList list = new107();
			push(goTo(42), list);
		    }
		    break;
                    case 108: /* reduce ANonTerminal$Attribute */
		    {
			ArrayList list = new108();
			push(goTo(42), list);
		    }
		    break;
                    case 109: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new109();
			push(goTo(43), list);
		    }
		    break;
                    case 110: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new110();
			push(goTo(43), list);
		    }
		    break;
                    case 111: /* reduce ATerminal$Markup */
		    {
			ArrayList list = new111();
			push(goTo(44), list);
		    }
		    break;
                    case 112: /* reduce ANonTerminal$Markup */
		    {
			ArrayList list = new112();
			push(goTo(44), list);
		    }
		    break;
                    case 113: /* reduce ATerminal$Assignment */
		    {
			ArrayList list = new113();
			push(goTo(45), list);
		    }
		    break;
                    case 114: /* reduce ANonTerminal$Assignment */
		    {
			ArrayList list = new114();
			push(goTo(45), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PModules node1 = (PModules) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAmodules1Modules */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PModules pmodulesNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pmodulesNode1 = new AModules(listNode2);
        }
	nodeList.add(pmodulesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAmodules2Modules */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModules pmodulesNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pmodulesNode1 = new AModules(listNode3);
        }
	nodeList.add(pmodulesNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAmodule1Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PModuleId pmoduleidNode2;
        LinkedList listNode3 = new LinkedList();
        pmoduleidNode2 = (PModuleId)nodeArrayList2.get(0);
        {
            // Block
        }

        pmoduleNode1 = new AModule(pmoduleidNode2, listNode3);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAmodule2Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModule pmoduleNode1;
        {
            // Block
        PModuleId pmoduleidNode2;
        LinkedList listNode4 = new LinkedList();
        pmoduleidNode2 = (PModuleId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmoduleNode1 = new AModule(pmoduleidNode2, listNode4);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AModuleId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleId pmoduleidNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pmoduleidNode1 = new AModuleId(listNode3);
        }
	nodeList.add(pmoduleidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASingleModuleIdArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdCon tidconNode1;
        tidconNode1 = (TIdCon)nodeArrayList1.get(0);
	if(tidconNode1 != null)
	{
	  listNode2.add(tidconNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AMultipleModuleIdArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdCon tidconNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidconNode2 = (TIdCon)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidconNode2 != null)
	{
	  listNode3.add(tidconNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AFunctionModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        pmoduleelementNode1 = (PModuleElement)nodeArrayList1.get(0);
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AImportModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        pmoduleelementNode1 = (PModuleElement)nodeArrayList1.get(0);
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ASiteModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        pmoduleelementNode1 = (PModuleElement)nodeArrayList1.get(0);
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ASemiColonTerminator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AImport */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        PModuleId pmoduleidNode2;
        pmoduleidNode2 = (PModuleId)nodeArrayList2.get(0);

        pmoduleelementNode1 = new AImportModuleElement(pmoduleidNode2);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ASite */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pmoduleelementNode1 = new ASiteModuleElement(listNode3);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce ASingleMappings */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMapping pmappingNode1;
        pmappingNode1 = (PMapping)nodeArrayList1.get(0);
	if(pmappingNode1 != null)
	{
	  listNode2.add(pmappingNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMultipleMappings */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMapping pmappingNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmappingNode2 = (PMapping)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmappingNode2 != null)
	{
	  listNode3.add(pmappingNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMapping */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMapping pmappingNode1;
        {
            // Block
        PPath ppathNode2;
        PMarkup pmarkupNode3;
        ppathNode2 = (PPath)nodeArrayList1.get(0);
        pmarkupNode3 = (PMarkup)nodeArrayList3.get(0);

        pmappingNode1 = new AMapping(ppathNode2, pmarkupNode3);
        }
	nodeList.add(pmappingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce APath */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPath ppathNode1;
        {
            // Block
        TFilename tfilenameNode2;
        tfilenameNode2 = (TFilename)nodeArrayList1.get(0);

        ppathNode1 = new APath(tfilenameNode2);
        }
	nodeList.add(ppathNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ADesignatorWithArgsMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkup pmarkupNode1;
        pmarkupNode1 = (PMarkup)nodeArrayList1.get(0);
	nodeList.add(pmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ADesignatorMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkup pmarkupNode1;
        {
            // Block
        PDesignator pdesignatorNode2;
        pdesignatorNode2 = (PDesignator)nodeArrayList1.get(0);

        pmarkupNode1 = new ADesignatorMarkup(pdesignatorNode2);
        }
	nodeList.add(pmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ADesignatorWithArgsMarkupNoShortMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMarkup pmarkupNode1;
        {
            // Block
        PDesignator pdesignatorNode2;
        PArgs pargsNode3;
        pdesignatorNode2 = (PDesignator)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);

        pmarkupNode1 = new ACallMarkup(pdesignatorNode2, pargsNode3);
        }
	nodeList.add(pmarkupNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAdesignator1Designator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDesignator pdesignatorNode1;
        {
            // Block
        TIdCon tidconNode2;
        LinkedList listNode3 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        {
            // Block
        }

        pdesignatorNode1 = new ATagDesignator(tidconNode2, listNode3);
        }
	nodeList.add(pdesignatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAdesignator2Designator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDesignator pdesignatorNode1;
        {
            // Block
        TIdCon tidconNode2;
        LinkedList listNode4 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdesignatorNode1 = new ATagDesignator(tidconNode2, listNode4);
        }
	nodeList.add(pdesignatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ANumberSignAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new AIdAttribute(tidconNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ADotAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new AClassAttribute(tidconNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ADollarSignAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new ANameAttribute(tidconNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AColonAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);

        pattributeNode1 = new ATypeAttribute(tidconNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAtWidthHeightAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TNatCon tnatconNode2;
        TNatCon tnatconNode3;
        tnatconNode2 = (TNatCon)nodeArrayList2.get(0);
        tnatconNode3 = (TNatCon)nodeArrayList4.get(0);

        pattributeNode1 = new AWidthHeightAttribute(tnatconNode2, tnatconNode3);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAtWidthAttribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAttribute pattributeNode1;
        {
            // Block
        TNatCon tnatconNode2;
        tnatconNode2 = (TNatCon)nodeArrayList2.get(0);

        pattributeNode1 = new AHeightAttribute(tnatconNode2);
        }
	nodeList.add(pattributeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAarguments1Arguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pargsNode1 = new AArgs(listNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAarguments2Arguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pargsNode1 = new AArgs(listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ASingleArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
	if(pargumentNode1 != null)
	{
	  listNode2.add(pargumentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AMultipleArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArgument pargumentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentNode2 = (PArgument)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentNode2 != null)
	{
	  listNode3.add(pargumentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAssignArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        TIdCon tidconNode2;
        PExpression pexpressionNode3;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pargumentNode1 = new AAttrArgument(tidconNode2, pexpressionNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AArgumentArgument */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pargumentNode1 = new AExpressionArgument(pexpressionNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANoPlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce APlusExpressionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ACatExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIdconExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdCon tidconNode2;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);

        pexpressionNode1 = new AVarExpression(tidconNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ATextExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TText ttextNode2;
        ttextNode2 = (TText)nodeArrayList1.get(0);

        pexpressionNode1 = new ATextExpression(ttextNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ASymbolConExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TSymbolCon tsymbolconNode2;
        tsymbolconNode2 = (TSymbolCon)nodeArrayList1.get(0);

        pexpressionNode1 = new ASymExpression(tsymbolconNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ANatConExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNatCon tnatconNode2;
        tnatconNode2 = (TNatCon)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumExpression(tnatconNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ADotIdconExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdCon tidconNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidconNode3 = (TIdCon)nodeArrayList3.get(0);

        pexpressionNode1 = new AFieldExpression(pexpressionNode2, tidconNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAmultipleexpressionsexpressionnoplus1ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pexpressionNode1 = new AListExpression(listNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAmultipleexpressionsexpressionnoplus2ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexpressionNode1 = new AListExpression(listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAkeyvaluepairsexpressionnoplus1ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pexpressionNode1 = new ARecordExpression(listNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAkeyvaluepairsexpressionnoplus2ExpressionNoPlus */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexpressionNode1 = new ARecordExpression(listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ASingleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AMultipleExpressions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ASingleKeyValuePairs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPair ppairNode1;
        ppairNode1 = (PPair)nodeArrayList1.get(0);
	if(ppairNode1 != null)
	{
	  listNode2.add(ppairNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AMultipleKeyValuePairs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPair ppairNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppairNode2 = (PPair)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppairNode2 != null)
	{
	  listNode3.add(ppairNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AKeyValuePair */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPair ppairNode1;
        {
            // Block
        TIdCon tidconNode2;
        PExpression pexpressionNode3;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        ppairNode1 = new APair(tidconNode2, pexpressionNode3);
        }
	nodeList.add(ppairNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        TIdCon tidconNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);
        {
            // Block
        }

        pmoduleelementNode1 = new ADefModuleElement(tidconNode2, null, listNode4);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        TIdCon tidconNode2;
        PFormals pformalsNode3;
        LinkedList listNode4 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);
        pformalsNode3 = (PFormals)nodeArrayList3.get(0);
        {
            // Block
        }

        pmoduleelementNode1 = new ADefModuleElement(tidconNode2, pformalsNode3, listNode4);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAfunction3Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        TIdCon tidconNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmoduleelementNode1 = new ADefModuleElement(tidconNode2, null, listNode5);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAfunction4Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModuleElement pmoduleelementNode1;
        {
            // Block
        TIdCon tidconNode2;
        PFormals pformalsNode3;
        LinkedList listNode5 = new LinkedList();
        tidconNode2 = (TIdCon)nodeArrayList2.get(0);
        pformalsNode3 = (PFormals)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmoduleelementNode1 = new ADefModuleElement(tidconNode2, pformalsNode3, listNode5);
        }
	nodeList.add(pmoduleelementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAformals1Formals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pformalsNode1 = new AFormals(listNode2);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAformals2Formals */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFormals pformalsNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pformalsNode1 = new AFormals(listNode3);
        }
	nodeList.add(pformalsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ASingleFormal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdCon tidconNode1;
        tidconNode1 = (TIdCon)nodeArrayList1.get(0);
	if(tidconNode1 != null)
	{
	  listNode2.add(tidconNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AMultipleFormal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdCon tidconNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidconNode2 = (TIdCon)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidconNode2 != null)
	{
	  listNode3.add(tidconNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ANoMarkupStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AMarkupStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PStatement pstatementNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pstatementNode4 = (PStatement)nodeArrayList2.get(0);

        pstatementNode1 = new AMarkupStatStatement(listNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AMarkupNoStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AEachStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdCon tidconNode2;
        PExpression pexpressionNode3;
        PStatement pstatementNode4;
        tidconNode2 = (TIdCon)nodeArrayList3.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AEachStatement(tidconNode2, pexpressionNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AIfThenStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        PStatement pstatementNode3;
        ppredicateNode2 = (PPredicate)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(ppredicateNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AIfThenElseStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        ppredicateNode2 = (PPredicate)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(ppredicateNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ANoShortIfStatementNoMarkup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ANoMarkupStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AMarkupNoStatementStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AIfThenElseStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        ppredicateNode2 = (PPredicate)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfElseStatement(ppredicateNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AMarkupSingleStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PMarkup pmarkupNode2;
        pmarkupNode2 = (PMarkup)nodeArrayList1.get(0);

        pstatementNode1 = new AMarkupStatement(pmarkupNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AMarkupMultipleStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PMarkup pmarkupNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmarkupNode4 = (PMarkup)nodeArrayList2.get(0);

        pstatementNode1 = new AMarkupMarkupStatement(listNode3, pmarkupNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AMarkupExpressionStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AMarkupExpStatement(listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AEmbeddingStatementMarkupNoStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PEmbedding pembeddingNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pembeddingNode4 = (PEmbedding)nodeArrayList2.get(0);

        pstatementNode1 = new AMarkupEmbeddingStatement(listNode3, pembeddingNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAletstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new ALetStatement(listNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AAletstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ALetStatement(listNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AAblockstatementnomarkupnoshortif1StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstatementNode1 = new ABlockStatement(listNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAblockstatementnomarkupnoshortif2StatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ACommentStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TStrCon tstrconNode2;
        tstrconNode2 = (TStrCon)nodeArrayList2.get(0);

        pstatementNode1 = new ACommentStatement(tstrconNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AEchoExpressionStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AEchoStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AEchoEmbeddingStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PEmbedding pembeddingNode2;
        pembeddingNode2 = (PEmbedding)nodeArrayList2.get(0);

        pstatementNode1 = new AEchoEmbeddingStatement(pembeddingNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ACdataStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new ACdataStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AYieldStatementNoMarkupNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block

        pstatementNode1 = new AYieldStatement();
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AExpressionAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdCon tidconNode2;
        PExpression pexpressionNode3;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        passignmentNode1 = new AVarBindAssignment(tidconNode2, pexpressionNode3);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AStatementAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdCon tidconNode2;
        PAssignmentArgs passignmentargsNode3;
        PStatement pstatementNode4;
        tidconNode2 = (TIdCon)nodeArrayList1.get(0);
        passignmentargsNode3 = (PAssignmentArgs)nodeArrayList2.get(0);
        pstatementNode4 = (PStatement)nodeArrayList4.get(0);

        passignmentNode1 = new AFuncBindAssignment(tidconNode2, passignmentargsNode3, pstatementNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AAassignmentargs1AssignmentArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignmentArgs passignmentargsNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        passignmentargsNode1 = new AAssignmentArgs(listNode2);
        }
	nodeList.add(passignmentargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAassignmentargs2AssignmentArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAssignmentArgs passignmentargsNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        passignmentargsNode1 = new AAssignmentArgs(listNode3);
        }
	nodeList.add(passignmentargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ASingleAssignmentArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdCon tidconNode1;
        tidconNode1 = (TIdCon)nodeArrayList1.get(0);
	if(tidconNode1 != null)
	{
	  listNode2.add(tidconNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AMultipleAssignmentArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdCon tidconNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidconNode2 = (TIdCon)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidconNode2 != null)
	{
	  listNode3.add(tidconNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ANoAndOrPredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        ppredicateNode1 = (PPredicate)nodeArrayList1.get(0);
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AAndPredicatePredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        PPredicate ppredicateNode3;
        ppredicateNode2 = (PPredicate)nodeArrayList1.get(0);
        ppredicateNode3 = (PPredicate)nodeArrayList3.get(0);

        ppredicateNode1 = new AAndPredicate(ppredicateNode2, ppredicateNode3);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AOrPredicatePredicate */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        PPredicate ppredicateNode3;
        ppredicateNode2 = (PPredicate)nodeArrayList1.get(0);
        ppredicateNode3 = (PPredicate)nodeArrayList3.get(0);

        ppredicateNode1 = new AOrPredicate(ppredicateNode2, ppredicateNode3);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AExpressionPredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        ppredicateNode1 = new AExpressionPredicate(pexpressionNode2);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce AExpressionTypePredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PType ptypeNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);

        ppredicateNode1 = new AIsAPredicate(pexpressionNode2, ptypeNode3);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ANotPredicatePredicateNoAndOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPredicate ppredicateNode1;
        {
            // Block
        PPredicate ppredicateNode2;
        ppredicateNode2 = (PPredicate)nodeArrayList2.get(0);

        ppredicateNode1 = new ANotPredicate(ppredicateNode2);
        }
	nodeList.add(ppredicateNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AListType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TList tlistNode2;
        tlistNode2 = (TList)nodeArrayList1.get(0);

        ptypeNode1 = new AListType(tlistNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ARecordType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TRecord trecordNode2;
        trecordNode2 = (TRecord)nodeArrayList1.get(0);

        ptypeNode1 = new ARecordType(trecordNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce AEmbedding */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbedding pembeddingNode1;
        {
            // Block
        TPreText tpretextNode2;
        PEmbed pembedNode3;
        PTextTail ptexttailNode4;
        tpretextNode2 = (TPreText)nodeArrayList1.get(0);
        pembedNode3 = (PEmbed)nodeArrayList2.get(0);
        ptexttailNode4 = (PTextTail)nodeArrayList3.get(0);

        pembeddingNode1 = new APreEmbedding(tpretextNode2, pembedNode3, ptexttailNode4);
        }
	nodeList.add(pembeddingNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce APosttextTextTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTextTail ptexttailNode1;
        {
            // Block
        TPostText tposttextNode2;
        tposttextNode2 = (TPostText)nodeArrayList1.get(0);

        ptexttailNode1 = new APostTextTail(tposttextNode2);
        }
	nodeList.add(ptexttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AMidtextTextTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTextTail ptexttailNode1;
        {
            // Block
        TMidText tmidtextNode2;
        PEmbed pembedNode3;
        PTextTail ptexttailNode4;
        tmidtextNode2 = (TMidText)nodeArrayList1.get(0);
        pembedNode3 = (PEmbed)nodeArrayList2.get(0);
        ptexttailNode4 = (PTextTail)nodeArrayList3.get(0);

        ptexttailNode1 = new AMidTextTail(tmidtextNode2, pembedNode3, ptexttailNode4);
        }
	nodeList.add(ptexttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AAmarkupmarkupembed1Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PMarkup pmarkupNode3;
        {
            // Block
        }
        pmarkupNode3 = (PMarkup)nodeArrayList1.get(0);

        pembedNode1 = new AMarkupEmbeddingEmbed(listNode2, pmarkupNode3);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AAmarkupmarkupembed2Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PMarkup pmarkupNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pmarkupNode4 = (PMarkup)nodeArrayList2.get(0);

        pembedNode1 = new AMarkupEmbeddingEmbed(listNode3, pmarkupNode4);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce AAmarkupexpressionembed1Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        PExpression pexpressionNode3;
        {
            // Block
        }
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);

        pembedNode1 = new AExpEmbeddingEmbed(listNode2, pexpressionNode3);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AAmarkupexpressionembed2Embed */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmbed pembedNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pembedNode1 = new AExpEmbeddingEmbed(listNode3, pexpressionNode4);
        }
	nodeList.add(pembedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ATerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PModule pmoduleNode1;
        pmoduleNode1 = (PModule)nodeArrayList1.get(0);
	if(pmoduleNode1 != null)
	{
	  listNode2.add(pmoduleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANonTerminal$Module */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PModule pmoduleNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduleNode2 != null)
	{
	  listNode3.add(pmoduleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ATerminal$ModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PModuleElement pmoduleelementNode1;
        pmoduleelementNode1 = (PModuleElement)nodeArrayList1.get(0);
	if(pmoduleelementNode1 != null)
	{
	  listNode2.add(pmoduleelementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce ANonTerminal$ModuleElement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PModuleElement pmoduleelementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoduleelementNode2 = (PModuleElement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoduleelementNode2 != null)
	{
	  listNode3.add(pmoduleelementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce ATerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAttribute pattributeNode1;
        pattributeNode1 = (PAttribute)nodeArrayList1.get(0);
	if(pattributeNode1 != null)
	{
	  listNode2.add(pattributeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ANonTerminal$Attribute */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAttribute pattributeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pattributeNode2 = (PAttribute)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pattributeNode2 != null)
	{
	  listNode3.add(pattributeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce ATerminal$Markup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMarkup pmarkupNode1;
        pmarkupNode1 = (PMarkup)nodeArrayList1.get(0);
	if(pmarkupNode1 != null)
	{
	  listNode2.add(pmarkupNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ANonTerminal$Markup */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMarkup pmarkupNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmarkupNode2 = (PMarkup)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmarkupNode2 != null)
	{
	  listNode3.add(pmarkupNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce ATerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PAssignment passignmentNode1;
        passignmentNode1 = (PAssignment)nodeArrayList1.get(0);
	if(passignmentNode1 != null)
	{
	  listNode2.add(passignmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ANonTerminal$Assignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PAssignment passignmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        passignmentNode2 = (PAssignment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(passignmentNode2 != null)
	{
	  listNode3.add(passignmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {39, SHIFT, 5}, },
			{{-1, ERROR, 2}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 2}, {5, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, },
			{{-1, REDUCE, 4}, {25, SHIFT, 17}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 9}, {39, SHIFT, 18}, },
			{{-1, ERROR, 10}, {39, SHIFT, 5}, },
			{{-1, ERROR, 11}, {43, SHIFT, 20}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 3}, {5, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, },
			{{-1, ERROR, 17}, {39, SHIFT, 25}, },
			{{-1, ERROR, 18}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 29}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {17, SHIFT, 34}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 21}, {7, SHIFT, 47}, {23, SHIFT, 48}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 23}, {35, SHIFT, 50}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 26}, {17, SHIFT, 51}, },
			{{-1, ERROR, 27}, {17, SHIFT, 52}, },
			{{-1, ERROR, 28}, {39, SHIFT, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 30}, {42, SHIFT, 56}, },
			{{-1, ERROR, 31}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, {45, SHIFT, 63}, },
			{{-1, ERROR, 32}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 33}, {23, SHIFT, 48}, },
			{{-1, ERROR, 34}, {18, SHIFT, 69}, {39, SHIFT, 70}, },
			{{-1, ERROR, 35}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {20, SHIFT, 72}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 20}, {25, SHIFT, 74}, {27, SHIFT, 75}, {28, SHIFT, 76}, {29, SHIFT, 77}, {35, SHIFT, 78}, },
			{{-1, REDUCE, 111}, {23, SHIFT, 48}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, {17, SHIFT, 82}, },
			{{-1, ERROR, 40}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 84}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 45}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 86}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, ERROR, 46}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 88}, {21, SHIFT, 58}, {39, SHIFT, 89}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, {45, SHIFT, 63}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 49}, {43, SHIFT, 20}, },
			{{-1, ERROR, 50}, {39, SHIFT, 36}, },
			{{-1, ERROR, 51}, {19, SHIFT, 57}, {21, SHIFT, 58}, {32, SHIFT, 97}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 52}, {39, SHIFT, 101}, },
			{{-1, ERROR, 53}, {17, SHIFT, 102}, {36, SHIFT, 103}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 55}, {6, SHIFT, 105}, {39, SHIFT, 53}, },
			{{-1, ERROR, 56}, {23, SHIFT, 48}, },
			{{-1, ERROR, 57}, {20, SHIFT, 108}, {39, SHIFT, 109}, },
			{{-1, ERROR, 58}, {19, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 112}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 63}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 89}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 64}, {23, SHIFT, 48}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 34}, {26, SHIFT, 122}, },
			{{-1, ERROR, 66}, {23, SHIFT, 48}, },
			{{-1, ERROR, 67}, {23, SHIFT, 48}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 71}, {18, SHIFT, 125}, {24, SHIFT, 126}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 73}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {20, SHIFT, 127}, {39, SHIFT, 36}, },
			{{-1, ERROR, 74}, {39, SHIFT, 128}, },
			{{-1, ERROR, 75}, {39, SHIFT, 129}, },
			{{-1, ERROR, 76}, {39, SHIFT, 130}, },
			{{-1, ERROR, 77}, {40, SHIFT, 131}, },
			{{-1, ERROR, 78}, {39, SHIFT, 132}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 21}, {25, SHIFT, 74}, {27, SHIFT, 75}, {28, SHIFT, 76}, {29, SHIFT, 77}, {35, SHIFT, 78}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 82}, {18, SHIFT, 134}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 135}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 85}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 139}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 88}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {20, SHIFT, 140}, {39, SHIFT, 141}, },
			{{-1, REDUCE, 20}, {23, REDUCE, 36}, {25, SHIFT, 74}, {26, REDUCE, 36}, {27, SHIFT, 75}, {28, SHIFT, 76}, {29, SHIFT, 77}, {35, SHIFT, 78}, {38, REDUCE, 36}, {46, REDUCE, 36}, {47, REDUCE, 36}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 17}, {23, SHIFT, 48}, },
			{{-1, ERROR, 92}, {23, SHIFT, 48}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 94}, {23, SHIFT, 48}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 97}, {19, SHIFT, 57}, {21, SHIFT, 58}, {32, SHIFT, 97}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 90}, {35, SHIFT, 146}, {38, SHIFT, 120}, },
			{{-1, ERROR, 99}, {18, SHIFT, 147}, {33, SHIFT, 148}, {34, SHIFT, 149}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 101}, {35, SHIFT, 150}, },
			{{-1, ERROR, 102}, {18, SHIFT, 151}, {39, SHIFT, 152}, },
			{{-1, ERROR, 103}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 104}, {36, SHIFT, 155}, },
			{{-1, ERROR, 105}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 156}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 109}, {35, SHIFT, 158}, },
			{{-1, ERROR, 110}, {20, SHIFT, 159}, {24, SHIFT, 160}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 45}, {38, SHIFT, 120}, },
			{{-1, ERROR, 114}, {22, SHIFT, 161}, {24, SHIFT, 162}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 17}, {46, REDUCE, 99}, {47, REDUCE, 99}, },
			{{-1, REDUCE, 101}, {38, SHIFT, 120}, },
			{{-1, ERROR, 118}, {46, SHIFT, 163}, {47, SHIFT, 164}, },
			{{-1, ERROR, 119}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 89}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 120}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 122}, {39, SHIFT, 169}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 126}, {39, SHIFT, 170}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 27}, {30, SHIFT, 171}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 36}, {36, SHIFT, 172}, },
			{{-1, ERROR, 136}, {18, SHIFT, 173}, {24, SHIFT, 174}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 33}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 74}, {23, REDUCE, 43}, {26, REDUCE, 43}, {38, REDUCE, 43}, },
			{{-1, REDUCE, 20}, {25, SHIFT, 74}, {27, SHIFT, 75}, {28, SHIFT, 76}, {29, SHIFT, 77}, {35, SHIFT, 175}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 146}, {14, SHIFT, 176}, {15, SHIFT, 177}, {16, SHIFT, 178}, },
			{{-1, ERROR, 147}, {1, SHIFT, 180}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, ERROR, 148}, {19, SHIFT, 57}, {21, SHIFT, 58}, {32, SHIFT, 97}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 149}, {19, SHIFT, 57}, {21, SHIFT, 58}, {32, SHIFT, 97}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 150}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 153}, {18, SHIFT, 188}, {24, SHIFT, 189}, },
			{{-1, ERROR, 154}, {23, SHIFT, 48}, {38, SHIFT, 120}, },
			{{-1, ERROR, 155}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 157}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {7, SHIFT, 192}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, ERROR, 158}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 160}, {39, SHIFT, 109}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 162}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 164}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 89}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 17}, {46, REDUCE, 100}, {47, REDUCE, 100}, },
			{{-1, REDUCE, 102}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 35}, {26, SHIFT, 122}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 171}, {40, SHIFT, 197}, },
			{{-1, ERROR, 172}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 174}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 135}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 175}, {19, SHIFT, 57}, {21, SHIFT, 58}, {39, SHIFT, 200}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 179}, {31, SHIFT, 201}, },
			{{-1, ERROR, 180}, {17, SHIFT, 202}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 182}, {2, SHIFT, 203}, },
			{{-1, REDUCE, 60}, {2, REDUCE, 66}, },
			{{-1, REDUCE, 64}, {2, REDUCE, 65}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 187}, {18, SHIFT, 204}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 189}, {39, SHIFT, 205}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 49}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 46}, {38, SHIFT, 120}, },
			{{-1, ERROR, 196}, {46, SHIFT, 163}, {47, SHIFT, 164}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 32}, {38, SHIFT, 120}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 25}, {20, REDUCE, 36}, {24, REDUCE, 36}, {26, REDUCE, 36}, {38, REDUCE, 36}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 202}, {19, SHIFT, 57}, {21, SHIFT, 58}, {32, SHIFT, 97}, {39, SHIFT, 59}, {40, SHIFT, 60}, {41, SHIFT, 61}, {44, SHIFT, 62}, },
			{{-1, ERROR, 203}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, ERROR, 204}, {1, SHIFT, 26}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 207}, {18, SHIFT, 210}, {33, SHIFT, 148}, {34, SHIFT, 149}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 210}, {1, SHIFT, 180}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, ERROR, 211}, {2, SHIFT, 212}, },
			{{-1, ERROR, 212}, {1, SHIFT, 180}, {3, SHIFT, 27}, {4, SHIFT, 28}, {8, SHIFT, 30}, {9, SHIFT, 31}, {10, SHIFT, 32}, {11, SHIFT, 33}, {19, SHIFT, 35}, {39, SHIFT, 36}, },
			{{-1, REDUCE, 67}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 8}, },
			{{-1, 6}, {10, 19}, },
			{{-1, 7}, },
			{{-1, 12}, {16, 24}, },
			{{-1, 49}, {33, 68}, {37, 81}, {56, 107}, {64, 121}, {66, 123}, {67, 124}, {91, 142}, {92, 143}, {94, 144}, {154, 190}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 21}, },
			{{-1, 22}, {49, 95}, },
			{{-1, 23}, },
			{{-1, 37}, {46, 90}, {50, 96}, {63, 115}, {119, 90}, {164, 115}, },
			{{-1, 38}, {46, 91}, {63, 116}, {119, 166}, {164, 116}, },
			{{-1, 39}, },
			{{-1, 79}, {80, 133}, },
			{{-1, 83}, },
			{{-1, 136}, },
			{{-1, 137}, {174, 199}, },
			{{-1, 98}, {31, 64}, {32, 67}, {46, 92}, {58, 113}, {63, 117}, {82, 138}, {103, 154}, {119, 167}, {150, 187}, {158, 193}, {162, 195}, {164, 117}, {172, 198}, {174, 138}, {175, 193}, },
			{{-1, 65}, {120, 168}, },
			{{-1, 114}, },
			{{-1, 110}, },
			{{-1, 111}, {160, 194}, },
			{{-1, 15}, },
			{{-1, 40}, },
			{{-1, 71}, },
			{{-1, 41}, {45, 87}, {73, 87}, {85, 87}, {147, 181}, {155, 191}, {157, 87}, {203, 208}, {204, 209}, {210, 181}, {212, 208}, },
			{{-1, 42}, {46, 93}, },
			{{-1, 182}, {210, 211}, {212, 213}, },
			{{-1, 43}, {147, 183}, {210, 183}, {212, 183}, },
			{{-1, 44}, {147, 184}, {210, 184}, {212, 184}, },
			{{-1, 54}, {55, 106}, },
			{{-1, 104}, },
			{{-1, 153}, },
			{{-1, 99}, {202, 207}, },
			{{-1, 100}, {97, 145}, {148, 185}, {149, 186}, },
			{{-1, 179}, },
			{{-1, 66}, {46, 94}, },
			{{-1, 165}, {196, 206}, },
			{{-1, 118}, {164, 196}, },
			{{-1, 4}, },
			{{-1, 16}, },
			{{-1, 80}, },
			{{-1, 73}, {18, 45}, {40, 85}, {105, 157}, },
			{{-1, 46}, {63, 119}, {164, 119}, },
			{{-1, 55}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'module', EOF",
			"expecting: id con",
			"expecting: EOF",
			"expecting: 'module', 'def', 'import', 'site', '.', EOF",
			"expecting: 'module', 'def', 'import', 'site', EOF",
			"expecting: filename",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', id con",
			"expecting: ':'",
			"expecting: 'end', ';'",
			"expecting: '('",
			"expecting: str con",
			"expecting: '{', '[', id con, nat con, symbol con, text, pre text",
			"expecting: '{', '[', id con, nat con, symbol con, text",
			"expecting: ';'",
			"expecting: ')', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', ':', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', id con",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', '[', id con, nat con, symbol con, text, pre text",
			"expecting: 'if', 'else', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con, filename",
			"expecting: '{', '[', '!', id con, nat con, symbol con, text",
			"expecting: '(', '='",
			"expecting: 'in', id con",
			"expecting: '}', id con",
			"expecting: '{', '[', ']', id con, nat con, symbol con, text",
			"expecting: ')', '}', ']', ';', ',', '^', '&&', '||', ':', '+', post text, mid text",
			"expecting: ';', '+'",
			"expecting: 'if', 'else', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', id con",
			"expecting: ')', ','",
			"expecting: nat con",
			"expecting: ')', '{', '[', id con, nat con, symbol con, text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '[', ';', id con, nat con, symbol con, text, pre text, post text, mid text",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '^', '#', '$', '@', ':', '+', id con, nat con, symbol con, text, pre text, post text, mid text",
			"expecting: ')', '&&', '||', ':', '+'",
			"expecting: ')', '&&', '||'",
			"expecting: '='",
			"expecting: '}', ','",
			"expecting: ']', ',', '+'",
			"expecting: ']', ','",
			"expecting: '{', '[', id con, nat con, symbol con, text, post text, mid text",
			"expecting: '+', post text, mid text",
			"expecting: post text, mid text",
			"expecting: 'if', 'each', 'let', 'end', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', '%', ':', id con, nat con, symbol con, text, pre text",
			"expecting: ')', ',', '^', '=', '+'",
			"expecting: ')', ',', '+'",
			"expecting: 'if', 'each', 'let', 'in', 'end', 'comment', 'echo', 'cdata', 'yield', '{', '}', ';', '^', '+', id con",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '[', ';', '.', '#', '$', '@', ':', id con, nat con, symbol con, text, pre text",
			"expecting: 'list', 'record', 'string'",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '{', id con",
			"expecting: '?'",
			"expecting: 'else'",
			"expecting: ')', '+'",
			"expecting: '}', ',', '+'",
			"expecting: 'if', 'each', 'let', 'comment', 'echo', 'cdata', 'yield', '(', '{', '}', '[', ';', ',', '.', '^', '#', '$', '@', ':', '+', id con, nat con, symbol con, text, pre text",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 0, 3, 4, 3, 0, 1, 1, 5, 4, 4, 4, 4, 4, 1, 6, 4, 7, 8, 8, 7, 4, 3, 9, 9, 1, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 22, 20, 23, 4, 24, 5, 1, 25, 1, 26, 27, 27, 13, 28, 29, 30, 30, 30, 30, 12, 31, 30, 13, 31, 32, 20, 33, 33, 32, 15, 1, 1, 1, 34, 1, 16, 16, 32, 35, 36, 4, 20, 4, 21, 15, 37, 23, 17, 31, 22, 13, 8, 8, 25, 38, 39, 39, 7, 14, 12, 40, 20, 27, 32, 30, 7, 41, 41, 30, 42, 43, 12, 44, 45, 46, 12, 12, 32, 1, 32, 32, 20, 1, 32, 16, 16, 16, 47, 16, 16, 36, 48, 33, 33, 49, 4, 50, 51, 32, 32, 32, 39, 52, 53, 25, 25, 12, 40, 33, 33, 31, 53, 32, 20, 12, 30, 1, 30, 12, 13, 12, 13, 44, 45, 30, 30, 33, 34, 12, 36, 12, 12, 54, 54, 54, 54, 9, 22, 55, 32, 32, 39, 39, 56, 40, 1, 27, 27, 32, 57, 41, 42, 46, 16, 49, 33, 58, 39, 25, 53, 53, 33, 13, 39, 22, 22, 53, 55, 53, 55, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
