
ometa WaebricOMetaParser <: Parser {

  Module          	= "module" spaces ModuleId:moduleId spaces ModuleElement*:moduleElements spaces end
                    -> new Module(moduleId, moduleElements),
  ModuleId        	= listOf(#IdCon, "."):moduleId
                    -> new ModuleId(moduleId.join('.')),
  ModuleElement   	= Site
                  	| FunctionDef
                  	| Import,

  Import			= "import" ModuleId:moduleId -> new Import(moduleId),

  Site            	= "site" listOf(#Mapping, ';'):mappings "end" -> new Site(mappings),
  Mapping         	= spaces Path:path spaces ":" spaces Markup:markup spaces -> new Mapping(path, markup),

  Path            	= Directory:dir FileName:file -> new Path(dir.toString().substring(0, dir.length - 1), file)
                    | FileName:file -> file,
  Directory       	= PathElement+:pathElement -> pathElement.join(''),
  PathElement       = PathChar+:elem "/":sep -> elem.join('').concat(sep),
  PathChar        	= cRange('!', '-') | cRange('0','[') | cRange(']','~'),
  FileName        	= FileChar+:fileChar '.' FileExt:fileExt -> (fileChar.join('').concat('.').concat(fileExt.join(''))),
  FileChar        	= PathChar,
  FileExt         	= letterOrDigit+,

  Markup          	= spaces Designator:designator Arguments:arguments spaces -> new MarkupCall(designator, arguments)
                  	| spaces Designator:tag spaces  -> tag,
  Designator      	= IdCon:identifier Attribute*:attributes ~"+" -> new DesignatorTag(identifier, attributes),
  Attribute       	= "#" spaces IdCon:idCon -> new IdAttribute(idCon)
                    | "." spaces IdCon:idClass -> new ClassAttribute(idClass)
                    | "$" spaces IdCon:idName -> new NameAttribute(idName)
                    | ":" spaces IdCon:idType -> new TypeAttribute(idType)
                  	| "@" spaces NatCon:width spaces "%" spaces NatCon:height  -> new WidthHeightAttribute(width, height)
                  	| "@" spaces NatCon:width -> new WidthAttribute(width),
  Arguments       	= "(" listOf(#Argument, ','):args ")" -> args ,
  Argument        	= spaces IdCon:variable spaces "=" spaces Expression:expression -> new Argument(variable, expression)
                  	| spaces Expression:expr -> expr,

  FunctionDef     	= "def" spaces IdCon:functionName spaces Formals:formals spaces Statement*:statements spaces "end" -> new FunctionDefinition(functionName, formals, statements)
                  	| "def" spaces IdCon:functionName spaces Statement*:statements spaces "end" -> new FunctionDefinition(functionName, [], statements),

  Formals         	= "(" listOf(#IdCon, ','):formals ")" -> formals,

  Expression      	= spaces Expression:expression spaces "." spaces IdCon:field ~"?" -> new FieldExpression(expression,field)
					| spaces Expression:expressionLeft spaces "+" spaces Expression:expressionRight ~"?" -> new CatExpression(expressionLeft, expressionRight)
                  	| spaces Text:idText spaces -> new TextExpression(idText)
                  	| spaces IdCon:idCon spaces -> new VarExpression(idCon)
                  	| spaces NatCon:idNatCon spaces -> new NatExpression(idNatCon)
                  	| spaces SymbolCon:idSymbolCon spaces -> new SymbolExpression(idSymbolCon)
                  	| spaces "[" listOf(#Expression, ','):list "]" -> new ListExpression(list)
                  	| spaces "{" listOf(#KeyValuePair, ','):records "}" -> new RecordExpression(records)
                  	,


  KeyValuePair    	= spaces IdCon:key spaces ":" Expression:value -> new KeyValuePair(key, value),

  Statement       	= "if" spaces "(" spaces Predicate:predicate spaces ")" spaces Statement:ifStatement NoElseMayFollow -> new IfStatement(predicate, ifStatement)                  	
    				| "if" spaces "(" spaces Predicate:predicate spaces ")" spaces Statement:ifStatement spaces "else" spaces Statement:elseStatement  -> new IfElseStatement(predicate, ifStatement, elseStatement)
  		            | "each" spaces "(" spaces IdCon:identifier spaces ":" spaces Expression:expression spaces ")" spaces Statement:statement -> new EachStatement(identifier, expression, statement)
    	           	| "let" Assignment+:assignments "in" Statement*:statements "end" -> new LetStatement(assignments, statements)
	             	| "{" spaces Statement*:statements spaces "}" -> new BlockStatement(statements)
                  	| "comment" spaces StrCon:comment spaces ";" -> new CommentStatement(comment)
                  	| "echo" spaces Expression:expression spaces ";" -> new EchoStatement(expression)
                  	| "echo" spaces Embedding:embedding spaces ";" -> new EchoEmbeddingStatement(embedding)
                  	| "cdata" spaces Expression:expression spaces ";" -> new CDataExpression(expression)
                  	| "yield" ";" -> new YieldStatement()
                  	| Markup:markup ";" -> new MarkupStatement(markup)
                  	| Markup+:markups spaces ";" spaces 
                  		?((markups[markups.length -1] instanceof DesignatorTag) 
                  		&& (markups[markups.length -1].containsClassAttribute() == false)) 
                  		-> new MarkupExpressionStatement(markups.slice(0,markups.length-1), new VarExpression( markups[markups.length-1].idCon))
                  	| Markup+:markups spaces ";" spaces 
                  		?(	(markups[markups.length -1] instanceof DesignatorTag) 
                  		&& 	(markups[markups.length -1].containsClassAttribute() == true)) 
                  		-> new MarkupExpressionStatement(markups.slice(0,markups.length-1), convertToFieldExpression(markups[markups.length-1]))
                  	| Markup+:markups spaces ";" spaces ?(markups.length > 1) -> new MarkupMarkupStatement(markups)
                  	| Markup+:markups spaces Expression:expression spaces ";"  spaces -> new MarkupExpressionStatement(markups, expression)
                  	| Markup+:markups spaces Statement:statement -> new MarkupStatementStatement(markups, statement)
                  	| Markup+:markups spaces Embedding:embedding spaces ";" -> new MarkupEmbeddingStatement(markups, embedding)
                  	,

  NoElseMayFollow 	= ~"else",

  Predicate       	= "!" spaces Predicate:predicate spaces -> new NotPredicate(predicate)
                  	| Predicate:predicateLeft spaces "&&" spaces Predicate:predicateRight spaces -> new AndPredicate(predicateLeft, predicateRight)
                  	| Predicate:predicateLeft spaces "||" spaces Predicate:predicateRight spaces -> new OrPredicate(predicateLeft, predicateRight)
                  	| Expression:expression "." Type:type "?" -> new IsAPredicate(expression, type)
                  	| Expression,

  Type            	= "list" -> new ListType()
                  	| "record" -> new RecordType()
                  	| "string" -> new StringType(),

  Assignment      	= spaces IdCon:variable spaces "=" spaces Expression:expression spaces ";" spaces -> new VariableBinding(variable, expression)
                  	| IdCon:variable spaces Formals:formals spaces "=" spaces Statement:statement -> new FunctionBinding(variable, formals, statement),

  TextEntityRef   	= "&" XMLSymbol XML* ";",
  TextEntityRefHead = letter | "_" | ":",
  TextEntityRefTail = letterOrDigit | "." | "-" | "_" | ":",

  Text            	= '"' (EscQuote | ~'"'  TextChar)*:idText '"' -> idText.join(''),
  TextChar        	= TextSymbolChar | Amp | TextCharRef | TextEntityRef | space,
  TextSymbolChar 	= cRange(' ','!') | cRange('#','%') | cRange('\'',';') | cRange('=','~'),
  TextCharRef     	= "&#" digit+ ";"
                  	| "&#x" HexaDecimal+ ";",

  Embedding       	= spaces PreText:head spaces Embed:embed spaces TextTail:tail spaces -> new Embedding(head, embed, tail),
  Embed           	= Markup*:markups spaces Expression:expression -> new ExpressionEmbedding(markups, expression)
  					| Markup*:markups 
  						?( (markups[markups.length -1] instanceof DesignatorTag ) 
  						&& (markups[markups.length -1].containsClassAttribute() == false)) 
  						-> new ExpressionEmbedding(markups.slice(0,markups.length-1), new VarExpression(markups[markups.length-1].idCon))  
  					| Markup+:markups 
                  		?(	(markups[markups.length -1] instanceof DesignatorTag) 
                  		&& 	(markups[markups.length -1].containsClassAttribute() == true)) 
                  		-> new MarkupExpressionStatement(markups.slice(0,markups.length-1), convertToFieldExpression(markups[markups.length-1]))
  					| Markup*:markups -> new MarkupEmbedding(markups),

  PreText         	= "\"" TextChar*:text "<" -> (text.join('')),
  PostText        	= ">" TextChar*:text "\"" -> (text.join('')),
  MidText         	= ">" TextChar*:text "<" -> (text.join('')),
  TextTail        	= PostText:text -> new PostTextTail(text)
                  	| MidText:mid Embed:embed TextTail:tail -> new MidTextTail(mid, embed, tail),

  IdCon           	= spaces IdCharHead:head IdCharTail*:tail spaces
  					? (
					  (head.concat(tail.join('')) != 'if' )
					&&(head.concat(tail.join('')) != 'else' )		
  					&&(head.concat(tail.join('')) != 'comment' )
  					&&(head.concat(tail.join('')) != 'echo' )
  					&&(head.concat(tail.join('')) != 'cdata' )
  					&&(head.concat(tail.join('')) != 'each' )
  					&&(head.concat(tail.join('')) != 'let' )
  					&&(head.concat(tail.join('')) != 'yield' )
  					&&(head.concat(tail.join('')) != 'module' )
  					&&(head.concat(tail.join('')) != 'import' )
  					&&(head.concat(tail.join('')) != 'def' )
  					&&(head.concat(tail.join('')) != 'end' )
  					&&(head.concat(tail.join('')) != 'site' )
  					  )
  					-> head.concat(tail.join('')),
  IdCharHead      	= letter,
  IdCharTail      	= letterOrDigit | '-',
  NatCon          	= digit+:d -> d.join('') ,
  SymbolCon       	= "'":prefix SymbolChar*:idSymbolCon -> prefix.concat(idSymbolCon.join('')),
  SymbolChar      	= cRange('!','\(') | cRange('*','+') | cRange('-',':') | cRange('<','=') | cRange('?','~'),
  StrCon          	= "\"" StrChar*:str "\"" -> "\"".concat(str.join('')).concat("\""),
  StrChar         	= "\\n" | "\\t" | "\\\"" | "\\\\" | "\\" digit digit digit | cRange(' ','!') | cRange('#','[') | cRange(']', '~'),
  HexaDecimal     	= char:c ?((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')),
  Amp             	= "\&",
  Comment         	= fromTo('/*', '*/') | fromTo('//', '\n'),
  space           	= super(#space) | Comment,
  EscQuote        	= '\\' '\"' -> '\\\"',
  fromTo :x :y    	= seq(x) (~seq(y) char)* seq(y),
  cRange :x :y    	= char:c ?(c >= x) ?(c <= y) -> c
}

function convertToFieldExpression(designatorTag){
		//IdCon converts to a variable reference
		var fieldExpression = new VarExpression(designatorTag.idCon);
		
		//Loop all attributes which are actualy fields
		for(var i = 0; i < designatorTag.attributes.length; i++){
			var attr = designatorTag.attributes[i];
			if(attr instanceof ClassAttribute){
				//Attributes converst to a new fieldexpression
				//with last fieldexpression as expression of new field expression
				fieldExpression = new FieldExpression(fieldExpression, attr.className);				
			}
		}
		return fieldExpression;
	}