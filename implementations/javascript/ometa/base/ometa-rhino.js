importPackage(java.io.File)
importPackage(java.io.FilenameFilter)
importPackage(java.io)

load("lib.js")
load("ometa-base.js")
load("parser.js")
load("bs-js-compiler.js")
load("bs-ometa-compiler.js")
load("bs-ometa-optimizer.js")
load("bs-ometa-js-compiler.js")

load("../classes/Module.js")
load("../classes/ModuleId.js")
load("../classes/Import.js")
load("../classes/Site.js")
load("../classes/Mapping.js")
load("../classes/FunctionDefinition.js")
load("../classes/Statement.js")
load("../classes/Designator.js")
load("../classes/Argument.js")
load("../classes/Attribute.js")
load("../classes/Embed.js")
load("../classes/Embedding.js")
load("../classes/Expression.js")
load("../classes/KeyValuePair.js")
load("../classes/Path.js")
load("../classes/Predicate.js")
load("../classes/TextTail.js")
load("../classes/Type.js")
load("../classes/Assignment.js")


/**
 * Returns the Waebric grammar written in OMeta for parsing
 * 
 * @return Waebric parser (String)
 */
getParser = function() {
	fis = new FileInputStream('../parser.ometa');
	bis = new BufferedInputStream(fis);
	dis = new DataInputStream(bis);

	parser = '';
	while(dis.available() != 0){
		parser += dis.readLine() + '\n';
	}
	fis.close();
	bis.close();
	dis.close();
	return parser;
}

/**
 * Returns the Waebric grammar written in OMeta for interpreting
 * 
 * @return Waebric interpreter (String)
 */
getInterpreter = function() {
	fis = new FileInputStream('../interpreter.ometa');
    bis = new BufferedInputStream(fis);
    dis = new DataInputStream(bis);

    interpreter = '';
    while(dis.available() != 0){
    	interpreter += dis.readLine() + '\n';
    }
    fis.close();
    bis.close();
    dis.close();
    return interpreter;
}

/**
 * Returns a waebric program
 * 
 * @return Waebric program (String)
 */
getProgram = function(path) {
    fis = new FileInputStream(path);
    bis = new BufferedInputStream(fis);
    dis = new DataInputStream(bis);

    program = '';
    while(dis.available() != 0){
    	program += dis.readLine() + '\n';
	}
	fis.close();
	bis.close();
	dis.close();
	return program;
}

/**
 * Returns the input for Rhino commandline
 * 
 * @return Input rhino (String)
 */
getSource = function(programPath){
	program = getProgram(programPath);

	source 	= getParser() + ';'
	        + 'tree = WaebricParser.matchAll(program, "Module");'
	        + 'alert("\n");'
	        + 'alert("\n");'
	        + 'alert("\n");'
	        + 'alert("--------------------------------------------------------------------------------------------------------");'
	        + 'alert(tree);'
	        + 'alert("--------------------------------------------------------------------------------------------------------");'
	        + 'alert("\n");'
	        + 'alert("\n");'
	        + 'alert("\n");'
			+ getInterpreter() + ';'
			+ 'html_output = WaebricInterpreter.match(tree, "interp");'

	return source;
}

/**
 * Parse and interprete the waebric program
 * First, the Abstract Syntax Tree is generated by the Waebric parser as a String.
 * Then, the Abstract Syntax Tree is converted to a data object by the interpreter
 * 
 * @return Output of the Waebric parser (AST)
 * @return Output of the Waebric interpreter (DATA OBJECT)
 */
translateCode = function(source) {
	var translationError = function(m, i) { alert("Translation error - please tell Alex about this!"); throw fail },
    tree = BSOMetaJSParser.matchAll(source, "topLevel", undefined, function(m, i) { throw fail.delegated({errorPos: i}) })
  	return BSOMetaJSTranslator.match(tree, "trans", undefined, translationError)
}

/**
 * Replace alert method with print method to enable output in Rhino
 */
alert = print

/**
 * Automated tests (demo's)
 */
startAutomatedTest = function(){
	//Get directories	
	directory = new File("../../../../demos/");
	directories = directory.listFiles();
	
	//Ceate new output file
	fw = new FileWriter("../results.txt");
	fw.close();
	
	//Evaluate all files in the directories
	for(var i = 0; i < directories.length; i++){
		if (directories[i].getName() != ".svn") {
			evalFiles(directories[i]);
		}
	}	
}

/**
 * For each waebric program found in the directory, an evaluation is made
 * This function outputs a file with the result of the evaluation
 * 
 * @param {Object} directory
 */
evalFiles = function(directory){
	//Get all files
	files = directory.listFiles();	
	
	//Only evaluate .wae files
	//Files in subdirectories are ignored
	for(var i = 0; i < files.length; i++){
		if (files[i].isFile()){
			var fileName = files[i].getName();
			var ext = fileName.substr(fileName.length() - 3 , 3);
			if(ext == "wae"){
				//Export the result to a file
				var result = eval(translateCode(getSource(files[i])));
				if (result == '') {
					saveResult('FAILED');
				}
				else {
					saveResult(result);
				}
			}
		}
	}
}

saveResult = function(){
	fw = new FileWriter("../results.txt", true);
    bw = new BufferedWriter(fw);
    bw.write(html_output + "\n");
    bw.close();
}

//startAutomatedTest();
eval(translateCode(getSource("../program.wae")));

