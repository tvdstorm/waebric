ometa Waebric <: Parser {
  
  Modules         = Module*,
  Module          = "module" space ModuleId space ModuleElement* spaces end,
  ModuleId        = IdCon ("." IdCon)*,
  ModuleElement   = Site
                  | FunctionDef,

  Site            = "site" spaces Mappings spaces "end",
  Mappings        = (Mapping ";" spaces)*,
  Mapping         = Path spaces ":" spaces Markup,

  Path            = Directory* FileName, 
  Directory       = PathElement "/",
  PathElement     = letterOrDigit+,
  FileName        = (PathElement ".")+ FileExt,
  FileExt         = letterOrDigit+,

  Markup          = Designator Arguments
                  | Designator,  
  Designator      = IdCon Attribute*,
  Attribute       = ("#" | "." | "$" | ":") spaces IdCon
                  | "@" spaces NatCon spaces "%" spaces NatCon
                  | "@" spaces NatCon,
  Arguments       = "(" spaces Argument ("," spaces Argument)* ")",
  Argument        = Var spaces "=" spaces Expression
                  | Expression,

  FunctionDef     = "def" spaces IdCon spaces Formals* spaces Statement* spaces "end",
  Formals         = "(" Var ("," Var)* ")",

  Expression      = "[" spaces Expression ("," spaces Expression)* "]"
                  | "{" spaces KeyValuePair ("," spaces KeyValuePair)* "}"
                  | Expression "." IdCon
                  | Var 
                  | SymbolCon
                  | NatCon,
                  

  KeyValuePair    = IdCon ":" Expression,
   
  Statement       = "if" spaces "(" spaces Predicate spaces ")" spaces Statement
                  | "if" spaces "(" spaces Predicate spaces ")" spaces Statement spaces "else" spaces Statement
                  | "each" spaces "(" spaces Var spaces ":" spaces Expression spaces ")" spaces Statement
                  | "let" Assignment+ "in" Statement* "end"
                  | "{" spaces Statement* spaces "}"
                  | "comment" spaces StrCon spaces ","
                  | "echo" spaces Expression spaces ";" 
                  | "cdata" spaces Expression spaces ";"
                  | "yield" ";"  
                  | Markup+ spaces Statement  
                  | Markup spaces ";" spaces  
                  | Markup+ spaces Markup spaces ";" spaces                    
                  | Markup+ spaces Expression spaces ";" spaces                                 
                  | Markup+ spaces Embedding spaces ";" spaces,

  Predicate       = Expression spaces
                  | Expression spaces "." spaces Type spaces "?" spaces
                  | "!" spaces Predicate spaces
                  | Predicate spaces "&&" spaces Predicate spaces
                  | Predicate spaces "||" spaces Predicate spaces,
                  

  Assignment      = Var EqualOperator Expression ";"
                  | IdCon Formals "=" Statement,

  
  Comment         = fromTo('/*', '*/') | fromTo('//', '\n'),
  Var             = IdCon,
  IdCon           = IdChar+,
  IdChar          = letterOrDigit | "_" | "-",
  NatCon          = digit+,
  SymbolCon       = "'" SymbolChar* "'", 
  SymbolChar      = letterOrDigit | space | "_" | "-",  
  Text            = "\''" TextChar* "\''",
  TextChar        = letterOrDigit | EscQuote | TextCharRef | TextEntityRef,
  TextCharRef     = "&#" digit+ ";"
                  | "&#x" HexaDecimal+ ";",
  TextEntityRef   = "&" XMLSymbol XML* ";",
  HexaDecimal     = char:c ?((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')),
  XMLRef1         = letter | "_" | ":",
  XMLRef2         = letterOrDigit | "." | "-" | "_" | ":",
  EqualOperator   = "=",
  fromTo :x :y    = seq(x) (~seq(y) char)* seq(y),
  Amp             = "&",

  PreText         = "\''" TextChar* "<",
  PostText        = ">" TextChar* "\''",
  MidText         = ">" TextChar* "<",
  TextTail        = PostText
                  | MidText Embed TextTail,
  Embedding       = PreText Embed TextTail,
  Embed           = Markup* Markup
}
